! function(e) {
    function t(t) {
        for (var i, l, o = t[0], r = t[1], h = t[2], d = 0, y = []; d < o.length; d++) l = o[d], Object.prototype.hasOwnProperty.call(s, l) && s[l] && y.push(s[l][0]), s[l] = 0;
        for (i in r) Object.prototype.hasOwnProperty.call(r, i) && (e[i] = r[i]);
        for (p && p(t); y.length;) y.shift()();
        return n.push.apply(n, h || []), a()
    }

    function a() {
        for (var e, t = 0; t < n.length; t++) {
            for (var a = n[t], i = !0, o = 1; o < a.length; o++) {
                var r = a[o];
                0 !== s[r] && (i = !1)
            }
            i && (n.splice(t--, 1), e = l(l.s = a[0]))
        }
        return e
    }
    var i = {},
        s = {
            1: 0
        },
        n = [];

    function l(t) {
        if (i[t]) return i[t].exports;
        var a = i[t] = {
            i: t,
            l: !1,
            exports: {}
        };
        return e[t].call(a.exports, a, a.exports, l), a.l = !0, a.exports
    }
    l.m = e, l.c = i, l.d = function(e, t, a) {
        l.o(e, t) || Object.defineProperty(e, t, {
            enumerable: !0,
            get: a
        })
    }, l.r = function(e) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
        }), Object.defineProperty(e, "__esModule", {
            value: !0
        })
    }, l.t = function(e, t) {
        if (1 & t && (e = l(e)), 8 & t) return e;
        if (4 & t && "object" == typeof e && e && e.__esModule) return e;
        var a = Object.create(null);
        if (l.r(a), Object.defineProperty(a, "default", {
                enumerable: !0,
                value: e
            }), 2 & t && "string" != typeof e)
            for (var i in e) l.d(a, i, function(t) {
                return e[t]
            }.bind(null, i));
        return a
    }, l.n = function(e) {
        var t = e && e.__esModule ? function() {
            return e.default
        } : function() {
            return e
        };
        return l.d(t, "a", t), t
    }, l.o = function(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t)
    }, l.p = "";
    var o = window.webpackJsonp = window.webpackJsonp || [],
        r = o.push.bind(o);
    o.push = t, o = o.slice();
    for (var h = 0; h < o.length; h++) t(o[h]);
    var p = r;
    n.push([452, 0, 3]), a()
}({
    0: function(e, t, a) {
        "use strict";
        var i = a(43),
            s = a.n(i),
            n = a(5),
            l = a.n(n),
            o = a(6),
            r = a.n(o),
            h = a(16),
            p = (a(1), function() {
                function e() {
                    l()(this, e), this.shortName = "", this.saveKey = "", this.gameVersion = 0, this.name = "", this.containerName = "", this.gameWidth = 0, this.gameHeight = 0, this.gameAreaMin = h.a.ZERO, this.gameAreaMax = h.a.ZERO, this.gameAreaSize = h.a.ZERO, this.phyStepMax = 0, this.fontNames = {
                        MENU: "undefined_menu",
                        LVL_MSG: "undefined_msg",
                        LVL_NUM: "undefined_lvlnum",
                        SCORE: "undefined_score",
                        FREEZE: "undefined_freeze",
                        SLO_MO: "undefined_slow",
                        COMBOBONUS: "undefined_combobonus",
                        TIME_PTS: "undefined_time_pts"
                    }, this.lazyFontNames = {
                        RETENTION_XP: "undefined_retention_xp"
                    }, this.spriteScale = 0, this.spriteKey = "", this.spriteAtlasJSON = "", this.spriteLocation = "", this.editorSpriteKey = "skEditor", this.editorAtlasJSON = "assets/editor/editor_textures.json", this.editorSpriteLocation = "assets/editor", this.lazySpriteKey = "lazySk", this.lazyAtlasJSON = "", this.frameNames = {}, this.animations = [], this.lazyAnimations = [], this.playerSpeed = 0, this.playerStartG = 0, this.playerLadderSpeed = 7, this.playerLadderSlideSpeed = 35, this.playerSpeedUp = this.playerSpeed + 5, this.playerLadderSpeedUp = this.playerLadderSpeed + 3.5, this.playerCollW = 0, this.playerCollH = 0, this.itemGrav = 0, this.timebarP1 = h.a.ZERO, this.timebarP2 = h.a.ZERO, this.timebarColorBack = 0, this.timebarColorBackStroke = 0, this.timebarColorFront = 0, this.ballSizes = [], this.ballBounceDiff = [0, 0, 8, 15, 30, 50], this.itemAlive = 0, this.itemVanishSpeed = 0, this.shieldDissappearTime = 0, this.gameUIAreaStroke = 0, this.livesVisible = 0
                }
                return r()(e, [{
                    key: "init",
                    value: function() {
                        return console.error("template not yet defined! code 12321"), this
                    }
                }, {
                    key: "loaderBeforeGameStarts",
                    value: function(e) {}
                }, {
                    key: "loaderAfterGameStarts",
                    value: function(e) {}
                }, {
                    key: "isBT",
                    get: function() {
                        return this.shortName == i.GAME_BS1
                    }
                }, {
                    key: "isBS2",
                    get: function() {
                        return this.shortName == i.GAME_BS2
                    }
                }, {
                    key: "isBS3",
                    get: function() {
                        return this.shortName == i.GAME_BS3
                    }
                }]), e
            }()),
            d = a(10),
            y = a.n(d),
            _ = a(7),
            c = a.n(_),
            m = a(11),
            u = a.n(m),
            g = a(15),
            v = a(18),
            f = a(2),
            S = function(e) {
                function t() {
                    return l()(this, t), y()(this, c()(t).apply(this, arguments))
                }
                return u()(t, e), r()(t, [{
                    key: "init",
                    value: function() {
                        return this.shortName = i.GAME_BS1, this.saveKey = "BubbleTrouble", this.gameVersion = .01, this.name = "Bubble Trouble", this.containerName = "bubble-trouble", this.gameWidth = 700, this.gameHeight = 450, this.gameAreaMin = new h.a(6, 1), this.gameAreaMax = new h.a(694, 368), this.gameAreaSize = new h.a(this.gameAreaMax.x - this.gameAreaMin.x, this.gameAreaMax.y - this.gameAreaMin.y), this.phyStepMax = 250, this.fontNames = {
                            MENU: "ui_announce",
                            LVL_MSG: "ui_announce",
                            LVL_NUM: "ui_level_num",
                            SCORE: "ui_score"
                        }, this.lazyFontNames = {
                            RETENTION_XP: "retention_xp"
                        }, this.spriteScale = .5, this.spriteKey = "mySprites", this.spriteAtlasJSON = "assets/bt1/sprites/bt1.json", this.spriteLocation = "assets/bt1/sprites", this.lazyAtlasJSON = "assets/bt1/sprites/bt1_lazy.json", this.frameNames = {
                            mine_digin: [{
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_001.png"
                            }, {
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_002.png"
                            }, {
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_003.png"
                            }, {
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_004.png"
                            }, {
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_005.png"
                            }, {
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_006.png"
                            }, {
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_007.png"
                            }, {
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_008.png"
                            }, {
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_009.png"
                            }, {
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_010.png"
                            }, {
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_011.png"
                            }, {
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_012.png"
                            }, {
                                key: this.spriteKey,
                                frame: "shots/mine_ani/mine_013.png"
                            }],
                            pop: [{
                                key: this.spriteKey,
                                frame: "bubbles/pop_bubble_1.png"
                            }, {
                                key: this.spriteKey,
                                frame: "bubbles/pop_bubble_2.png"
                            }, {
                                key: this.spriteKey,
                                frame: "bubbles/pop_bubble_3.png"
                            }],
                            torch: [{
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_1.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_2.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_3.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_4.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_5.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_6.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_7.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_8.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_9.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_10.png"
                            }]
                        }, this.animations = [{
                            key: "mine_digin",
                            frames: this.frameNames.mine_digin,
                            frameRate: 20,
                            repeat: 0
                        }, {
                            key: "pop",
                            frames: this.frameNames.pop,
                            frameRate: 30,
                            repeat: 1
                        }], this.lazyAnimations = [{
                            key: "torch_burn",
                            frames: this.frameNames.torch,
                            frameRate: 15,
                            repeat: -1
                        }], this.playerSpeed = 13, this.playerCollW = 20, this.playerCollH = 42, this.itemGrav = 8, this.timebarP1 = new h.a(5, 374), this.timebarP2 = new h.a(695, 392), this.timebarColorBack = 6645093, this.timebarColorBackStroke = 12698049, this.timebarColorFront = 15010330, this.ballSizes = [0, 5, 10, 20, 30, 40, 50], this.itemAlive = 2, this.itemVanishSpeed = 2, this.shieldDissappearTime = 3, this.gameUIAreaStroke = 12698049, this.livesVisible = 9, this
                    }
                }, {
                    key: "loaderBeforeGameStarts",
                    value: function(e) {
                        e.load.multiatlas(this.spriteKey, this.spriteAtlasJSON, this.spriteLocation), e.load.bitmapFont(this.fontNames.SCORE, "assets/bt1/fonts/ui_score.png", "assets/bt1/fonts/ui_score.fnt"), e.load.bitmapFont(this.fontNames.MENU, "assets/bt1/fonts/ui_announce.png", "assets/bt1/fonts/ui_announce.fnt"), e.load.bitmapFont(this.fontNames.LVL_NUM, "assets/bt1/fonts/ui_level_num.png", "assets/bt1/fonts/ui_level_num.fnt"), e.load.image("main_menu_floor", "assets/bt1/images/main_menu_floor.png"), (v.a.isCordova || f.a.debugLog) && (e.load.image("app_logo_bsa", "assets/bt1/images/app_logo_bsa.png"), e.load.image("download_apple", "assets/bt1/images/app_download_apple.png"), e.load.image("download_google", "assets/bt1/images/app_download_google.png"), e.load.image("fillerad_bsa", "assets/bt1/images/fillerads/app_screenshot_bsa.png"), e.load.image("fillerad_btc", "assets/bt1/images/fillerads/app_screenshot_btc.png"), e.load.image("fillerad_bs2", "assets/bt1/images/fillerads/app_screenshot_bs2.png"), e.load.image("fillerad_bs3", "assets/bt1/images/fillerads/app_screenshot_bs3.png"), e.load.image("app_logo_btc", "assets/bt1/images/fillerads/app_logo_btc.png"), e.load.image("app_logo_bs2", "assets/bt1/images/fillerads/app_logo_bs2.png"), e.load.image("app_logo_bs3", "assets/bt1/images/fillerads/app_logo_bs3.png")), e.load.image("back_lvl_1", "assets/bt1/images/backgrounds/lvl1.jpg")
                    }
                }, {
                    key: "loaderAfterGameStarts",
                    value: function(e) {
                        g.a.preloadSounds(e);
                        for (var t = 2; t <= 22; t++) e.load.image("back_lvl_" + t, "assets/bt1/images/backgrounds/lvl" + t + ".jpg");
                        e.load.multiatlas(this.lazySpriteKey, this.lazyAtlasJSON, this.spriteLocation), e.load.json("all_tasks", "assets/bt1/retention/all_tasks_bt1.json"), e.load.bitmapFont(this.lazyFontNames.RETENTION_XP, "assets/bt1/fonts/retention_xp.png", "assets/bt1/fonts/retention_xp.fnt")
                    }
                }]), t
            }(p),
            E = function(e) {
                function t() {
                    return l()(this, t), y()(this, c()(t).apply(this, arguments))
                }
                return u()(t, e), r()(t, [{
                    key: "init",
                    value: function() {
                        this.shortName = i.GAME_BS2, this.saveKey = "BubbleStruggle2", this.gameVersion = .01, this.name = "Bubble Struggle 2", this.containerName = "bubble-struggle2", this.gameWidth = 640, this.gameHeight = 480, this.gameAreaMin = new h.a(10, 10), this.gameAreaMax = new h.a(630, 420), this.gameAreaSize = new h.a(this.gameAreaMax.x - this.gameAreaMin.x, this.gameAreaMax.y - this.gameAreaMin.y), this.phyStepMax = 20, this.fontNames = {
                            MENU: "ui_buttons",
                            LVL_MSG: "ui_buttons",
                            LVL_NUM: "ui_buttons",
                            SCORE: "ui_buttons",
                            FREEZE: "ui_freeze",
                            SLO_MO: "ui_slo_mo",
                            COMBOX: "ui_combox"
                        }, this.lazyFontNames = {
                            RETENTION_XP: "retention_xp"
                        }, this.spriteScale = 1, this.spriteKey = "mySprites", this.spriteAtlasJSON = "assets/bs2/sprites/bs2.json", this.spriteLocation = "assets/bs2/sprites", this.lazyAtlasJSON = "assets/bs2/sprites/bs2_lazy.json", this.frameNames = {}, this.frameNames.walkLeft = [], this.frameNames.walkRight = [];
                        for (var e = 31; e <= 50; e++) this.frameNames.walkLeft.push({
                            key: this.spriteKey,
                            frame: "char/walk/left_" + e + ".png"
                        }), this.frameNames.walkRight.push({
                            key: this.spriteKey,
                            frame: "char/walk/right_" + e + ".png"
                        });
                        this.frameNames.idle = [];
                        for (e = 50; e <= 89; e += 3) this.frameNames.idle.push({
                            key: this.spriteKey,
                            frame: "char/idle/idle_" + e + ".png"
                        });
                        this.frameNames.win = [];
                        for (e = 20; e <= 50; e++) this.frameNames.win.push({
                            key: this.spriteKey,
                            frame: "char/win/win_" + e + ".png"
                        });
                        this.frameNames.die = [{
                            key: this.spriteKey,
                            frame: "char/die/die.png"
                        }], this.frameNames.climb = [];
                        for (e = 21; e <= 30; e++) this.frameNames.climb.push({
                            key: this.spriteKey,
                            frame: "char/climb/climb_" + e + ".png"
                        });
                        this.frameNames.climb_on = [];
                        for (e = 30; e <= 45; e++) this.frameNames.climb_on.push({
                            key: this.spriteKey,
                            frame: "char/climb_onoff/climb_onoff_" + e + ".png"
                        });
                        this.frameNames.slide = [{
                            key: this.spriteKey,
                            frame: "char/slide/slide.png"
                        }], this.frameNames.singleShot = [{
                            key: this.spriteKey,
                            frame: "shots/single_frm1.png"
                        }, {
                            key: this.spriteKey,
                            frame: "shots/single_frm2.png"
                        }], this.frameNames.singleShot_p2 = [{
                            key: this.spriteKey,
                            frame: "shots/single_frm1_p2.png"
                        }, {
                            key: this.spriteKey,
                            frame: "shots/single_frm2_p2.png"
                        }], this.frameNames.laser_leaf = [];
                        for (e = 1; e <= 49; e++) this.frameNames.laser_leaf.push({
                            key: this.spriteKey,
                            frame: "shots/laser_leaf/leaf" + e + ".png"
                        });
                        this.frameNames.convbelt = [];
                        for (e = 1; e <= 10; e++) this.frameNames.convbelt.push({
                            key: this.spriteKey,
                            frame: "walls/convbelt/convbelt_" + e + ".png"
                        });
                        this.frameNames.pop = [{
                            key: this.spriteKey,
                            frame: "bubbles/pop_bubble_1.png"
                        }, {
                            key: this.spriteKey,
                            frame: "bubbles/pop_bubble_2.png"
                        }, {
                            key: this.spriteKey,
                            frame: "bubbles/pop_bubble_3.png"
                        }], this.frameNames.teleport_ani = [];
                        for (e = 1; e <= 34; e++) this.frameNames.teleport_ani.push({
                            key: this.lazySpriteKey,
                            frame: "teleport/teleport_" + e + ".png"
                        });
                        return this.frameNames.torch = [{
                            key: this.lazySpriteKey,
                            frame: "ani_torch/torch_1.png"
                        }, {
                            key: this.lazySpriteKey,
                            frame: "ani_torch/torch_2.png"
                        }, {
                            key: this.lazySpriteKey,
                            frame: "ani_torch/torch_3.png"
                        }, {
                            key: this.lazySpriteKey,
                            frame: "ani_torch/torch_4.png"
                        }, {
                            key: this.lazySpriteKey,
                            frame: "ani_torch/torch_5.png"
                        }, {
                            key: this.lazySpriteKey,
                            frame: "ani_torch/torch_6.png"
                        }, {
                            key: this.lazySpriteKey,
                            frame: "ani_torch/torch_7.png"
                        }, {
                            key: this.lazySpriteKey,
                            frame: "ani_torch/torch_8.png"
                        }, {
                            key: this.lazySpriteKey,
                            frame: "ani_torch/torch_9.png"
                        }, {
                            key: this.lazySpriteKey,
                            frame: "ani_torch/torch_10.png"
                        }, {
                            key: this.lazySpriteKey,
                            frame: "ani_torch/torch_11.png"
                        }], this.animations = [{
                            key: "walkLeft",
                            frames: this.frameNames.walkLeft,
                            frameRate: 37,
                            repeat: -1
                        }, {
                            key: "walkRight",
                            frames: this.frameNames.walkRight,
                            frameRate: 37,
                            repeat: -1
                        }, {
                            key: "idle",
                            frames: this.frameNames.idle,
                            frameRate: 10,
                            repeat: -1
                        }, {
                            key: "win",
                            frames: this.frameNames.win,
                            frameRate: 45,
                            repeat: 0
                        }, {
                            key: "die",
                            frames: this.frameNames.die,
                            frameRate: 1,
                            repeat: 0
                        }, {
                            key: "climb",
                            frames: this.frameNames.climb,
                            frameRate: 0,
                            repeat: 0
                        }, {
                            key: "climb_on",
                            frames: this.frameNames.climb_on,
                            frameRate: 37,
                            repeat: 0
                        }, {
                            key: "slide",
                            frames: this.frameNames.slide,
                            frameRate: 1,
                            repeat: 0
                        }, {
                            key: "singleShot",
                            frames: this.frameNames.singleShot,
                            frameRate: 10,
                            repeat: -1
                        }, {
                            key: "singleShot_p2",
                            frames: this.frameNames.singleShot_p2,
                            frameRate: 10,
                            repeat: -1
                        }, {
                            key: "laser_leaf",
                            frames: this.frameNames.laser_leaf,
                            frameRate: 30,
                            repeat: 0
                        }, {
                            key: "convbelt",
                            frames: this.frameNames.convbelt,
                            frameRate: 18,
                            repeat: -1
                        }, {
                            key: "pop",
                            frames: this.frameNames.pop,
                            frameRate: 30,
                            repeat: 1
                        }], this.lazyAnimations = [{
                            key: "torch_burn",
                            frames: this.frameNames.torch,
                            frameRate: 15,
                            repeat: -1
                        }, {
                            key: "teleport_ani",
                            frames: this.frameNames.teleport_ani,
                            frameRate: 40,
                            repeat: 0
                        }], this.playerSpeed = 11.5, this.playerStartG = 60, this.playerLadderSpeed = 7, this.playerLadderSlideSpeed = 35, this.playerSpeedUp = this.playerSpeed + 5, this.playerLadderSpeedUp = this.playerLadderSpeed + 3.5, this.playerCollW = 22, this.playerCollH = 42, this.itemGrav = 9, this.timebarP1 = new h.a(10, 424), this.timebarP2 = new h.a(630, 432), this.timebarColorBack = 6447714, this.timebarColorBackStroke = 5198675, this.timebarColorFront = 16662335, this.ballSizes = [0, 6, 12.5, 22.5, 42.25, 62.25], this.itemAlive = 5.5, this.itemVanishSpeed = 2, this.shieldDissappearTime = 2, this.gameUIAreaStroke = 5198675, this.livesVisible = 7, this
                    }
                }, {
                    key: "loaderBeforeGameStarts",
                    value: function(e) {
                        e.load.multiatlas(this.spriteKey, this.spriteAtlasJSON, this.spriteLocation);
                        var t = [];
                        for (var a in this.fontNames) {
                            var i = this.fontNames[a];
                            t.includes(i) || (t.push(i), e.load.bitmapFont(i, "assets/bs2/fonts/" + i + ".png", "assets/bs2/fonts/" + i + ".fnt"))
                        }
                        e.load.image("interface_combo_meter", "assets/bs2/images/interface_combo_meter.png"), (v.a.isCordova || f.a.debugLog) && (e.load.image("app_logo_bsa", "assets/bs2/images/app_logo_bsa.png"), e.load.image("download_apple", "assets/bs2/images/app_download_apple.png"), e.load.image("download_google", "assets/bs2/images/app_download_google.png"), e.load.image("fillerad_bsa", "assets/bs2/images/fillerads/app_screenshot_bsa.png"), e.load.image("fillerad_btc", "assets/bs2/images/fillerads/app_screenshot_btc.png"), e.load.image("fillerad_bs2", "assets/bs2/images/fillerads/app_screenshot_bs2.png"), e.load.image("fillerad_bs3", "assets/bs2/images/fillerads/app_screenshot_bs3.png"), e.load.image("app_logo_btc", "assets/bs2/images/fillerads/app_logo_btc.png"), e.load.image("app_logo_bs2", "assets/bs2/images/fillerads/app_logo_bs2.png"), e.load.image("app_logo_bs3", "assets/bs2/images/fillerads/app_logo_bs3.png")), e.load.image("back_lvl_1", "assets/bs2/images/backgrounds/bck_1.jpg")
                    }
                }, {
                    key: "loaderAfterGameStarts",
                    value: function(e) {
                        g.a.preloadSounds(e);
                        for (var t = 2; t <= 50; t++) e.load.image("back_lvl_" + t, "assets/bs2/images/backgrounds/bck_" + t + ".jpg");
                        for (var a in e.load.multiatlas(this.lazySpriteKey, this.lazyAtlasJSON, this.spriteLocation), this._BS2_p2MatchFrames = {}, e.textures.list[this.spriteKey].frames) {
                            var i = "" + e.textures.list[this.spriteKey].frames[a].name;
                            if (-1 != i.indexOf("char/")) {
                                var s = "char_p2/" + i.substr(5);
                                this._BS2_p2MatchFrames[i] = s
                            }
                        }
                        e.load.json("all_tasks", "assets/bs2/retention/all_tasks_bs2.json"), e.load.bitmapFont(this.lazyFontNames.RETENTION_XP, "assets/bs2/fonts/retention_xp.png", "assets/bs2/fonts/retention_xp.fnt")
                    }
                }]), t
            }(p),
            x = a(54),
            T = function(e) {
                function t() {
                    return l()(this, t), y()(this, c()(t).apply(this, arguments))
                }
                return u()(t, e), r()(t, [{
                    key: "init",
                    value: function() {
                        this.shortName = i.GAME_BS3, this.saveKey = "BubbleStruggle3", this.gameVersion = .01, this.name = "Bubble Trouble 3", this.containerName = "bubble-trouble3", this.gameWidth = 640, this.gameHeight = 480, this.gameAreaMin = new h.a(10, 10), this.gameAreaMax = new h.a(630, 420), this.gameAreaSize = new h.a(this.gameAreaMax.x - this.gameAreaMin.x, this.gameAreaMax.y - this.gameAreaMin.y), this.phyStepMax = 20, this.fontNames = {
                            MENU: "ui_buttons",
                            LVL_MSG: "game_message",
                            LVL_NUM: "ui_buttons",
                            SCORE: "ui_buttons",
                            FREEZE: "ui_freeze",
                            SLO_MO: "ui_slo_mo",
                            COMBOX: "ui_combox",
                            COMBOBONUS: "ui_combobonus",
                            TIME_PTS: "ui_time_pts"
                        }, this.lazyFontNames = {
                            RETENTION_XP: "retention_xp"
                        }, this.spriteScale = 1, this.spriteKey = "mySprites", this.spriteAtlasJSON = "assets/bs3/sprites/bs3.json", this.spriteLocation = "assets/bs3/sprites", this.lazyAtlasJSON = "assets/bs3/sprites/bs3_lazy.json", this.frameNames = {}, this.frameNames.walkLeft = [], this.frameNames.walkRight = [];
                        for (var e = 1; e <= 8; e++) this.frameNames.walkLeft.push({
                            key: this.spriteKey,
                            frame: "char/walk/run_left_" + e + ".png"
                        }), this.frameNames.walkRight.push({
                            key: this.spriteKey,
                            frame: "char/walk/run_right_" + e + ".png"
                        });
                        this.frameNames.idle = [];
                        for (e = 1; e <= 21; e++) this.frameNames.idle.push({
                            key: this.spriteKey,
                            frame: "char/idle/idle_" + e + ".png"
                        });
                        this.frameNames.win = [];
                        for (e = 1; e <= 25; e++) this.frameNames.win.push({
                            key: this.spriteKey,
                            frame: "char/win/win_" + e + ".png"
                        });
                        this.frameNames.die = [{
                            key: this.spriteKey,
                            frame: "char/die/die.png"
                        }], this.frameNames.climb = [];
                        for (e = 1; e <= 10; e++) this.frameNames.climb.push({
                            key: this.spriteKey,
                            frame: "char/climb/climb_" + e + ".png"
                        });
                        this.frameNames.climb_on = [];
                        for (e = 1; e <= 10; e++) this.frameNames.climb_on.push({
                            key: this.spriteKey,
                            frame: "char/climb_onoff/climb_onoff_" + e + ".png"
                        });
                        this.frameNames.slide = [{
                            key: this.spriteKey,
                            frame: "char/slide/slide.png"
                        }], this._copyFramesForP2("walkLeft"), this._copyFramesForP2("walkRight"), this._copyFramesForP2("idle"), this._copyFramesForP2("win"), this._copyFramesForP2("die"), this._copyFramesForP2("climb"), this._copyFramesForP2("climb_on"), this._copyFramesForP2("slide"), this.frameNames.singleShot = [{
                            key: this.spriteKey,
                            frame: "shots/single_frm1.png"
                        }, {
                            key: this.spriteKey,
                            frame: "shots/single_frm2.png"
                        }], this.frameNames.singleShot_p2 = [{
                            key: this.spriteKey,
                            frame: "shots/single_frm1_p2.png"
                        }, {
                            key: this.spriteKey,
                            frame: "shots/single_frm2_p2.png"
                        }], this.frameNames.convbelt = [];
                        for (e = 1; e <= 10; e++) this.frameNames.convbelt.push({
                            key: this.spriteKey,
                            frame: "walls/convbelt/convbelt_" + e + ".png"
                        });
                        this.frameNames.pop_default = [];
                        for (e = 1; e <= 7; e++) this.frameNames.pop_default.push({
                            key: this.spriteKey,
                            frame: "pop/_default/pop_" + e + ".png"
                        });
                        for (var t in x.a.COL_NAME) {
                            var a = x.a.COL_NAME[t];
                            this.frameNames["pop_" + a] = [];
                            for (e = 1; e <= 7; e++) this.frameNames["pop_" + a].push({
                                key: this.lazySpriteKey,
                                frame: "pop/" + a + "/pop_" + e + ".png"
                            })
                        }
                        this.frameNames.teleport_ani = [];
                        for (e = 1; e <= 34; e++) this.frameNames.teleport_ani.push({
                            key: this.lazySpriteKey,
                            frame: "teleport/teleport_" + e + ".png"
                        });
                        this.frameNames.shield_plain = [];
                        for (e = 1; e <= 14; e++) this.frameNames.shield_plain.push({
                            key: this.lazySpriteKey,
                            frame: "shield_plain/shield_plain_" + e + ".png"
                        });
                        this.frameNames.shield_inv = [];
                        for (e = 1; e <= 14; e++) this.frameNames.shield_inv.push({
                            key: this.lazySpriteKey,
                            frame: "shield_inv/shield_inv_" + e + ".png"
                        });
                        this.frameNames.shield_el = [];
                        for (e = 2; e <= 16; e++) this.frameNames.shield_el.push({
                            key: this.lazySpriteKey,
                            frame: "shield_el/shield_el_" + e + ".png"
                        });
                        this.frameNames.firework_blast = [];
                        for (e = 1; e <= 5; e++) this.frameNames.firework_blast.push({
                            key: this.lazySpriteKey,
                            frame: "ui/confetti/blast_" + e + ".png"
                        });
                        this.frameNames.garmen = [];
                        for (e = 1; e <= 11; e++) this.frameNames.garmen.push({
                            key: this.lazySpriteKey,
                            frame: "ui/confetti/garmen_" + e + ".png"
                        });
                        this.frameNames.run_smoke = [];
                        for (e = 1; e <= 15; e++) this.frameNames.run_smoke.push({
                            key: this.lazySpriteKey,
                            frame: "run_smoke/run_smoke_" + e + ".png"
                        });
                        this.frameNames.timed_ani = [];
                        for (e = 4; e <= 23; e++) this.frameNames.timed_ani.push({
                            key: this.lazySpriteKey,
                            frame: "timed_ani/timed_" + e + ".png"
                        });
                        for (var t in this.frameNames.torch = [{
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_1.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_2.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_3.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_4.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_5.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_6.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_7.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_8.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_9.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_10.png"
                            }, {
                                key: this.lazySpriteKey,
                                frame: "ani_torch/torch_11.png"
                            }], this.animations = [{
                                key: "walkLeft",
                                frames: this.frameNames.walkLeft,
                                frameRate: 10,
                                repeat: -1
                            }, {
                                key: "walkRight",
                                frames: this.frameNames.walkRight,
                                frameRate: 10,
                                repeat: -1
                            }, {
                                key: "idle",
                                frames: this.frameNames.idle,
                                frameRate: 15,
                                repeat: -1
                            }, {
                                key: "win",
                                frames: this.frameNames.win,
                                frameRate: 25,
                                repeat: 0
                            }, {
                                key: "die",
                                frames: this.frameNames.die,
                                frameRate: 1,
                                repeat: 0
                            }, {
                                key: "climb",
                                frames: this.frameNames.climb,
                                frameRate: 0,
                                repeat: 0
                            }, {
                                key: "climb_on",
                                frames: this.frameNames.climb_on,
                                frameRate: 17,
                                repeat: 0
                            }, {
                                key: "slide",
                                frames: this.frameNames.slide,
                                frameRate: 1,
                                repeat: 0
                            }, {
                                key: "singleShot",
                                frames: this.frameNames.singleShot,
                                frameRate: 10,
                                repeat: -1
                            }, {
                                key: "singleShot_p2",
                                frames: this.frameNames.singleShot_p2,
                                frameRate: 10,
                                repeat: -1
                            }, {
                                key: "convbelt",
                                frames: this.frameNames.convbelt,
                                frameRate: 18,
                                repeat: -1
                            }, {
                                key: "pop_default",
                                frames: this.frameNames.pop_default,
                                frameRate: 36,
                                repeat: 0
                            }], this.lazyAnimations = [{
                                key: "torch_burn",
                                frames: this.frameNames.torch,
                                frameRate: 15,
                                repeat: -1
                            }, {
                                key: "teleport_ani",
                                frames: this.frameNames.teleport_ani,
                                frameRate: 40,
                                repeat: 0
                            }, {
                                key: "shield_plain",
                                frames: this.frameNames.shield_plain,
                                frameRate: 40,
                                repeat: -1
                            }, {
                                key: "shield_inv",
                                frames: this.frameNames.shield_inv,
                                frameRate: 40,
                                repeat: -1
                            }, {
                                key: "shield_el",
                                frames: this.frameNames.shield_el,
                                frameRate: 15,
                                repeat: -1
                            }, {
                                key: "firework_blast",
                                frames: this.frameNames.firework_blast,
                                frameRate: 8,
                                repeat: 0
                            }, {
                                key: "garmen",
                                frames: this.frameNames.garmen,
                                frameRate: 20,
                                repeat: 0
                            }, {
                                key: "run_smoke",
                                frames: this.frameNames.run_smoke,
                                frameRate: 20,
                                repeat: 0
                            }, {
                                key: "timed_ani",
                                frames: this.frameNames.timed_ani,
                                frameRate: 20,
                                repeat: 0
                            }], x.a.COL_NAME) {
                            var s = {
                                key: "pop_" + (a = x.a.COL_NAME[t]),
                                frames: this.frameNames["pop_" + a],
                                frameRate: 36,
                                repeat: 0
                            };
                            this.lazyAnimations.push(s)
                        }
                        var n = [{
                            key: "walkLeft_p2",
                            frames: this.frameNames.walkLeft_p2,
                            frameRate: 10,
                            repeat: -1
                        }, {
                            key: "walkRight_p2",
                            frames: this.frameNames.walkRight_p2,
                            frameRate: 10,
                            repeat: -1
                        }, {
                            key: "idle_p2",
                            frames: this.frameNames.idle_p2,
                            frameRate: 15,
                            repeat: -1
                        }, {
                            key: "win_p2",
                            frames: this.frameNames.win_p2,
                            frameRate: 25,
                            repeat: 0
                        }, {
                            key: "die_p2",
                            frames: this.frameNames.die_p2,
                            frameRate: 1,
                            repeat: 0
                        }, {
                            key: "climb_p2",
                            frames: this.frameNames.climb_p2,
                            frameRate: 0,
                            repeat: 0
                        }, {
                            key: "climb_on_p2",
                            frames: this.frameNames.climb_on_p2,
                            frameRate: 17,
                            repeat: 0
                        }, {
                            key: "slide_p2",
                            frames: this.frameNames.slide_p2,
                            frameRate: 1,
                            repeat: 0
                        }];
                        return this.lazyAnimations = this.lazyAnimations.concat(n), this.playerSpeed = 14, this.playerStartG = 65, this.playerLadderSpeed = 10, this.playerLadderSlideSpeed = 42, this.playerSpeedUp = this.playerSpeed + 5, this.playerLadderSpeedUp = this.playerLadderSpeed + 3.5, this.playerCollW = 22, this.playerCollH = 45, this.itemGrav = 12.5, this.timebarP1 = new h.a(10, 424), this.timebarP2 = new h.a(630, 432), this.timebarColorBack = 6447714, this.timebarColorBackStroke = 5198675, this.timebarColorFront = 16662335, this.ballSizes = [0, 6, 12.5, 22.5, 42.25, 62.25], this.itemAlive = 5.5, this.itemVanishSpeed = 2, this.shieldDissappearTime = 2, this.gameUIAreaStroke = 0, this.livesVisible = 7, this
                    }
                }, {
                    key: "_copyFramesForP2",
                    value: function(e) {
                        var t = this,
                            a = e + "_p2";
                        this.frameNames[a] = [], this.frameNames[e].forEach((function(e) {
                            t.frameNames[a].push({
                                key: t.lazySpriteKey,
                                frame: e.frame
                            })
                        }))
                    }
                }, {
                    key: "loaderBeforeGameStarts",
                    value: function(e) {
                        e.load.multiatlas(this.spriteKey, this.spriteAtlasJSON, this.spriteLocation);
                        var t = [];
                        for (var a in this.fontNames) {
                            var i = this.fontNames[a];
                            t.includes(i) || (t.push(i), e.load.bitmapFont(i, "assets/bs3/fonts/" + i + ".png", "assets/bs3/fonts/" + i + ".fnt"))
                        }
                        e.load.image("interface_combo_meter", "assets/bs3/images/interface_combo_meter.png"), e.load.image("game_interface", "assets/bs3/images/game_interface.jpg"), (v.a.isCordova || f.a.debugLog) && (e.load.image("app_logo_bsa", "assets/bs3/images/app_logo_bsa.png"), e.load.image("download_apple", "assets/bs3/images/app_download_apple.png"), e.load.image("download_google", "assets/bs3/images/app_download_google.png"), e.load.image("fillerad_bsa", "assets/bs3/images/fillerads/app_screenshot_bsa.png"), e.load.image("fillerad_btc", "assets/bs3/images/fillerads/app_screenshot_btc.png"), e.load.image("fillerad_bs2", "assets/bs3/images/fillerads/app_screenshot_bs2.png"), e.load.image("fillerad_bs3", "assets/bs3/images/fillerads/app_screenshot_bs3.png"), e.load.image("app_logo_btc", "assets/bs3/images/fillerads/app_logo_btc.png"), e.load.image("app_logo_bs2", "assets/bs3/images/fillerads/app_logo_bs2.png"), e.load.image("app_logo_bs3", "assets/bs3/images/fillerads/app_logo_bs3.png")), e.load.image("back_lvl_1", "assets/bs3/images/backgrounds/bck_1.jpg")
                    }
                }, {
                    key: "loaderAfterGameStarts",
                    value: function(e) {
                        g.a.preloadSounds(e), e.load.image("mainmenu_background", "assets/bs3/images/mainmenu_background.jpg");
                        for (var t = 2; t <= 46; t++) e.load.image("back_lvl_" + t, "assets/bs3/images/backgrounds/bck_" + t + ".jpg");
                        e.load.multiatlas(this.lazySpriteKey, this.lazyAtlasJSON, this.spriteLocation), e.load.json("all_tasks", "assets/bs3/retention/all_tasks_bs3.json"), e.load.bitmapFont(this.lazyFontNames.RETENTION_XP, "assets/bs3/fonts/retention_xp.png", "assets/bs3/fonts/retention_xp.fnt")
                    }
                }]), t
            }(p),
            b = null,
            k = s.a.GET_MY_GAME();
        k == s.a.GAME_BS1 ? b = (new S).init() : k == s.a.GAME_BS2 ? b = (new E).init() : k == s.a.GAME_BS3 && (b = (new T).init());
        t.a = b
    },
    1: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return o
        }));
        var i = a(5),
            s = a.n(i),
            n = a(17),
            l = a.n(n),
            o = function e() {
                s()(this, e)
            };
        l()(o, "PHY", {
            COL_EDGE: {
                LEFT: "left",
                RIGHT: "right",
                TOP: "top",
                BOTTOM: "bot"
            }
        }), l()(o, "ITEM_MANAGER", {
            MOD_TYPE: {
                NONE: "none",
                SLOW_TIME: "slow_time",
                DYNAMITE: "dynamite",
                FREEZE: "freeze",
                MEDAL: "medal",
                WARP: "warp",
                UPGRADE_SLOW: "upgrade_slow",
                UPGRADE_PHASE: "upgrade_phase",
                UPGRADE_LAST_BREATH: "upgrade_lastbreath",
                UPGRADE_TANK: "upgrade_tank",
                UPGRADE_ITEMLIFE: "upgrade_itemlife",
                UPGRADE_FREEZE: "upgrade_freeze",
                UPGRADE_MEDAL: "upgrade_medal",
                UPGRADE_ETIME: "upgrade_etime"
            }
        }), l()(o, "ITEM_SPAWN_REASON", {
            NONE: "none",
            WALL: "wall",
            BALL: "ball"
        }), l()(o, "GO_TYPE", {
            NONE: "none",
            BALL: "ball",
            PLAYER: "player",
            SHOT: "shot",
            WALL: "wall",
            ITEM: "item",
            LADDER: "ladder"
        }), l()(o, "BALL_TYPE", {
            NORMAL: "normal",
            PENTA: "penta",
            REVERSE: "reverse"
        }), l()(o, "BALL_TYPE_INFO", {
            NORMAL: "normal",
            PENTA: "penta",
            REVERSE: "reverse",
            METAL: "metal",
            GHOST: "ghost",
            SPLIT4: "split4"
        }), l()(o, "POP_REASON", {
            SHIELD_PLAIN: "shield_plain",
            SHOT: "shot",
            BT1_SPIKES_TOP: "bt1_spikes_top",
            SPIKEBURST: "spikeburst",
            DYNAMITE: "dynamite",
            MEDAL: "medal",
            SHIELD_TANK: "shield_tank",
            SQUISH: "squish"
        }), l()(o, "WALL", {
            WALL_TYPE: {
                NORMAL: "normal",
                SLIDING_BT1: "sliding",
                DOOR_BT1: "door",
                CEILSPIKE_BT1: "ceilspike",
                LADDER: "ladder",
                BREAKABLE: "breakable",
                SWITCH: "switch",
                ICE: "ice",
                TRAMPOLINE: "trampoline",
                CONV_BELT: "convbelt",
                SPIKEALL: "spikeall",
                TELEPORT: "teleport",
                CAVEIN_BS3: "caveinbs3",
                TIMED: "timed",
                STICKY: "sticky",
                MOVING: "moving"
            }
        }), l()(o, "ITEM_TYPE", {
            NONE: "none",
            POINTS1: "points1",
            POINTS2: "points2",
            POINTS3: "points3",
            POINTS4: "points4",
            W_SINGLE: "wsingle",
            W_HOOK: "whook",
            W_MINE: "wmine",
            W_LASER: "wlaser",
            E_LIFE: "elife",
            S_TIME: "stime",
            S_PLAIN: "splain",
            E_TIME: "etime",
            DYNAMITE: "dynamite",
            FREEZE: "freeze",
            MEDAL: "medal",
            S_INVI: "sinvi",
            SPEED: "speed",
            W_DOUBLE: "wdouble"
        }), l()(o, "SHOT_TYPE", {
            SINGLE: "single",
            HOOK: "hook",
            LASER: "laser",
            MINE: "mine",
            DOUBLE: "double"
        }), l()(o, "UPGRADE_TIP", "Upgrade will auto-activate when level time reaches exactly half"), l()(o, "SHARE_TYPE", {
            LEVEL: "level",
            RANK: "rank",
            ALL: "all"
        })
    },
    102: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(19),
            p = a.n(h),
            d = a(7),
            y = a.n(d),
            _ = a(11),
            c = a.n(_),
            m = a(16),
            u = a(49),
            g = (a(249), a(3)),
            v = a(22),
            f = (a(243), a(30), a(70), a(15)),
            S = a(1),
            E = a(12),
            x = function(e) {
                function t(e) {
                    var a;
                    return s()(this, t), void 0 === e && console.error("Cant create Shot without all parameters. Something is undefined." + e), (a = r()(this, y()(t).call(this, e.gameScene, v.a.LAYER.SHOT, v.a.LAYERS_SHOT, m.a.ZERO, m.a.ZERO))).shotManager = e, a.shotType = S.a.SHOT_TYPE.SINGLE, a.player = e.player, a.shotSpeed = 0, a.shotOrigin = m.a.ZERO, a
                }
                return c()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        return this.goType = S.a.GO_TYPE.SHOT, this.myRenderDepth = g.a.RENDER_DEPTH.UNDER_GAME, this
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        p()(y()(t.prototype), "myOnDestroy", this).call(this), this.shotManager.removeShot(this)
                    }
                }, {
                    key: "collideEdge",
                    value: function(e, t, a, i, s, n, l, o) {
                        var r = !1;
                        if (o.goType == S.a.GO_TYPE.BALL) {
                            var h = o;
                            if (h._isGhostOn && !h.isStatic) return !0;
                            if (h._isMetal || h._isWarp) return f.a.playSound(this.gameScene, f.a.SND.METAL_BALL), this.myOnDestroy(), this.shotManager.accuracyBonus = !1, E.a.TaskIncrement(this.gameScene, E.a.TASK_TYPE.SHOOT_BALL_TYPE, 1, S.a.BALL_TYPE_INFO.METAL), !0;
                            h._isGhost && E.a.TaskIncrement(this.gameScene, E.a.TASK_TYPE.SHOOT_BALL_TYPE, 1, S.a.BALL_TYPE_INFO.GHOST), 4 == h._splitWay && E.a.TaskIncrement(this.gameScene, E.a.TASK_TYPE.SHOOT_BALL_TYPE, 1, S.a.BALL_TYPE_INFO.SPLIT4), E.a.TaskIncrement(this.gameScene, E.a.TASK_TYPE.SHOOT_BALL_TYPE, 1, h._ballType), r = !0, h.popBall({
                                reason: S.a.POP_REASON.SHOT,
                                player: this.player,
                                obj: this
                            })
                        }
                        if (o.goType == S.a.GO_TYPE.WALL) {
                            if (this.playerShotLadderWall(o)) return !0;
                            o.showInvisibleWall(!0);
                            var p = o;
                            p.wallType == S.a.WALL.WALL_TYPE.BREAKABLE && (p.breakableGotShot(this), r = !0)
                        }
                        return 0 == r && (this.shotManager.accuracyBonus = !1), this.myOnDestroy(), !0
                    }
                }, {
                    key: "playerShotLadderWall",
                    value: function(e) {
                        if (null != this.player.usingLadder) {
                            var t = this.gameScene.phyEngine.simulateCollisions(this.player._testPBodyWall, this.player.pos.x, this.player.pos.y, [v.a.LAYER.WALL]),
                                a = !1;
                            if (t.collisions.forEach((function(t) {
                                    t.pBody != e || (a = !0)
                                })), a) return !0
                        }
                        return !1
                    }
                }]), t
            }(u.a);
        t.a = x
    },
    103: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(0),
            r = a(169),
            h = a(171),
            p = a(4),
            d = a(2),
            y = a(18),
            _ = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "save",
                    value: function() {
                        y.a.isFacebook && FBInstant.player.setDataAsync(p.a.gameSettings).then(FBInstant.player.flushDataAsync).then((function() {
                            d.a.warn("FB", "Data is saved!", p.a.gameSettings)
                        }))
                    }
                }, {
                    key: "load",
                    value: function(t) {
                        y.a.isFacebook && (d.a.log("FB", "Loading fb data..."), FBInstant.player.getDataAsync(this.getFacebookdata_allkeys()).then((function(a) {
                            d.a.log("FB", "FACEBOOK GET DATA. got data:", a), 0 == Object.keys(a).length ? (d.a.log("FB", "No FB data yet.."), t()) : (d.a.log(a.totalBubblesPopped, p.a.gameSettings.totalBubblesPopped), null != a.totalBubblesPopped && a.totalBubblesPopped > p.a.gameSettings.totalBubblesPopped ? (d.a.warn("FB", "Received *FRESH* FB data!", a), p.a.createGameSettings(a), t()) : (d.a.warn("FB", "Received *OLD/SAME* FB data!", a), t(), e.save()))
                        })).catch((function(e) {
                            d.a.error("FB", "FACEBOOK GET DATA FAIL. got error:", e), t()
                        })))
                    }
                }, {
                    key: "getFacebookdata_allkeys",
                    value: function() {
                        var e = new r.a;
                        if (o.a.isBS2 || o.a.isBS3) e = new h.a;
                        var t = [];
                        for (var a in e) t.push(a);
                        return t
                    }
                }]), e
            }();
        t.a = _
    },
    104: function(e, t, a) {
        "use strict";
        var i = a(82),
            s = a(5),
            n = a.n(s),
            l = a(6),
            o = a.n(l),
            r = a(10),
            h = a.n(r),
            p = a(7),
            d = a.n(p),
            y = a(11),
            _ = a.n(y),
            c = a(14),
            m = a(9),
            u = a(0),
            g = a(18),
            v = function(e) {
                function t() {
                    return n()(this, t), h()(this, d()(t).apply(this, arguments))
                }
                return _()(t, e), o()(t, [{
                    key: "drawAd",
                    value: function(e) {
                        this.iosLink = e.iosLink, this.androidLink = e.androidLink, this.defaultLink = e.defaultLink, this.btnText = e.btnText, this.screenTexture = e.screenTexture, this.gameLogo = e.gameLogo, this.gameLogoX = e.gameLogoX, this.gameLogoY = e.gameLogoY, this.gameLogoAngle = e.gameLogoAngle;
                        var t = 6;
                        (u.a.isBS2 || u.a.isBS3) && (t = 0), this.open_button.changeTextOrIcon({
                            text: this.btnText,
                            size: 30,
                            fixY: t
                        }), this.app_screen_btc = new m.a(this.myScene, .5 * u.a.gameWidth, .45 * u.a.gameHeight, this.screenTexture, null, 1), this.download_apple = new m.a(this.myScene, u.a.gameWidth / 2 - 75, .74 * u.a.gameHeight, "download_apple", null, .7), this.download_google = new m.a(this.myScene, u.a.gameWidth / 2 + 75, .74 * u.a.gameHeight, "download_google", null, .7), this.app_logo = new m.a(this.myScene, u.a.gameWidth * this.gameLogoX, u.a.gameHeight * this.gameLogoY, this.gameLogo), this.app_logo.angle = this.gameLogoAngle, g.a.isCordova && (c.a.isAndroid ? (this.download_apple.visible = !1, this.download_google.x = u.a.gameWidth / 2) : c.a.isIOS && (this.download_google.visible = !1, this.download_apple.x = u.a.gameWidth / 2))
                    }
                }, {
                    key: "openAd",
                    value: function() {
                        c.a.isIOS ? window.open(this.iosLink) : c.a.isAndroid ? window.open(this.androidLink, g.a.browserWindow) : window.open(this.defaultLink, g.a.browserWindow)
                    }
                }]), t
            }(i.a),
            f = a(37),
            S = a(2),
            E = a(4),
            x = a(31);

        function T() {}
        T.spawnFillerAd = function(e, t, a) {
            var i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (S.a.log("AD", "Trying to spawn a Filler Ad", g.a.myTarget, a), 1 == S.a.neverShowAllFillerAds) return S.a.log("AD", "Never showing filler ad."), !1;
            if (0 == S.a.alwaysShowAllFillerAds) {
                if (g.a.isPoki) return S.a.log("AD", "No fillers for Poki."), !1;
                if (E.a.gameSettings.filledAdFreqCount++, E.a.gameSettings.filledAdFreqCount % T._fillerAdFrequency != 0 && 0 == i) return !1
            }
            var s = [];
            g.a.isCordova ? (s.push(T.ADS.BSA), u.a.isBT && (s.push(T.ADS.BS2), s.push(T.ADS.BS3)), u.a.isBS2 && (s.push(T.ADS.BTC), s.push(T.ADS.BS3)), u.a.isBS3 && (s.push(T.ADS.BTC), s.push(T.ADS.BS2))) : (g.a.isFacebook, s.push(T.ADS.BSA), u.a.isBT && (s.push(T.ADS.BS2), s.push(T.ADS.BS3)), u.a.isBS2 && (s.push(T.ADS.BTC), s.push(T.ADS.BS3)), u.a.isBS3 && (s.push(T.ADS.BTC), s.push(T.ADS.BS2)));
            var n = s[Math.floor(Math.random() * s.length)],
                l = new v(a, n);
            return t == f.a.PLACEMENTS.INTERSTITIAL ? l.setRewarded(3) : t == f.a.PLACEMENTS.REWARD && l.setRewarded(7), !0
        }, T._fillerAdFrequency = 11, T.ADS = {
            BTC: {
                iosLink: x.a.BTC_APPLE,
                androidLink: x.a.BTC_GOOGLE,
                defaultLink: x.a.REBUBBLED_HOMEPAGE,
                btnText: "DOWNLOAD",
                screenTexture: "fillerad_btc",
                gameLogo: "app_logo_btc",
                gameLogoX: .2,
                gameLogoY: .3,
                gameLogoAngle: 0
            },
            BS2: {
                iosLink: x.a.BS2_APPLE,
                androidLink: x.a.BS2_GOOGLE,
                defaultLink: x.a.REBUBBLED_HOMEPAGE,
                btnText: "DOWNLOAD",
                screenTexture: "fillerad_bs2",
                gameLogo: "app_logo_bs2",
                gameLogoX: .2,
                gameLogoY: .22,
                gameLogoAngle: 0
            },
            BS3: {
                iosLink: x.a.BS3_APPLE,
                androidLink: x.a.BS3_GOOGLE,
                defaultLink: x.a.REBUBBLED_HOMEPAGE,
                btnText: "DOWNLOAD",
                screenTexture: "fillerad_bs3",
                gameLogo: "app_logo_bs3",
                gameLogoX: .5,
                gameLogoY: .14,
                gameLogoAngle: 0
            },
            BSA: {
                iosLink: x.a.BSA_APPLE,
                androidLink: x.a.BSA_GOOGLE,
                defaultLink: x.a.BSA_HOMEPAGE,
                btnText: "DOWNLOAD",
                screenTexture: "fillerad_bsa",
                gameLogo: "app_logo_bsa",
                gameLogoX: .15,
                gameLogoY: .15,
                gameLogoAngle: -15
            }
        };
        t.a = T
    },
    110: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return r
        }));
        var i = a(0),
            s = a(8),
            n = a(2),
            l = a(1138),
            o = a(1139);

        function r(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                a = null;
            return n.a.log("Fetching levles for game mode:", e, " custom pack:", s.a.customPack), null != s.a.customPack ? s.a.customPack.levels[t - 1] : (i.a.isBT ? a = l : (i.a.isBS2 || i.a.isBS3) && (e == s.a.MODES.SINGLE ? a = l : e == s.a.MODES.TWOP && (a = o)), null == a && n.a.error("Unknown gamemode & levels", i.a.shortName, e), null == t ? a : a["lvl" + t])
        }
    },
    111: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return f
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(17),
            c = a.n(_),
            m = a(0),
            u = a(30),
            g = a(23),
            v = a(1),
            f = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = r()(this, p()(t).call(this, e, a))).wallType = v.a.WALL.WALL_TYPE.ICE, t.SPEED_UP = m.a.playerSpeed + 8, t.SLOW_DOWN = m.a.playerSpeed - 2, i
                }
                return y()(t, e), l()(t, [{
                    key: "drawWall",
                    value: function() {
                        this.mySprite = new g.a(this.gameScene, this.pos.x, this.pos.y, this.size.x, this.size.y, "walls/ice.png", {
                            top: 6,
                            bottom: 6,
                            left: 6,
                            right: 6
                        }), this.mySprite.setDepthNinePatch(this.myRenderDepth)
                    }
                }]), t
            }(u.a);
        c()(f, "SPEED_UP", 0), c()(f, "SLOW_DOWN", 0)
    },
    1138: function(e, t, a) {
        "use strict";
        a.r(t), a.d(t, "lvl1", (function() {
            return s
        })), a.d(t, "lvl2", (function() {
            return n
        })), a.d(t, "lvl3", (function() {
            return l
        })), a.d(t, "lvl4", (function() {
            return o
        })), a.d(t, "lvl5", (function() {
            return r
        })), a.d(t, "lvl6", (function() {
            return h
        })), a.d(t, "lvl7", (function() {
            return p
        })), a.d(t, "lvl8", (function() {
            return d
        })), a.d(t, "lvl9", (function() {
            return y
        })), a.d(t, "lvl10", (function() {
            return _
        })), a.d(t, "lvl11", (function() {
            return c
        })), a.d(t, "lvl12", (function() {
            return m
        })), a.d(t, "lvl13", (function() {
            return u
        })), a.d(t, "lvl14", (function() {
            return g
        })), a.d(t, "lvl15", (function() {
            return v
        })), a.d(t, "lvl16", (function() {
            return f
        })), a.d(t, "lvl17", (function() {
            return S
        })), a.d(t, "lvl18", (function() {
            return E
        })), a.d(t, "lvl19", (function() {
            return x
        })), a.d(t, "lvl20", (function() {
            return T
        })), a.d(t, "lvl21", (function() {
            return b
        })), a.d(t, "lvl22", (function() {
            return k
        })), a.d(t, "lvl23", (function() {
            return w
        })), a.d(t, "lvl24", (function() {
            return I
        })), a.d(t, "lvl25", (function() {
            return P
        })), a.d(t, "lvl26", (function() {
            return A
        })), a.d(t, "lvl27", (function() {
            return L
        })), a.d(t, "lvl28", (function() {
            return M
        })), a.d(t, "lvl29", (function() {
            return O
        })), a.d(t, "lvl30", (function() {
            return D
        })), a.d(t, "lvl31", (function() {
            return B
        })), a.d(t, "lvl32", (function() {
            return R
        })), a.d(t, "lvl33", (function() {
            return W
        })), a.d(t, "lvl34", (function() {
            return N
        })), a.d(t, "lvl35", (function() {
            return C
        })), a.d(t, "lvl36", (function() {
            return U
        })), a.d(t, "lvl37", (function() {
            return Y
        })), a.d(t, "lvl38", (function() {
            return K
        })), a.d(t, "lvl39", (function() {
            return G
        })), a.d(t, "lvl40", (function() {
            return H
        })), a.d(t, "lvl41", (function() {
            return z
        })), a.d(t, "lvl42", (function() {
            return V
        })), a.d(t, "lvl43", (function() {
            return F
        })), a.d(t, "lvl44", (function() {
            return X
        })), a.d(t, "lvl45", (function() {
            return j
        })), a.d(t, "lvl46", (function() {
            return q
        })), a.d(t, "lvl47", (function() {
            return J
        }));
        var i = a(122),
            s = {
                time1: 35,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 320,
                    y: 399,
                    id: 1
                }],
                walls: [],
                balls: [{
                    x: 53,
                    y: 292,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            n = {
                time1: 45,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 330,
                    y: 399,
                    id: 1
                }],
                walls: [],
                balls: [{
                    x: 253,
                    y: 292,
                    id: 2,
                    c: "orange",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 393,
                    y: 292,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            l = {
                time1: 45,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 430,
                    y: 399,
                    id: 1
                }],
                walls: [],
                balls: [{
                    x: 64,
                    y: 131,
                    id: 4,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            o = {
                time1: 40,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 320,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 330,
                    y: 265,
                    w: 280,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "splain"
                }],
                balls: [{
                    x: 286,
                    y: 187,
                    id: 3,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 386,
                    y: 187,
                    id: 4,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            r = {
                time1: 40,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 410,
                    y: 399,
                    id: 1
                }],
                walls: [],
                balls: [{
                    x: 282,
                    y: 298,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 232,
                    y: 298,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 182,
                    y: 298,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 132,
                    y: 298,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 82,
                    y: 298,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            h = {
                time1: 45,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 300,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 295,
                    y: 335,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 295,
                    y: 345,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "freeze"
                }],
                balls: [{
                    x: 358,
                    y: 209,
                    id: 3,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }, {
                    x: 238,
                    y: 209,
                    id: 3,
                    c: "green",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }]
            },
            p = {
                time1: 55,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 2,
                    speed: 1,
                    points2: 1,
                    whook: 2
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 300,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 350,
                    y: 225,
                    w: 560,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 30,
                    y: 290,
                    w: 20,
                    h: 260,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 30,
                    y: 165,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 298,
                    y: 119,
                    id: 4,
                    c: "bluegreen",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 298,
                    y: 299,
                    id: 3,
                    c: "pink",
                    vx: 3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }]
            },
            d = {
                time1: 60,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 2,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 300,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 195,
                    y: 390,
                    w: 10,
                    h: 60,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 530,
                    y: 190,
                    w: 20,
                    h: 60,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 90,
                    y: 190,
                    w: 20,
                    h: 60,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 320,
                    y: 165,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 95,
                    y: 330,
                    w: 10,
                    h: 20,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 525,
                    y: 330,
                    w: 10,
                    h: 20,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 195,
                    y: 265,
                    w: 10,
                    h: 190,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 315,
                    y: 330,
                    w: 10,
                    h: 20,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 220,
                    y: 290,
                    w: 20,
                    h: 260,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 425,
                    y: 295,
                    w: 10,
                    h: 250,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 257,
                    y: 47,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 538,
                    y: 290,
                    id: 3,
                    c: "orange",
                    vx: 3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 108,
                    y: 290,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 298,
                    y: 290,
                    id: 3,
                    c: "pink",
                    vx: 3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }]
            },
            y = {
                time1: 45,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 2,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 250,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 335,
                    y: 185,
                    w: 230,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 340,
                    y: 340,
                    w: 20,
                    h: 160,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 455,
                    y: 140,
                    w: 10,
                    h: 240,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 215,
                    y: 140,
                    w: 10,
                    h: 240,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 335,
                    y: 265,
                    w: 250,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 335,
                    y: 15,
                    w: 250,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }],
                balls: [{
                    x: 543,
                    y: 198,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 113,
                    y: 198,
                    id: 3,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 333,
                    y: 58,
                    id: 3,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }]
            },
            _ = {
                time1: 45,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 2,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 330,
                    y: 149,
                    id: 1
                }],
                walls: [{
                    x: 335,
                    y: 225,
                    w: 230,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 335,
                    y: 285,
                    w: 230,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 565,
                    y: 165,
                    w: 130,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "freeze"
                }, {
                    x: 90,
                    y: 165,
                    w: 160,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 465,
                    y: 260,
                    w: 10,
                    h: 60,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 335,
                    y: 175,
                    w: 330,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 205,
                    y: 260,
                    w: 10,
                    h: 60,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 335,
                    y: 255,
                    w: 230,
                    h: 10,
                    t: "spikeall",
                    softWall: !0,
                    spikey: !0
                }],
                balls: [{
                    x: 443,
                    y: 48,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 543,
                    y: 238,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 113,
                    y: 238,
                    id: 3,
                    c: "purple",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 253,
                    y: 48,
                    id: 3,
                    c: "bluegreen",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }]
            },
            c = {
                time1: 53,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 2,
                    wlaser: 1,
                    freeze: 1,
                    stime: 2,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 60,
                    y: 389,
                    id: 1
                }],
                walls: [{
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 55,
                    y: 176,
                    id: 3,
                    c: "green",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: -1
                }, {
                    x: 175,
                    y: 176,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 175,
                    y: 56,
                    id: 3,
                    c: "green",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: -1
                }, {
                    x: 342,
                    y: 263,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: -1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 207,
                    y: 153,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 477,
                    y: 153,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 55,
                    y: 56,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }]
            },
            m = {
                time1: 14,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 2,
                    wlaser: 1,
                    freeze: 1,
                    stime: 2,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 269,
                    id: 1
                }],
                walls: [{
                    x: 45,
                    y: 295,
                    w: 70,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 595,
                    y: 295,
                    w: 70,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 540,
                    y: 295,
                    w: 40,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 100,
                    y: 295,
                    w: 40,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 320,
                    y: 185,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 320,
                    y: 295,
                    w: 400,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 621,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 541,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 461,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 182,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 102,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 22,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            u = {
                time1: 52,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 3,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b"
                }, {
                    x: 365,
                    y: 95,
                    w: 10,
                    h: 170,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 395,
                    y: 155,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "a"
                }, {
                    x: 495,
                    y: 185,
                    w: 270,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }],
                balls: [{
                    x: 327,
                    y: 40,
                    id: 3,
                    c: "blue",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 427,
                    y: 240,
                    id: 3,
                    c: "blue",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 181,
                    y: 202,
                    id: 4,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 470,
                    y: 50,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            g = {
                time1: 28,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 3,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1,
                    elife: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 240,
                    y: 399,
                    id: 1
                }],
                walls: [],
                balls: [{
                    x: 318,
                    y: 171,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }]
            },
            v = {
                time1: 27,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 3,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1,
                    elife: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 240,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 325,
                    y: 35,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 45,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "medal",
                    invisWall: !0
                }, {
                    x: 325,
                    y: 55,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "points3",
                    invisWall: !0
                }, {
                    x: 325,
                    y: 65,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "points2",
                    invisWall: !0
                }, {
                    x: 325,
                    y: 75,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "points1",
                    invisWall: !0
                }, {
                    x: 325,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 105,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 115,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 125,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 135,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 145,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 155,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 165,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 175,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 185,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 195,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 205,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 215,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 225,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 235,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 245,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 255,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 275,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 285,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 295,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 305,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 315,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 325,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 335,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 345,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 355,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }],
                balls: [{
                    x: 326,
                    y: 17,
                    id: 1,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }]
            },
            f = {
                time1: 37,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1,
                    elife: 1,
                    points3: 3
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 240,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 590,
                    y: 360,
                    w: 20,
                    h: 120,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 50,
                    y: 360,
                    w: 20,
                    h: 120,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 50,
                    y: 305,
                    w: 80,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 590,
                    y: 305,
                    w: 80,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }],
                balls: [{
                    x: 67,
                    y: 66,
                    id: 1,
                    c: "green",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 67,
                    y: 266,
                    id: 1,
                    c: "green",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 167,
                    y: 266,
                    id: 1,
                    c: "green",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 337,
                    y: 266,
                    id: 1,
                    c: "green",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 517,
                    y: 266,
                    id: 1,
                    c: "green",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 417,
                    y: 166,
                    id: 1,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 237,
                    y: 166,
                    id: 1,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 67,
                    y: 166,
                    id: 1,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 167,
                    y: 66,
                    id: 1,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 327,
                    y: 66,
                    id: 1,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 517,
                    y: 66,
                    id: 1,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 293,
                    y: 147,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }]
            },
            S = {
                time1: 70,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1,
                    elife: 1,
                    points3: 3
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 150,
                    y: 399,
                    id: 1
                }],
                walls: [],
                balls: [{
                    x: 205,
                    y: 307,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    warp: !0
                }]
            },
            E = {
                time1: 47,
                items: {
                    wdouble: 1,
                    wlaser: 1,
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 1,
                    points1: 1,
                    points2: 2,
                    points3: 3,
                    elife: 1
                },
                item_prob: 3,
                ballInfo: {
                    normal: {
                        green: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 155, 115, 155, 195, 235]
                        }
                    }
                },
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 55,
                    y: 400,
                    w: 10,
                    h: 40,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "act",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "red"
                    }
                }, {
                    x: 30,
                    y: 385,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "red"
                }, {
                    x: 585,
                    y: 400,
                    w: 10,
                    h: 40,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "act",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "red"
                    }
                }, {
                    x: 610,
                    y: 385,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "red"
                }, {
                    x: 320,
                    y: 85,
                    w: 620,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "red"
                }, {
                    x: 350,
                    y: 320,
                    w: 20,
                    h: 200,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "red"
                    }
                }, {
                    x: 320,
                    y: 225,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 29,
                    y: 409,
                    id: 1,
                    c: "pink",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 42,
                    y: 399,
                    id: 1,
                    c: "pink",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 19,
                    y: 399,
                    id: 1,
                    c: "pink",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 621,
                    y: 400,
                    id: 1,
                    c: "pink",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 601,
                    y: 400,
                    id: 1,
                    c: "pink",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 38,
                    y: 408,
                    id: 1,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 28,
                    y: 408,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 38,
                    y: 398,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 618,
                    y: 408,
                    id: 1,
                    c: "pink",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 618,
                    y: 398,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 117,
                    y: 276,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 598,
                    y: 52,
                    id: 3,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 77,
                    y: 306,
                    id: 1,
                    c: "red",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 247,
                    y: 246,
                    id: 1,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 537,
                    y: 276,
                    id: 1,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 43,
                    y: 52,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 117,
                    y: 256,
                    id: 1,
                    c: "red",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 87,
                    y: 276,
                    id: 1,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 57,
                    y: 276,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 608,
                    y: 408,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 608,
                    y: 398,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 507,
                    y: 276,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 407,
                    y: 296,
                    id: 1,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 600,
                    y: 400,
                    id: 1,
                    c: "green",
                    vx: -1,
                    vy: -1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 28,
                    y: 398,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 567,
                    y: 276,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 577,
                    y: 356,
                    id: 1,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 497,
                    y: 286,
                    id: 1,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 507,
                    y: 366,
                    id: 1,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 20,
                    y: 400,
                    id: 1,
                    c: "green",
                    vx: -1,
                    vy: -1,
                    t: "normal",
                    isMetal: !0
                }]
            },
            x = {
                time1: 30,
                items: {
                    wdouble: 1,
                    whook: 1,
                    speed: 1,
                    splain: 1,
                    sinvi: 1,
                    points2: 2
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 320,
                    y: 215,
                    w: 480,
                    h: 410,
                    t: "caveinbs3",
                    softWall: !0,
                    cavein_space: 0
                }],
                balls: [{
                    x: 491,
                    y: 129,
                    id: 3,
                    c: "yellow",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 188,
                    y: 189,
                    id: 3,
                    c: "orange",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 337,
                    y: 273,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 508,
                    y: 256,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            T = {
                time1: 110,
                items: {
                    wdouble: 1,
                    whook: 1,
                    speed: 1,
                    splain: 1,
                    points2: 2,
                    stime: 1,
                    dynamite: 1,
                    sinvi: 1,
                    elife: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 130,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 325,
                    y: 215,
                    w: 10,
                    h: 410,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b"
                }, {
                    x: 605,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "a"
                }, {
                    x: 165,
                    y: 175,
                    w: 310,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 480,
                    y: 345,
                    w: 300,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "purple"
                }, {
                    x: 165,
                    y: 95,
                    w: 310,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 480,
                    y: 65,
                    w: 300,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 480,
                    y: 135,
                    w: 300,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green"
                }],
                balls: [{
                    x: 148,
                    y: 215,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 544,
                    y: 245,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 384,
                    y: 245,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 454,
                    y: 215,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 223,
                    y: 242,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 253,
                    y: 42,
                    id: 3,
                    c: "blue",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: -1
                }, {
                    x: 73,
                    y: 52,
                    id: 3,
                    c: "blue",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 457,
                    y: 33,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 527,
                    y: 33,
                    id: 3,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 397,
                    y: 33,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 253,
                    y: 129,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 113,
                    y: 132,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 397,
                    y: 99,
                    id: 3,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 547,
                    y: 99,
                    id: 3,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 293,
                    y: 33,
                    id: 3,
                    c: "blue",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 183,
                    y: 62,
                    id: 3,
                    c: "blue",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }]
            },
            b = {
                time1: 85,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 1,
                    points2: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 130,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b"
                }, {
                    x: 605,
                    y: 35,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b"
                }, {
                    x: 465,
                    y: 395,
                    w: 10,
                    h: 50,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 550,
                    y: 415,
                    w: 160,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 550,
                    y: 375,
                    w: 160,
                    h: 10,
                    t: "normal",
                    softWall: !1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }, {
                    x: 345,
                    y: 45,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 465,
                    y: 165,
                    w: 10,
                    h: 290,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 575,
                    y: 160,
                    w: 10,
                    h: 300,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 520,
                    y: 115,
                    w: 100,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 410,
                    y: 115,
                    w: 100,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 345,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 475,
                    y: 325,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 475,
                    y: 355,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }],
                balls: [{
                    x: 523,
                    y: 59,
                    id: 4,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 313,
                    y: 172,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 547,
                    y: 396,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 597,
                    y: 396,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 577,
                    y: 396,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 617,
                    y: 390,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 163,
                    y: 219,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 423,
                    y: 282,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 313,
                    y: 282,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 416,
                    y: 62,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 396,
                    y: 42,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 386,
                    y: 82,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 426,
                    y: 82,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }]
            },
            k = {
                time1: 70,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 1,
                    points2: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 130,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 275,
                    y: 185,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "c",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 415,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "e",
                    teleport_dest: "f",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }, {
                    x: 215,
                    y: 185,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "d",
                    teleport_dest: "e",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 475,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "c",
                    teleport_dest: "d",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 445,
                    y: 110,
                    w: 10,
                    h: 200,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 245,
                    y: 110,
                    w: 10,
                    h: 200,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 215,
                    w: 620,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 445,
                    y: 320,
                    w: 10,
                    h: 200,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 245,
                    y: 320,
                    w: 10,
                    h: 200,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 475,
                    y: 185,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "f",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "red"
                    }
                }],
                balls: [{
                    x: 383,
                    y: 132,
                    id: 2,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 334,
                    y: 273,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 353,
                    y: 82,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 156,
                    y: 82,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 93,
                    y: 52,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 543,
                    y: 272,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 573,
                    y: 82,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 511,
                    y: 52,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 173,
                    y: 272,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            w = {
                time1: 50,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 1,
                    points2: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 130,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 320,
                    y: 30,
                    w: 620,
                    h: 40,
                    t: "caveinbs3",
                    softWall: !0,
                    cavein_space: 100
                }, {
                    x: 175,
                    y: 55,
                    w: 330,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 500,
                    y: 55,
                    w: 260,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 355,
                    y: 55,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "splain"
                }],
                balls: [{
                    x: 341,
                    y: 34,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 227,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 227,
                    y: 38,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 263,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 241,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 311,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 351,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 607,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 577,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 557,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 537,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 527,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 497,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 467,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 457,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 417,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 387,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 37,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 99,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 137,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 199,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 247,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 277,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 307,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 337,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 344,
                    y: 41,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 411,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 441,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 511,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 551,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 177,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 157,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 77,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 117,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 177,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 201,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 373,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 396,
                    y: 22,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 473,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 451,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 491,
                    y: 38,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 553,
                    y: 38,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 531,
                    y: 38,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 541,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 603,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 581,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            I = {
                time1: 40,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 1,
                    points2: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 320,
                    y: 99,
                    id: 1
                }],
                walls: [{
                    x: 295,
                    y: 350,
                    w: 10,
                    h: 140,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 35,
                    y: 135,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "f"
                }, {
                    x: 315,
                    y: 155,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "c",
                    teleport_dest: "f"
                }, {
                    x: 235,
                    y: 155,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "j"
                }, {
                    x: 395,
                    y: 185,
                    w: 470,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 315,
                    y: 125,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 395,
                    y: 155,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "d",
                    teleport_dest: "e"
                }, {
                    x: 315,
                    y: 35,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a"
                }, {
                    x: 290,
                    y: 275,
                    w: 420,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 295,
                    y: 245,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "h",
                    teleport_dest: "a",
                    stateData: {
                        stateStart: "act",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }, {
                    x: 295,
                    y: 215,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 35,
                    y: 35,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "e"
                }, {
                    x: 35,
                    y: 105,
                    w: 50,
                    h: 10,
                    t: "spikeall",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 35,
                    y: 185,
                    w: 50,
                    h: 10,
                    t: "trampoline",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 605,
                    y: 45,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "g"
                }, {
                    x: 115,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "n",
                    teleport_dest: "r"
                }, {
                    x: 185,
                    y: 345,
                    w: 210,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 35,
                    y: 215,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "j"
                }, {
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "k",
                    teleport_dest: "g"
                }, {
                    x: 425,
                    y: 95,
                    w: 10,
                    h: 170,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 455,
                    y: 45,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "l",
                    teleport_dest: "t"
                }, {
                    x: 490,
                    y: 75,
                    w: 120,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 525,
                    y: 45,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "m",
                    teleport_dest: "a"
                }, {
                    x: 490,
                    y: 125,
                    w: 20,
                    h: 110,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 75,
                    y: 245,
                    w: 10,
                    h: 350,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 170,
                    y: 380,
                    w: 20,
                    h: 80,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 115,
                    y: 315,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "o",
                    teleport_dest: "e"
                }, {
                    x: 215,
                    y: 315,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "p",
                    teleport_dest: "u"
                }, {
                    x: 325,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "t",
                    teleport_dest: "l"
                }, {
                    x: 405,
                    y: 345,
                    w: 210,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 390,
                    y: 345,
                    w: 20,
                    h: 150,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 335,
                    y: 315,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "r",
                    teleport_dest: "n"
                }, {
                    x: 435,
                    y: 315,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "s",
                    teleport_dest: "f"
                }, {
                    x: 575,
                    y: 225,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "u"
                }, {
                    x: 505,
                    y: 305,
                    w: 10,
                    h: 230,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 120,
                    y: 185,
                    w: 80,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 45,
                    y: 65,
                    w: 70,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }],
                balls: [{
                    x: 171,
                    y: 287,
                    id: 1,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 297,
                    y: 198,
                    id: 1,
                    c: "bluegreen",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 534,
                    y: 325,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 582,
                    y: 325,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 620,
                    y: 325,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 601,
                    y: 372,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 553,
                    y: 372,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }]
            },
            P = {
                time1: 55,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 1,
                    points2: 1,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 60,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 405,
                    y: 215,
                    w: 450,
                    h: 410,
                    t: "caveinbs3",
                    softWall: !0,
                    cavein_space: 50,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }, {
                    x: 95,
                    y: 300,
                    w: 170,
                    h: 240,
                    t: "caveinbs3",
                    softWall: !0,
                    cavein_space: 0
                }, {
                    x: 100,
                    y: 295,
                    w: 20,
                    h: 250,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 95,
                    y: 175,
                    w: 170,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 185,
                    y: 295,
                    w: 10,
                    h: 250,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 185,
                    y: 120,
                    w: 10,
                    h: 100,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "red"
                }, {
                    x: 410,
                    y: 75,
                    w: 440,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 185,
                    y: 40,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "act",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }],
                balls: [{
                    x: 133,
                    y: 52,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 393,
                    y: 312,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 233,
                    y: 42,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 303,
                    y: 33,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 373,
                    y: 42,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 441,
                    y: 42,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            A = {
                time1: 59,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 1,
                    points2: 2,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 270,
                    y: 329,
                    id: 1
                }],
                walls: [{
                    x: 525,
                    y: 355,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 585,
                    y: 355,
                    w: 90,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 425,
                    y: 355,
                    w: 170,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 325,
                    y: 355,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 220,
                    y: 355,
                    w: 180,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }, {
                    x: 115,
                    y: 355,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 55,
                    y: 355,
                    w: 90,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 66,
                    y: 166,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 543,
                    y: 166,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 153,
                    y: 166,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 463,
                    y: 166,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 293,
                    y: 102,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }]
            },
            L = {
                time1: 70,
                items: {
                    wdouble: 1,
                    wlaser: 1,
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    dynamite: 1,
                    splain: 1,
                    points2: 2
                },
                item_prob: 3,
                ballInfo: {
                    reverse: {
                        speedx: 7,
                        grav: 36,
                        bounce: [0, 185, 175, 115, 185, 195]
                    }
                },
                players: [{
                    x: 140,
                    y: 209,
                    id: 1
                }],
                walls: [{
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    stateData: {
                        stateStart: "inact"
                    }
                }, {
                    x: 395,
                    y: 45,
                    w: 10,
                    h: 70,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "wdouble"
                }, {
                    x: 395,
                    y: 155,
                    w: 10,
                    h: 150,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 605,
                    y: 205,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 320,
                    y: 175,
                    w: 120,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 500,
                    y: 235,
                    w: 260,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 235,
                    w: 100,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }, {
                    x: 245,
                    y: 45,
                    w: 10,
                    h: 70,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "speed"
                }, {
                    x: 245,
                    y: 155,
                    w: 10,
                    h: 150,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 140,
                    y: 235,
                    w: 260,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 365,
                    y: 267,
                    id: 3,
                    c: "orange",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 473,
                    y: 292,
                    id: 3,
                    c: "orange",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 243,
                    y: 292,
                    id: 3,
                    c: "orange",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 577,
                    y: 82,
                    id: 3,
                    vx: -1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 451,
                    y: 82,
                    id: 3,
                    vx: -1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 107,
                    y: 82,
                    id: 3,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 163,
                    y: 82,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            M = {
                time1: 70,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 2,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 1,
                    whook: 1,
                    points3: 2
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 100,
                    y: 389,
                    id: 1
                }],
                walls: [{
                    x: 330,
                    y: 365,
                    w: 20,
                    h: 90,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 330,
                    y: 325,
                    w: 120,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 415,
                    w: 380,
                    h: 10,
                    t: "ice",
                    softWall: !0
                }, {
                    x: 570,
                    y: 415,
                    w: 120,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 70,
                    y: 415,
                    w: 120,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 133,
                    y: 172,
                    id: 3,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 303,
                    y: 242,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 593,
                    y: 222,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 474,
                    y: 260,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }, {
                    x: 393,
                    y: 212,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            O = {
                time1: 30,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 2,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 1,
                    whook: 1,
                    points3: 2
                },
                item_prob: 3,
                ballInfo: {
                    normal: {
                        yellow: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 255, 255, 155, 195, 235]
                        }
                    }
                },
                players: [{
                    x: 370,
                    y: 389,
                    id: 1
                }],
                walls: [{
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "ice",
                    softWall: !0
                }, {
                    x: 320,
                    y: 210,
                    w: 620,
                    h: 400,
                    t: "caveinbs3",
                    softWall: !0,
                    cavein_space: 0
                }],
                balls: [{
                    x: 603,
                    y: 113,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 327,
                    y: 25,
                    id: 2,
                    c: "yellow",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 183,
                    y: 222,
                    id: 3,
                    c: "green",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 403,
                    y: 102,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 85,
                    y: 224,
                    id: 3,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 493,
                    y: 173,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 216,
                    y: 75,
                    id: 3,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }]
            },
            D = {
                time1: 60,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 2,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 1,
                    whook: 1,
                    points3: 2
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 430,
                    y: 105,
                    w: 80,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green"
                }, {
                    x: 220,
                    y: 265,
                    w: 60,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 360,
                    y: 265,
                    w: 100,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 515,
                    y: 265,
                    w: 90,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 95,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 25,
                    y: 185,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 350,
                    y: 105,
                    w: 80,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 515,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 485,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 435,
                    y: 175,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 185,
                    y: 105,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 155,
                    y: 105,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 55,
                    y: 185,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 125,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 145,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 175,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 265,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 295,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 425,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 455,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 575,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 610,
                    y: 340,
                    w: 20,
                    h: 160,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 610,
                    y: 265,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 350,
                    y: 360,
                    w: 20,
                    h: 120,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 255,
                    y: 105,
                    w: 110,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 350,
                    y: 185,
                    w: 20,
                    h: 170,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }],
                balls: [{
                    x: 611,
                    y: 223,
                    id: 1,
                    c: "bluegreen",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 519,
                    y: 18,
                    id: 1,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 329,
                    y: 18,
                    id: 1,
                    c: "green",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 189,
                    y: 18,
                    id: 1,
                    c: "blue",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }]
            },
            B = {
                time1: 83,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 2,
                    wlaser: 2,
                    sinvi: 1,
                    wdouble: 2,
                    whook: 1,
                    points3: 2,
                    points1: 2
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }],
                walls: [],
                balls: [{
                    x: 233,
                    y: 191,
                    id: 4,
                    c: "yellow",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }, {
                    x: 393,
                    y: 181,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }]
            },
            R = {
                time1: 75,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 1,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 2,
                    whook: 1,
                    points3: 1,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 60,
                    y: 389,
                    id: 1
                }],
                walls: [{
                    x: 25,
                    y: 115,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "sinvi"
                }, {
                    x: 305,
                    y: 260,
                    w: 10,
                    h: 60,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 245,
                    y: 260,
                    w: 10,
                    h: 60,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 275,
                    y: 285,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 610,
                    y: 310,
                    w: 20,
                    h: 200,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 25,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 55,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 85,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 115,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 145,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 175,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 205,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 235,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 265,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 295,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 325,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 355,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 385,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 415,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 445,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 475,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 505,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 535,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 605,
                    y: 85,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 565,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 25,
                    y: 215,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 605,
                    y: 55,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "a",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 335,
                    y: 115,
                    w: 590,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 335,
                    y: 215,
                    w: 590,
                    h: 10,
                    t: "ice",
                    softWall: !1
                }, {
                    x: 580,
                    y: 415,
                    w: 100,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 520,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 495,
                    y: 415,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 470,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 440,
                    y: 415,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 410,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 385,
                    y: 415,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 360,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 330,
                    y: 415,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 300,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 275,
                    y: 415,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 250,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 220,
                    y: 415,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 190,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 165,
                    y: 415,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 140,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 110,
                    y: 415,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 80,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 40,
                    y: 415,
                    w: 60,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 605,
                    y: 185,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }],
                balls: [{
                    x: 545,
                    y: 245,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 437,
                    y: 245,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 329,
                    y: 245,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 113,
                    y: 245,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 559,
                    y: 100,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 109,
                    y: 196,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 275,
                    y: 252,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 517,
                    y: 156,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 221,
                    y: 245,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 313,
                    y: 146,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 26,
                    y: 129,
                    id: 1,
                    c: "pink",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 211,
                    y: 146,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 415,
                    y: 136,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 466,
                    y: 100,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 160,
                    y: 100,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 388,
                    y: 19,
                    id: 1,
                    c: "bluegreen",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 364,
                    y: 100,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 237,
                    y: 19,
                    id: 1,
                    c: "bluegreen",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 262,
                    y: 100,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 26,
                    y: 19,
                    id: 1,
                    c: "bluegreen",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }]
            },
            W = {
                time1: 60,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 1,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 2,
                    whook: 1,
                    points3: 1,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 340,
                    y: 399,
                    id: 1
                }],
                walls: [],
                balls: [{
                    x: 396,
                    y: 345,
                    id: 1,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 123,
                    y: 182,
                    id: 5,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 553,
                    y: 342,
                    id: 4,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 483,
                    y: 312,
                    id: 2,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 233,
                    y: 272,
                    id: 3,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }]
            },
            N = {
                time1: 68,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 1,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 2,
                    whook: 1,
                    points3: 1,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 340,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 320,
                    y: 15,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }],
                balls: [{
                    x: 111,
                    y: 90,
                    id: 5,
                    c: "orange",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 551,
                    y: 100,
                    id: 5,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 131,
                    y: 220,
                    id: 5,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            C = {
                time1: 77,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 1,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 2,
                    whook: 1,
                    points3: 1,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 340,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 205,
                    y: 285,
                    w: 10,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 335,
                    y: 285,
                    w: 10,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 455,
                    y: 285,
                    w: 10,
                    h: 10,
                    t: "sticky"
                }],
                balls: [{
                    x: 343,
                    y: 82,
                    id: 5,
                    c: "yellow",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 493,
                    y: 102,
                    id: 3,
                    c: "blue",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 183,
                    y: 102,
                    id: 3,
                    c: "blue",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 403,
                    y: 102,
                    id: 3,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 273,
                    y: 102,
                    id: 3,
                    c: "pink",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }]
            },
            U = {
                time1: 55,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 1,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 2,
                    whook: 1,
                    points3: 1,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 240,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 225,
                    y: 145,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 395,
                    y: 145,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 270,
                    y: 135,
                    w: 60,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 350,
                    y: 135,
                    w: 60,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 205,
                    y: 80,
                    w: 10,
                    h: 140,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 415,
                    y: 80,
                    w: 10,
                    h: 140,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 395,
                    y: 105,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 310,
                    y: 35,
                    w: 140,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 310,
                    y: 75,
                    w: 140,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 225,
                    y: 105,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 310,
                    y: 215,
                    w: 60,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 395,
                    y: 215,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 225,
                    y: 215,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 120,
                    y: 225,
                    w: 160,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 500,
                    y: 225,
                    w: 160,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 415,
                    y: 215,
                    w: 10,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "wdouble"
                }, {
                    x: 205,
                    y: 215,
                    w: 10,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "splain"
                }],
                balls: [{
                    x: 101,
                    y: 179,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 481,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 621,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 151,
                    y: 69,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 221,
                    y: 179,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 276,
                    y: 19,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 296,
                    y: 19,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 271,
                    y: 110,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 249,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 259,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 269,
                    y: 50,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 279,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 289,
                    y: 50,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 299,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 309,
                    y: 50,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 319,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 329,
                    y: 50,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 339,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 349,
                    y: 50,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 359,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 369,
                    y: 49,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 369,
                    y: 59,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 252,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 262,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 272,
                    y: 92,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 282,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 292,
                    y: 92,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 302,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 312,
                    y: 92,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 322,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 332,
                    y: 92,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 342,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 352,
                    y: 92,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 362,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 372,
                    y: 91,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 372,
                    y: 101,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 256,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 266,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 286,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 306,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 316,
                    y: 19,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 326,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 336,
                    y: 19,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 346,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 356,
                    y: 19,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 366,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 376,
                    y: 18,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 376,
                    y: 19,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 561,
                    y: 69,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 451,
                    y: 69,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }]
            },
            Y = {
                time1: 69,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 1,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 1,
                    whook: 1,
                    points3: 1,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 240,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 375,
                    y: 195,
                    w: 70,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 195,
                    w: 40,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 320,
                    y: 305,
                    w: 20,
                    h: 230,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 540,
                    y: 115,
                    w: 40,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "whook"
                }, {
                    x: 100,
                    y: 115,
                    w: 40,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "splain"
                }, {
                    x: 265,
                    y: 195,
                    w: 70,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 250,
                    y: 325,
                    w: 40,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 390,
                    y: 325,
                    w: 40,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 490,
                    y: 265,
                    w: 100,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 150,
                    y: 265,
                    w: 100,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 294,
                    y: 47,
                    id: 2,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 272,
                    y: 77,
                    id: 2,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 382,
                    y: 77,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 352,
                    y: 47,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 101,
                    y: 166,
                    id: 3,
                    c: "red",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 541,
                    y: 166,
                    id: 3,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 102,
                    y: 35,
                    id: 3,
                    c: "orange",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 541,
                    y: 35,
                    id: 3,
                    c: "orange",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }]
            },
            K = {
                time1: 42,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 1,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 1,
                    whook: 1,
                    points3: 2,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 60,
                    y: 379,
                    id: 1
                }],
                walls: [{
                    x: 580,
                    y: 205,
                    w: 100,
                    h: 10,
                    t: "switch",
                    softWall: !1,
                    eType: "color_popped",
                    eInfo: "green"
                }, {
                    x: 320,
                    y: 205,
                    w: 360,
                    h: 10,
                    t: "switch",
                    softWall: !1,
                    eType: "color_popped",
                    eInfo: "green"
                }, {
                    x: 515,
                    y: 205,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 125,
                    y: 205,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 330,
                    y: 300,
                    w: 20,
                    h: 200,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 55,
                    y: 375,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "a"
                }, {
                    x: 585,
                    y: 375,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b"
                }, {
                    x: 35,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 605,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 575,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 545,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 515,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 485,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 455,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 425,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 395,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 365,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 335,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 305,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 275,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 245,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 215,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 185,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 155,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 125,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 95,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 65,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 60,
                    y: 205,
                    w: 100,
                    h: 10,
                    t: "switch",
                    softWall: !1,
                    eType: "color_popped",
                    eInfo: "green"
                }, {
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }],
                balls: [{
                    x: 312,
                    y: 96,
                    id: 4,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 585,
                    y: 40,
                    id: 3,
                    c: "purple",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 61,
                    y: 44,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 308,
                    y: 292,
                    id: 2,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 553,
                    y: 292,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 183,
                    y: 292,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 426,
                    y: 278,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            G = {
                time1: 88,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 1,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 1,
                    whook: 1,
                    points3: 2,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 320,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 560,
                    y: 385,
                    w: 140,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 80,
                    y: 385,
                    w: 140,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 35,
                    w: 260,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 215,
                    y: 65,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 185,
                    y: 50,
                    w: 10,
                    h: 20,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 215,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 275,
                    y: 65,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 245,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 275,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 305,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 335,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 365,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 335,
                    y: 65,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 380,
                    y: 65,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 395,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 425,
                    y: 65,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 425,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 455,
                    y: 50,
                    w: 10,
                    h: 20,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 245,
                    y: 95,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 305,
                    y: 95,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 350,
                    y: 95,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 395,
                    y: 95,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }],
                balls: [{
                    x: 231,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 261,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 291,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 321,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 351,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 381,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 411,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 440,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 412,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 382,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 351,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 321,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 291,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 261,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 231,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 201,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 413,
                    y: 152,
                    id: 4,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 243,
                    y: 152,
                    id: 4,
                    c: "orange",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 493,
                    y: 212,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 163,
                    y: 212,
                    id: 3,
                    c: "yellow",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }]
            },
            H = {
                time1: 33,
                items: {
                    freeze: 1,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    points2: 1,
                    wlaser: 1,
                    sinvi: 1,
                    wdouble: 1,
                    whook: 1,
                    points3: 2,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 320,
                    y: 389,
                    id: 1
                }],
                walls: [{
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 228,
                    y: 109,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 318,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 288,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 258,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 228,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 198,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 168,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 418,
                    y: 109,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 508,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 478,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 448,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 418,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 388,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 358,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 457,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 487,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 517,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 547,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 577,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 607,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 38,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 68,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 98,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 128,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 158,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 188,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            z = {
                time1: 140,
                items: {},
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 585,
                    y: 395,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 615,
                    y: 370,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 585,
                    y: 345,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 575,
                    y: 265,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 545,
                    y: 240,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 605,
                    y: 240,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 575,
                    y: 215,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 65,
                    y: 265,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 35,
                    y: 240,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 95,
                    y: 240,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 65,
                    y: 215,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 55,
                    y: 395,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 25,
                    y: 370,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 85,
                    y: 370,
                    w: 10,
                    h: 60,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 55,
                    y: 345,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 230,
                    y: 235,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 250,
                    y: 325,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 70,
                    y: 145,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 85,
                    y: 110,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 55,
                    y: 110,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 110,
                    y: 245,
                    w: 20,
                    h: 350,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 100,
                    y: 75,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 50,
                    y: 75,
                    w: 20,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 200,
                    y: 15,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "whook"
                }, {
                    x: 200,
                    y: 75,
                    w: 20,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 150,
                    y: 145,
                    w: 20,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 260,
                    y: 155,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 275,
                    y: 120,
                    w: 10,
                    h: 80,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 245,
                    y: 120,
                    w: 10,
                    h: 80,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 440,
                    y: 15,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "freeze"
                }, {
                    x: 440,
                    y: 75,
                    w: 20,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 390,
                    y: 325,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 420,
                    y: 235,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 490,
                    y: 145,
                    w: 20,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 390,
                    y: 155,
                    w: 20,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 405,
                    y: 120,
                    w: 10,
                    h: 80,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 375,
                    y: 120,
                    w: 10,
                    h: 80,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 570,
                    y: 145,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 585,
                    y: 110,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 555,
                    y: 110,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 530,
                    y: 245,
                    w: 20,
                    h: 350,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 590,
                    y: 75,
                    w: 20,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 540,
                    y: 75,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 555,
                    y: 370,
                    w: 10,
                    h: 60,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }],
                balls: [{
                    x: 256,
                    y: 97,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 256,
                    y: 87,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 256,
                    y: 107,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 384,
                    y: 97,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 386,
                    y: 107,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 386,
                    y: 87,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 57,
                    y: 371,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 63,
                    y: 364,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 46,
                    y: 364,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 584,
                    y: 364,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 594,
                    y: 372,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 81,
                    y: 230,
                    id: 1,
                    c: "bluegreen",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 77,
                    y: 246,
                    id: 1,
                    c: "bluegreen",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 57,
                    y: 246,
                    id: 1,
                    c: "bluegreen",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 67,
                    y: 236,
                    id: 1,
                    c: "bluegreen",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 578,
                    y: 236,
                    id: 1,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 581,
                    y: 249,
                    id: 1,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 590,
                    y: 229,
                    id: 1,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 565,
                    y: 233,
                    id: 1,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 72,
                    y: 64,
                    id: 1,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 571,
                    y: 64,
                    id: 1,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 326,
                    y: 250,
                    id: 5,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 54,
                    y: 230,
                    id: 1,
                    c: "bluegreen",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 561,
                    y: 249,
                    id: 1,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 577,
                    y: 372,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            V = {
                time1: 115,
                items: {
                    whook: 2,
                    freeze: 1,
                    speed: 1,
                    dynamite: 1,
                    splain: 2,
                    sinvi: 1,
                    points1: 1,
                    points2: 2,
                    points3: 2,
                    elife: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 330,
                    y: 289,
                    id: 1
                }],
                walls: [{
                    x: 335,
                    y: 105,
                    w: 110,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "splain"
                }, {
                    x: 115,
                    y: 215,
                    w: 110,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 525,
                    y: 215,
                    w: 110,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 330,
                    y: 365,
                    w: 20,
                    h: 110,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 330,
                    y: 315,
                    w: 200,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 105,
                    y: 335,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 45,
                    y: 355,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 165,
                    y: 355,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 535,
                    y: 335,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 475,
                    y: 355,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 595,
                    y: 355,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 82,
                    y: 140,
                    id: 5,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 86,
                    y: 250,
                    id: 3,
                    c: "green",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 566,
                    y: 250,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 562,
                    y: 140,
                    id: 5,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }]
            },
            F = {
                time1: 101,
                items: {
                    wdouble: 2,
                    whook: 2,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 3,
                    splain: 2,
                    sinvi: 1,
                    points1: 1,
                    points2: 1,
                    points3: 1,
                    elife: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 40,
                    y: 89,
                    id: 1
                }],
                walls: [{
                    x: 65,
                    y: 395,
                    w: 10,
                    h: 50,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 40,
                    y: 365,
                    w: 60,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 320,
                    y: 165,
                    w: 540,
                    h: 10,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 20,
                    moving_start_direct: "diag",
                    moving_start_pos: "tr",
                    moving_width: 20,
                    moving_origin_x: 320,
                    moving_origin_y: 165,
                    moving_origin_w: 540,
                    moving_origin_h: 10
                }, {
                    x: 320,
                    y: 275,
                    w: 540,
                    h: 10,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 20,
                    moving_start_direct: "diag",
                    moving_start_pos: "tr",
                    moving_width: 20,
                    moving_origin_x: 320,
                    moving_origin_y: 275,
                    moving_origin_w: 540,
                    moving_origin_h: 10
                }, {
                    x: 605,
                    y: 55,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 320,
                    y: 225,
                    w: 540,
                    h: 10,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 20,
                    moving_start_direct: "diag",
                    moving_start_pos: "tl",
                    moving_width: 20,
                    moving_origin_x: 320,
                    moving_origin_y: 225,
                    moving_origin_w: 540,
                    moving_origin_h: 10
                }, {
                    x: 575,
                    y: 35,
                    w: 10,
                    h: 50,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 115,
                    w: 520,
                    h: 10,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 40,
                    moving_start_direct: "diag",
                    moving_start_pos: "tr",
                    moving_width: 50,
                    moving_origin_x: 320,
                    moving_origin_y: 115,
                    moving_origin_w: 520,
                    moving_origin_h: 10,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 605,
                    y: 115,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 35,
                    y: 115,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b"
                }, {
                    x: 35,
                    y: 35,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "a"
                }],
                balls: [{
                    x: 281,
                    y: 112,
                    id: 2,
                    c: "pink",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 331,
                    y: 112,
                    id: 2,
                    c: "pink",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 381,
                    y: 112,
                    id: 2,
                    c: "pink",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 381,
                    y: 162,
                    id: 2,
                    c: "pink",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 331,
                    y: 162,
                    id: 2,
                    c: "pink",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 281,
                    y: 162,
                    id: 2,
                    c: "pink",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 213,
                    y: 379,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 113,
                    y: 379,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 163,
                    y: 379,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 163,
                    y: 329,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 113,
                    y: 329,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 63,
                    y: 329,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 431,
                    y: 82,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 331,
                    y: 82,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 381,
                    y: 82,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 381,
                    y: 32,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 331,
                    y: 32,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 281,
                    y: 32,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 602,
                    y: 26,
                    id: 2,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }]
            },
            X = {
                time1: 57,
                items: {
                    wdouble: 2,
                    whook: 2,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 3,
                    splain: 2,
                    sinvi: 1,
                    points1: 1,
                    points2: 1,
                    points3: 1,
                    elife: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 40,
                    y: 109,
                    id: 1
                }],
                walls: [{
                    x: 35,
                    y: 55,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "whook"
                }, {
                    x: 315,
                    y: 35,
                    w: 10,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "wdouble"
                }, {
                    x: 275,
                    y: 25,
                    w: 10,
                    h: 30,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 295,
                    y: 35,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 315,
                    y: 45,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "medal"
                }, {
                    x: 315,
                    y: 245,
                    w: 30,
                    h: 10,
                    t: "spikeall",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 355,
                    y: 25,
                    w: 10,
                    h: 30,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 335,
                    y: 35,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 255,
                    w: 520,
                    h: 210,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 60,
                    moving_start_direct: "cw",
                    moving_start_pos: "bl",
                    moving_width: 50,
                    moving_origin_x: 320,
                    moving_origin_y: 255,
                    moving_origin_w: 520,
                    moving_origin_h: 210
                }, {
                    x: 35,
                    y: 135,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 315,
                    y: 55,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "points3"
                }, {
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }],
                balls: [{
                    x: 320,
                    y: 16,
                    id: 1,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            j = {
                time1: 111,
                items: {
                    wdouble: 2,
                    whook: 2,
                    etime: 1,
                    stime: 1,
                    speed: 1,
                    dynamite: 3,
                    splain: 2,
                    sinvi: 1,
                    points1: 1,
                    points2: 1,
                    points3: 1,
                    elife: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 330,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 455,
                    y: 115,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow"
                }, {
                    x: 315,
                    y: 115,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow"
                }, {
                    x: 175,
                    y: 115,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow"
                }, {
                    x: 35,
                    y: 245,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 35,
                    y: 265,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 605,
                    y: 165,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "a"
                }, {
                    x: 455,
                    y: 150,
                    w: 30,
                    h: 80,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 40,
                    moving_start_direct: "diag",
                    moving_start_pos: "bl",
                    moving_width: 30,
                    moving_origin_x: 455,
                    moving_origin_y: 150,
                    moving_origin_w: 30,
                    moving_origin_h: 80,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    },
                    spikey: !0
                }, {
                    x: 385,
                    y: 150,
                    w: 30,
                    h: 80,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 40,
                    moving_start_direct: "diag",
                    moving_start_pos: "tl",
                    moving_width: 30,
                    moving_origin_x: 385,
                    moving_origin_y: 150,
                    moving_origin_w: 30,
                    moving_origin_h: 80,
                    spikey: !0
                }, {
                    x: 315,
                    y: 150,
                    w: 30,
                    h: 80,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 35,
                    moving_start_direct: "diag",
                    moving_start_pos: "bl",
                    moving_width: 30,
                    moving_origin_x: 315,
                    moving_origin_y: 150,
                    moving_origin_w: 30,
                    moving_origin_h: 80,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    },
                    spikey: !0
                }, {
                    x: 245,
                    y: 150,
                    w: 30,
                    h: 80,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 25,
                    moving_start_direct: "diag",
                    moving_start_pos: "bl",
                    moving_width: 30,
                    moving_origin_x: 245,
                    moving_origin_y: 150,
                    moving_origin_w: 30,
                    moving_origin_h: 80,
                    spikey: !0
                }, {
                    x: 175,
                    y: 150,
                    w: 30,
                    h: 80,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 40,
                    moving_start_direct: "diag",
                    moving_start_pos: "bl",
                    moving_width: 30,
                    moving_origin_x: 175,
                    moving_origin_y: 150,
                    moving_origin_w: 30,
                    moving_origin_h: 80,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    },
                    spikey: !0
                }, {
                    x: 345,
                    y: 105,
                    w: 570,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }, {
                    x: 30,
                    y: 140,
                    w: 20,
                    h: 100,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 605,
                    y: 95,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 565,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 535,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 505,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 475,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 445,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 415,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 385,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 355,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 325,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 295,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 265,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 235,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 205,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 175,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 145,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 115,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 85,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 55,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 25,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 320,
                    y: 195,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 55,
                    y: 360,
                    w: 10,
                    h: 120,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow"
                }, {
                    x: 105,
                    y: 150,
                    w: 30,
                    h: 80,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 35,
                    moving_start_direct: "diag",
                    moving_start_pos: "tl",
                    moving_width: 30,
                    moving_origin_x: 105,
                    moving_origin_y: 150,
                    moving_origin_w: 30,
                    moving_origin_h: 80,
                    spikey: !0
                }, {
                    x: 540,
                    y: 305,
                    w: 20,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 540,
                    y: 355,
                    w: 20,
                    h: 130,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "bluegreen"
                    }
                }, {
                    x: 320,
                    y: 295,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 418,
                    y: 217,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 328,
                    y: 217,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 248,
                    y: 217,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 158,
                    y: 217,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 208,
                    y: 21,
                    id: 1,
                    c: "yellow",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 357,
                    y: 21,
                    id: 1,
                    c: "yellow",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 249,
                    y: 330,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 124,
                    y: 330,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 573,
                    y: 342,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 612,
                    y: 21,
                    id: 1,
                    c: "yellow",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 30,
                    y: 367,
                    id: 1,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 498,
                    y: 217,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            q = {
                time1: 120,
                items: {},
                item_prob: 3,
                ballInfo: {
                    normal: {
                        green: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 10, 255, 155, 195, 235]
                        },
                        orange: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 10, 255, 155, 195, 235]
                        },
                        blue: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 10, 255, 155, 195, 235]
                        },
                        yellow: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 10, 255, 155, 195, 235]
                        }
                    }
                },
                players: [{
                    x: 30,
                    y: 89,
                    id: 1
                }],
                walls: [{
                    x: 110,
                    y: 275,
                    w: 80,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 375,
                    y: 355,
                    w: 10,
                    h: 50,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 385,
                    y: 325,
                    w: 390,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 610,
                    y: 325,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 85,
                    y: 285,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 585,
                    y: 350,
                    w: 10,
                    h: 60,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 375,
                    y: 385,
                    w: 430,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 350,
                    y: 415,
                    w: 480,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 610,
                    y: 415,
                    w: 40,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 155,
                    y: 335,
                    w: 10,
                    h: 110,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 85,
                    y: 415,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow"
                }, {
                    x: 25,
                    y: 405,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 45,
                    y: 375,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 25,
                    y: 345,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 45,
                    y: 315,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 25,
                    y: 285,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 130,
                    y: 305,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 105,
                    y: 350,
                    w: 10,
                    h: 140,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 390,
                    y: 275,
                    w: 480,
                    h: 10,
                    t: "convbelt",
                    softWall: !1,
                    convBeltSpeed: -6
                }, {
                    x: 270,
                    y: 235,
                    w: 520,
                    h: 10,
                    t: "convbelt",
                    softWall: !1,
                    convBeltSpeed: 6
                }, {
                    x: 355,
                    y: 195,
                    w: 550,
                    h: 10,
                    t: "convbelt",
                    softWall: !1,
                    convBeltSpeed: -6
                }, {
                    x: 135,
                    y: 135,
                    w: 10,
                    h: 30,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 105,
                    y: 135,
                    w: 10,
                    h: 30,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 315,
                    y: 155,
                    w: 530,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 595,
                    y: 95,
                    w: 10,
                    h: 30,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green"
                }, {
                    x: 615,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }, {
                    x: 365,
                    y: 115,
                    w: 530,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 35,
                    y: 35,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 300,
                    y: 45,
                    w: 580,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 65,
                    y: 80,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 40,
                    y: 115,
                    w: 60,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 85,
                    y: 355,
                    w: 30,
                    h: 130,
                    t: "moving",
                    softWall: !1,
                    moving_speed: 10,
                    moving_start_direct: "diag",
                    moving_start_pos: "bl",
                    moving_width: 30,
                    moving_origin_x: 85,
                    moving_origin_y: 355,
                    moving_origin_w: 30,
                    moving_origin_h: 130,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 260,
                    y: 355,
                    w: 220,
                    h: 50,
                    t: "caveinbs3",
                    softWall: !0,
                    cavein_space: 0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "bluegreen"
                    }
                }, {
                    x: 175,
                    y: 325,
                    w: 30,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }, {
                    x: 65,
                    y: 345,
                    w: 10,
                    h: 150,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 165,
                    y: 275,
                    w: 10,
                    h: 10,
                    t: "switch",
                    softWall: !1,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 585,
                    y: 300,
                    w: 10,
                    h: 40,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "purple"
                }, {
                    x: 35,
                    y: 415,
                    w: 50,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }, {
                    x: 30,
                    y: 155,
                    w: 40,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }],
                balls: [{
                    x: 473,
                    y: 354,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 533,
                    y: 354,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 120,
                    y: 135,
                    id: 1,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 614,
                    y: 97,
                    id: 1,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 273,
                    y: 354,
                    id: 3,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 21,
                    y: 23,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 83,
                    y: 398,
                    id: 1,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 131,
                    y: 288,
                    id: 1,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 503,
                    y: 354,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 608,
                    y: 306,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            J = {
                time1: 330,
                items: {
                    wdouble: 5,
                    whook: 5,
                    freeze: 1,
                    etime: 2,
                    stime: 1,
                    speed: 1,
                    dynamite: 3,
                    splain: 2,
                    sinvi: 1,
                    points1: 5,
                    points2: 5,
                    points3: 5
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }],
                walls: [{
                    x: 455,
                    y: 315,
                    w: 170,
                    h: 170,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 65,
                    moving_start_direct: "ccw",
                    moving_start_pos: "br",
                    moving_width: 50,
                    moving_origin_x: 455,
                    moving_origin_y: 315,
                    moving_origin_w: 170,
                    moving_origin_h: 170,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 195,
                    y: 315,
                    w: 170,
                    h: 170,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 75,
                    moving_start_direct: "cw",
                    moving_start_pos: "tl",
                    moving_width: 50,
                    moving_origin_x: 195,
                    moving_origin_y: 315,
                    moving_origin_w: 170,
                    moving_origin_h: 170,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 550,
                    y: 335,
                    w: 20,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 440,
                    y: 335,
                    w: 20,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 330,
                    y: 335,
                    w: 20,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 210,
                    y: 335,
                    w: 20,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 90,
                    y: 335,
                    w: 20,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 545,
                    y: 345,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 95,
                    y: 345,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 325,
                    y: 345,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 435,
                    y: 295,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 205,
                    y: 295,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 540,
                    y: 305,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 420,
                    y: 245,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 330,
                    y: 335,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 230,
                    y: 245,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 110,
                    y: 305,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 260,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 210,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 160,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 110,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "bluegreen"
                    }
                }, {
                    x: 30,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }, {
                    x: 30,
                    y: 255,
                    w: 20,
                    h: 330,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 70,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 310,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 325,
                    y: 25,
                    w: 10,
                    h: 30,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 295,
                    y: 25,
                    w: 10,
                    h: 30,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 310,
                    y: 35,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }],
                balls: [{
                    x: 91,
                    y: 147,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 201,
                    y: 147,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 271,
                    y: 147,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 341,
                    y: 147,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 351,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 481,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 541,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 421,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 291,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 181,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 71,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 31,
                    y: 63,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 121,
                    y: 63,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 221,
                    y: 63,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 551,
                    y: 172,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 291,
                    y: 182,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 431,
                    y: 182,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 151,
                    y: 172,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 83,
                    y: 192,
                    id: 3,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 183,
                    y: 192,
                    id: 3,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 363,
                    y: 192,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 463,
                    y: 192,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 563,
                    y: 192,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 283,
                    y: 192,
                    id: 3,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 199,
                    y: 184,
                    id: 5,
                    c: "pink",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "bluegreen"
                    }
                }, {
                    x: 529,
                    y: 184,
                    id: 5,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "bluegreen"
                    }
                }, {
                    x: 403,
                    y: 102,
                    id: 2,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 283,
                    y: 222,
                    id: 2,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 83,
                    y: 222,
                    id: 2,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 353,
                    y: 172,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 303,
                    y: 172,
                    id: 3,
                    c: "bluegreen",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 533,
                    y: 62,
                    id: 3,
                    c: "bluegreen",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 193,
                    y: 62,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 193,
                    y: 172,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 533,
                    y: 172,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 566,
                    y: 160,
                    id: 3,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    },
                    splitWay: 4
                }, {
                    x: 286,
                    y: 160,
                    id: 3,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    },
                    splitWay: 4
                }, {
                    x: 126,
                    y: 160,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    },
                    splitWay: 4
                }, {
                    x: 426,
                    y: 160,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    },
                    splitWay: 4
                }, {
                    x: 531,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 471,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 401,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 341,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 281,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 221,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 161,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 101,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 41,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 241,
                    y: 200,
                    id: 4,
                    c: "purple",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 391,
                    y: 200,
                    id: 4,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 311,
                    y: 17,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 311,
                    y: 17,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            };
        J.extra = i.a
    },
    1139: function(e, t, a) {
        "use strict";
        a.r(t), a.d(t, "lvl1", (function() {
            return s
        })), a.d(t, "lvl2", (function() {
            return n
        })), a.d(t, "lvl3", (function() {
            return l
        })), a.d(t, "lvl4", (function() {
            return o
        })), a.d(t, "lvl5", (function() {
            return r
        })), a.d(t, "lvl6", (function() {
            return h
        })), a.d(t, "lvl7", (function() {
            return p
        })), a.d(t, "lvl8", (function() {
            return d
        })), a.d(t, "lvl9", (function() {
            return y
        })), a.d(t, "lvl10", (function() {
            return _
        })), a.d(t, "lvl11", (function() {
            return c
        })), a.d(t, "lvl12", (function() {
            return m
        })), a.d(t, "lvl13", (function() {
            return u
        })), a.d(t, "lvl14", (function() {
            return g
        })), a.d(t, "lvl15", (function() {
            return v
        })), a.d(t, "lvl16", (function() {
            return f
        })), a.d(t, "lvl17", (function() {
            return S
        })), a.d(t, "lvl18", (function() {
            return E
        })), a.d(t, "lvl19", (function() {
            return x
        })), a.d(t, "lvl20", (function() {
            return T
        })), a.d(t, "lvl21", (function() {
            return b
        })), a.d(t, "lvl22", (function() {
            return k
        })), a.d(t, "lvl23", (function() {
            return w
        })), a.d(t, "lvl24", (function() {
            return I
        })), a.d(t, "lvl25", (function() {
            return P
        })), a.d(t, "lvl26", (function() {
            return A
        })), a.d(t, "lvl27", (function() {
            return L
        })), a.d(t, "lvl28", (function() {
            return M
        })), a.d(t, "lvl29", (function() {
            return O
        })), a.d(t, "lvl30", (function() {
            return D
        })), a.d(t, "lvl31", (function() {
            return B
        })), a.d(t, "lvl32", (function() {
            return R
        })), a.d(t, "lvl33", (function() {
            return W
        })), a.d(t, "lvl34", (function() {
            return N
        })), a.d(t, "lvl35", (function() {
            return C
        })), a.d(t, "lvl36", (function() {
            return U
        })), a.d(t, "lvl37", (function() {
            return Y
        })), a.d(t, "lvl38", (function() {
            return K
        })), a.d(t, "lvl39", (function() {
            return G
        })), a.d(t, "lvl40", (function() {
            return H
        })), a.d(t, "lvl41", (function() {
            return z
        })), a.d(t, "lvl42", (function() {
            return V
        })), a.d(t, "lvl43", (function() {
            return F
        })), a.d(t, "lvl44", (function() {
            return X
        })), a.d(t, "lvl45", (function() {
            return j
        })), a.d(t, "lvl46", (function() {
            return q
        })), a.d(t, "lvl47", (function() {
            return J
        }));
        var i = a(122),
            s = {
                time1: 25,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 390,
                    y: 399,
                    id: 1
                }, {
                    x: 430,
                    y: 399,
                    id: 2
                }],
                walls: [],
                balls: [{
                    x: 233,
                    y: 292,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            n = {
                time1: 30,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }, {
                    x: 350,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 320,
                    y: 135,
                    w: 100,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 375,
                    y: 95,
                    w: 10,
                    h: 170,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 265,
                    y: 95,
                    w: 10,
                    h: 170,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 175,
                    w: 100,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }],
                balls: [{
                    x: 349,
                    y: 70,
                    id: 2,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 339,
                    y: 106,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 319,
                    y: 26,
                    id: 2,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 293,
                    y: 42,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 343,
                    y: 42,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 253,
                    y: 292,
                    id: 2,
                    c: "orange",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 393,
                    y: 292,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            l = {
                time1: 38,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 430,
                    y: 399,
                    id: 1
                }, {
                    x: 360,
                    y: 399,
                    id: 2
                }],
                walls: [],
                balls: [{
                    x: 64,
                    y: 131,
                    id: 4,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            o = {
                time1: 45,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 320,
                    y: 399,
                    id: 1
                }, {
                    x: 350,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 330,
                    y: 265,
                    w: 280,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "splain"
                }],
                balls: [{
                    x: 286,
                    y: 187,
                    id: 3,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 386,
                    y: 187,
                    id: 4,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            r = {
                time1: 28,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 410,
                    y: 399,
                    id: 1
                }, {
                    x: 380,
                    y: 399,
                    id: 2
                }],
                walls: [],
                balls: [{
                    x: 282,
                    y: 298,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 232,
                    y: 298,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 182,
                    y: 298,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 132,
                    y: 298,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 82,
                    y: 298,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            h = {
                time1: 45,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 170,
                    y: 399,
                    id: 1
                }, {
                    x: 410,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 295,
                    y: 335,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 295,
                    y: 345,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "freeze",
                    invisWall: !0
                }],
                balls: [{
                    x: 358,
                    y: 209,
                    id: 3,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }, {
                    x: 238,
                    y: 209,
                    id: 3,
                    c: "green",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }]
            },
            p = {
                time1: 40,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 2,
                    speed: 1,
                    points2: 1,
                    whook: 2
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 210,
                    y: 399,
                    id: 1
                }, {
                    x: 180,
                    y: 199,
                    id: 2
                }],
                walls: [{
                    x: 350,
                    y: 225,
                    w: 560,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 30,
                    y: 290,
                    w: 20,
                    h: 260,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 30,
                    y: 165,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 298,
                    y: 119,
                    id: 4,
                    c: "bluegreen",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 298,
                    y: 299,
                    id: 3,
                    c: "pink",
                    vx: 3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }]
            },
            d = {
                time1: 60,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 2,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 340,
                    y: 399,
                    id: 1
                }, {
                    x: 300,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 195,
                    y: 390,
                    w: 10,
                    h: 60,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 530,
                    y: 190,
                    w: 20,
                    h: 60,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 90,
                    y: 190,
                    w: 20,
                    h: 60,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 320,
                    y: 165,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 95,
                    y: 330,
                    w: 10,
                    h: 20,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 525,
                    y: 330,
                    w: 10,
                    h: 20,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 195,
                    y: 265,
                    w: 10,
                    h: 190,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 315,
                    y: 330,
                    w: 10,
                    h: 20,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 220,
                    y: 290,
                    w: 20,
                    h: 260,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 425,
                    y: 295,
                    w: 10,
                    h: 250,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 437,
                    y: 47,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 257,
                    y: 47,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 538,
                    y: 290,
                    id: 3,
                    c: "orange",
                    vx: 3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 108,
                    y: 290,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 298,
                    y: 290,
                    id: 3,
                    c: "pink",
                    vx: 3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }]
            },
            y = {
                time1: 38,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 2,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 250,
                    y: 399,
                    id: 1
                }, {
                    x: 410,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 335,
                    y: 185,
                    w: 230,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 340,
                    y: 340,
                    w: 20,
                    h: 160,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 455,
                    y: 140,
                    w: 10,
                    h: 240,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 215,
                    y: 140,
                    w: 10,
                    h: 240,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 335,
                    y: 265,
                    w: 250,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 335,
                    y: 15,
                    w: 250,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }],
                balls: [{
                    x: 153,
                    y: 238,
                    id: 2,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 493,
                    y: 238,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 543,
                    y: 198,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 113,
                    y: 198,
                    id: 3,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 333,
                    y: 58,
                    id: 3,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }]
            },
            _ = {
                time1: 48,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 2,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 320,
                    y: 149,
                    id: 1
                }, {
                    x: 360,
                    y: 149,
                    id: 2
                }],
                walls: [{
                    x: 420,
                    y: 225,
                    w: 60,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 250,
                    y: 225,
                    w: 60,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 335,
                    y: 285,
                    w: 230,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 565,
                    y: 165,
                    w: 130,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "freeze"
                }, {
                    x: 90,
                    y: 165,
                    w: 160,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 465,
                    y: 260,
                    w: 10,
                    h: 60,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 335,
                    y: 175,
                    w: 330,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 205,
                    y: 260,
                    w: 10,
                    h: 60,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 335,
                    y: 255,
                    w: 230,
                    h: 10,
                    t: "spikeall",
                    softWall: !0,
                    spikey: !0
                }],
                balls: [{
                    x: 503,
                    y: 38,
                    id: 2,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 173,
                    y: 38,
                    id: 2,
                    c: "bluegreen",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 433,
                    y: 48,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 543,
                    y: 238,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 113,
                    y: 238,
                    id: 3,
                    c: "purple",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 243,
                    y: 48,
                    id: 3,
                    c: "bluegreen",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }]
            },
            c = {
                time1: 65,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 2,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 60,
                    y: 389,
                    id: 1
                }, {
                    x: 580,
                    y: 389,
                    id: 2
                }],
                walls: [{
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 425,
                    y: 236,
                    id: 3,
                    c: "green",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: -1
                }, {
                    x: 545,
                    y: 236,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 545,
                    y: 116,
                    id: 3,
                    c: "green",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: -1
                }, {
                    x: 55,
                    y: 176,
                    id: 3,
                    c: "green",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: -1
                }, {
                    x: 175,
                    y: 176,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 342,
                    y: 263,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: -1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 207,
                    y: 153,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 477,
                    y: 153,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 55,
                    y: 56,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }]
            },
            m = {
                time1: 14,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 2,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 269,
                    id: 1
                }, {
                    x: 350,
                    y: 149,
                    id: 2
                }],
                walls: [{
                    x: 45,
                    y: 175,
                    w: 70,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 595,
                    y: 175,
                    w: 70,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 540,
                    y: 175,
                    w: 40,
                    h: 10,
                    t: "trampoline",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 100,
                    y: 175,
                    w: 40,
                    h: 10,
                    t: "trampoline",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 320,
                    y: 55,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 45,
                    y: 295,
                    w: 70,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 595,
                    y: 295,
                    w: 70,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 540,
                    y: 295,
                    w: 40,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 100,
                    y: 295,
                    w: 40,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 320,
                    y: 295,
                    w: 400,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 175,
                    w: 400,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }],
                balls: [{
                    x: 621,
                    y: 74,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 541,
                    y: 74,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 461,
                    y: 74,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 182,
                    y: 74,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 102,
                    y: 74,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 22,
                    y: 74,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 621,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 541,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 461,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 182,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 102,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 22,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            u = {
                time1: 53,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 3,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }, {
                    x: 280,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b"
                }, {
                    x: 365,
                    y: 95,
                    w: 10,
                    h: 170,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 395,
                    y: 155,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "a"
                }, {
                    x: 495,
                    y: 185,
                    w: 270,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }],
                balls: [{
                    x: 527,
                    y: 40,
                    id: 3,
                    c: "blue",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 327,
                    y: 40,
                    id: 3,
                    c: "blue",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 427,
                    y: 240,
                    id: 3,
                    c: "blue",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 461,
                    y: 292,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 181,
                    y: 202,
                    id: 4,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 470,
                    y: 50,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            g = {
                time1: 38,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 3,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1,
                    elife: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 300,
                    y: 399,
                    id: 1
                }, {
                    x: 340,
                    y: 399,
                    id: 2
                }],
                walls: [],
                balls: [{
                    x: 368,
                    y: 171,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }, {
                    x: 278,
                    y: 171,
                    id: 3,
                    c: "orange",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }]
            },
            v = {
                time1: 17,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 3,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1,
                    elife: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 240,
                    y: 399,
                    id: 1
                }, {
                    x: 400,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 325,
                    y: 35,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 45,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "medal",
                    invisWall: !0
                }, {
                    x: 325,
                    y: 55,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "points3",
                    invisWall: !0
                }, {
                    x: 325,
                    y: 65,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "points2",
                    invisWall: !0
                }, {
                    x: 325,
                    y: 75,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "points1",
                    invisWall: !0
                }, {
                    x: 325,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 105,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 115,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 125,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 135,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 145,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 155,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 165,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 175,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 185,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 195,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 205,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 215,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 225,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 235,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 245,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 255,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 275,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 285,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 295,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 305,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 315,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 325,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 335,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 345,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }, {
                    x: 325,
                    y: 355,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    invisWall: !0
                }],
                balls: [{
                    x: 326,
                    y: 17,
                    id: 1,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }]
            },
            f = {
                time1: 56,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1,
                    elife: 1,
                    points3: 3
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 240,
                    y: 399,
                    id: 1
                }, {
                    x: 400,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 590,
                    y: 360,
                    w: 20,
                    h: 120,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 50,
                    y: 360,
                    w: 20,
                    h: 120,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 50,
                    y: 305,
                    w: 80,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 590,
                    y: 305,
                    w: 80,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }],
                balls: [{
                    x: 67,
                    y: 66,
                    id: 1,
                    c: "green",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 67,
                    y: 266,
                    id: 1,
                    c: "green",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 167,
                    y: 266,
                    id: 1,
                    c: "green",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 337,
                    y: 266,
                    id: 1,
                    c: "green",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 517,
                    y: 266,
                    id: 1,
                    c: "green",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 417,
                    y: 166,
                    id: 1,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 237,
                    y: 166,
                    id: 1,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 67,
                    y: 166,
                    id: 1,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 167,
                    y: 66,
                    id: 1,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 327,
                    y: 66,
                    id: 1,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 517,
                    y: 66,
                    id: 1,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 373,
                    y: 147,
                    id: 3,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }, {
                    x: 263,
                    y: 147,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }]
            },
            S = {
                time1: 70,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1,
                    elife: 1,
                    points3: 3
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 150,
                    y: 399,
                    id: 1
                }, {
                    x: 470,
                    y: 399,
                    id: 2
                }],
                walls: [],
                balls: [{
                    x: 245,
                    y: 297,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    warp: !0
                }]
            },
            E = {
                time1: 51,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1,
                    elife: 1,
                    points3: 3
                },
                item_prob: 3,
                ballInfo: {
                    normal: {
                        green: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 155, 115, 155, 195, 235]
                        }
                    }
                },
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }, {
                    x: 400,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 55,
                    y: 400,
                    w: 10,
                    h: 40,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "act",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "red"
                    }
                }, {
                    x: 30,
                    y: 385,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "red"
                }, {
                    x: 585,
                    y: 400,
                    w: 10,
                    h: 40,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "act",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "red"
                    }
                }, {
                    x: 610,
                    y: 385,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "red"
                }, {
                    x: 320,
                    y: 85,
                    w: 620,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "red"
                }, {
                    x: 350,
                    y: 320,
                    w: 20,
                    h: 200,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "red"
                    }
                }, {
                    x: 320,
                    y: 225,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 30,
                    y: 399,
                    id: 1,
                    c: "pink",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 21,
                    y: 408,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: -1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 41,
                    y: 408,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: -1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 600,
                    y: 408,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: -1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 619,
                    y: 400,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: -1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 608,
                    y: 408,
                    id: 1,
                    c: "pink",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 173,
                    y: 52,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 448,
                    y: 52,
                    id: 3,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 38,
                    y: 408,
                    id: 1,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 28,
                    y: 408,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 38,
                    y: 398,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 618,
                    y: 408,
                    id: 1,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 618,
                    y: 398,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 117,
                    y: 276,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 598,
                    y: 52,
                    id: 3,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 77,
                    y: 306,
                    id: 1,
                    c: "red",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 247,
                    y: 246,
                    id: 1,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 537,
                    y: 276,
                    id: 1,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 43,
                    y: 52,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 117,
                    y: 256,
                    id: 1,
                    c: "red",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 87,
                    y: 276,
                    id: 1,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 57,
                    y: 276,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 608,
                    y: 408,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 608,
                    y: 398,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 507,
                    y: 276,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 407,
                    y: 296,
                    id: 1,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 600,
                    y: 400,
                    id: 1,
                    c: "green",
                    vx: -1,
                    vy: -1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 28,
                    y: 398,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 567,
                    y: 276,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 577,
                    y: 356,
                    id: 1,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 497,
                    y: 286,
                    id: 1,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 507,
                    y: 366,
                    id: 1,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 20,
                    y: 400,
                    id: 1,
                    c: "green",
                    vx: -1,
                    vy: -1,
                    t: "normal",
                    isMetal: !0
                }]
            },
            x = {
                time1: 30,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 3
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 300,
                    y: 399,
                    id: 1
                }, {
                    x: 360,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 320,
                    y: 215,
                    w: 520,
                    h: 410,
                    t: "caveinbs3",
                    softWall: !0,
                    cavein_space: 0
                }],
                balls: [{
                    x: 387,
                    y: 63,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 188,
                    y: 359,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 477,
                    y: 153,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 144,
                    y: 234,
                    id: 3,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 518,
                    y: 256,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 158,
                    y: 59,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            T = {
                time1: 100,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 3,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 130,
                    y: 399,
                    id: 1
                }, {
                    x: 90,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 480,
                    y: 135,
                    w: 300,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green"
                }, {
                    x: 480,
                    y: 65,
                    w: 300,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 165,
                    y: 95,
                    w: 310,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 480,
                    y: 345,
                    w: 300,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "purple"
                }, {
                    x: 165,
                    y: 175,
                    w: 310,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 605,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "a"
                }, {
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b"
                }, {
                    x: 325,
                    y: 215,
                    w: 10,
                    h: 410,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 274,
                    y: 52,
                    id: 3,
                    c: "blue",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: -1
                }, {
                    x: 294,
                    y: 62,
                    id: 3,
                    c: "blue",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 547,
                    y: 99,
                    id: 3,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 397,
                    y: 99,
                    id: 3,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 113,
                    y: 132,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 253,
                    y: 129,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 397,
                    y: 33,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 527,
                    y: 33,
                    id: 3,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 457,
                    y: 33,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 73,
                    y: 52,
                    id: 3,
                    c: "blue",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 253,
                    y: 42,
                    id: 3,
                    c: "blue",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 223,
                    y: 242,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 454,
                    y: 215,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 384,
                    y: 245,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 544,
                    y: 245,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 148,
                    y: 215,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            b = {
                time1: 83,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 3,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 130,
                    y: 399,
                    id: 1
                }, {
                    x: 90,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 475,
                    y: 355,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 475,
                    y: 325,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 345,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 410,
                    y: 115,
                    w: 100,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 520,
                    y: 115,
                    w: 100,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 575,
                    y: 160,
                    w: 10,
                    h: 300,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 465,
                    y: 165,
                    w: 10,
                    h: 290,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 345,
                    y: 45,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 550,
                    y: 375,
                    w: 160,
                    h: 10,
                    t: "normal",
                    softWall: !1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }, {
                    x: 550,
                    y: 415,
                    w: 160,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 465,
                    y: 395,
                    w: 10,
                    h: 50,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 605,
                    y: 35,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b"
                }, {
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b"
                }],
                balls: [{
                    x: 426,
                    y: 82,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 386,
                    y: 82,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 396,
                    y: 42,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 416,
                    y: 62,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 313,
                    y: 282,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 423,
                    y: 282,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 163,
                    y: 219,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 617,
                    y: 390,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 577,
                    y: 396,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 597,
                    y: 396,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 547,
                    y: 396,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 313,
                    y: 172,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 523,
                    y: 59,
                    id: 4,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }]
            },
            k = {
                time1: 66,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 3,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 130,
                    y: 399,
                    id: 1
                }, {
                    x: 90,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 275,
                    y: 185,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "c",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 415,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "e",
                    teleport_dest: "f",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }, {
                    x: 215,
                    y: 185,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "d",
                    teleport_dest: "e",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 475,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "c",
                    teleport_dest: "d",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 445,
                    y: 110,
                    w: 10,
                    h: 200,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 245,
                    y: 110,
                    w: 10,
                    h: 200,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 215,
                    w: 620,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 445,
                    y: 320,
                    w: 10,
                    h: 200,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 245,
                    y: 320,
                    w: 10,
                    h: 200,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 475,
                    y: 185,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "f",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "red"
                    }
                }],
                balls: [{
                    x: 383,
                    y: 132,
                    id: 2,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 334,
                    y: 273,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 353,
                    y: 82,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 156,
                    y: 82,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 93,
                    y: 52,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 543,
                    y: 272,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 573,
                    y: 82,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 511,
                    y: 52,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 173,
                    y: 272,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            w = {
                time1: 30,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 3,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 130,
                    y: 399,
                    id: 1
                }, {
                    x: 490,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 350,
                    y: 55,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "splain"
                }, {
                    x: 495,
                    y: 55,
                    w: 270,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 175,
                    y: 55,
                    w: 330,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 30,
                    w: 620,
                    h: 40,
                    t: "caveinbs3",
                    softWall: !0,
                    cavein_space: 100
                }],
                balls: [{
                    x: 581,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 603,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 541,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 531,
                    y: 38,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 553,
                    y: 38,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 491,
                    y: 38,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 451,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 473,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 411,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 373,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 201,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 177,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 117,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 77,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 157,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 177,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 551,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 511,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 441,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 411,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 344,
                    y: 41,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 337,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 307,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 277,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 247,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 199,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 137,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 99,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 37,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 387,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 417,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 457,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 467,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 497,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 527,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 537,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 557,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 577,
                    y: 26,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 607,
                    y: 36,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 351,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 311,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 241,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 263,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 227,
                    y: 38,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 227,
                    y: 18,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 341,
                    y: 34,
                    id: 1,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            I = {
                time1: 35,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 3,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 320,
                    y: 99,
                    id: 1
                }, {
                    x: 310,
                    y: 99,
                    id: 2
                }],
                walls: [{
                    x: 45,
                    y: 65,
                    w: 70,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }, {
                    x: 120,
                    y: 185,
                    w: 80,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 505,
                    y: 305,
                    w: 10,
                    h: 230,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 575,
                    y: 225,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "u"
                }, {
                    x: 435,
                    y: 315,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "s",
                    teleport_dest: "f"
                }, {
                    x: 335,
                    y: 315,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "r",
                    teleport_dest: "n"
                }, {
                    x: 390,
                    y: 345,
                    w: 20,
                    h: 150,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 405,
                    y: 345,
                    w: 210,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 325,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "t",
                    teleport_dest: "l"
                }, {
                    x: 215,
                    y: 315,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "p",
                    teleport_dest: "u"
                }, {
                    x: 115,
                    y: 315,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "o",
                    teleport_dest: "e"
                }, {
                    x: 170,
                    y: 380,
                    w: 20,
                    h: 80,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 75,
                    y: 245,
                    w: 10,
                    h: 350,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 490,
                    y: 125,
                    w: 20,
                    h: 110,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 525,
                    y: 45,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "m",
                    teleport_dest: "a"
                }, {
                    x: 490,
                    y: 75,
                    w: 120,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 455,
                    y: 45,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "l",
                    teleport_dest: "t"
                }, {
                    x: 425,
                    y: 95,
                    w: 10,
                    h: 170,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "k",
                    teleport_dest: "g"
                }, {
                    x: 35,
                    y: 215,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "j"
                }, {
                    x: 185,
                    y: 345,
                    w: 210,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 115,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "n",
                    teleport_dest: "r"
                }, {
                    x: 605,
                    y: 45,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "g"
                }, {
                    x: 35,
                    y: 185,
                    w: 50,
                    h: 10,
                    t: "trampoline",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 35,
                    y: 105,
                    w: 50,
                    h: 10,
                    t: "spikeall",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 35,
                    y: 35,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "e"
                }, {
                    x: 295,
                    y: 215,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 295,
                    y: 245,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "h",
                    teleport_dest: "a",
                    stateData: {
                        stateStart: "act",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }, {
                    x: 290,
                    y: 275,
                    w: 420,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 315,
                    y: 35,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a"
                }, {
                    x: 395,
                    y: 155,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "d",
                    teleport_dest: "e"
                }, {
                    x: 315,
                    y: 125,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 395,
                    y: 185,
                    w: 470,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 235,
                    y: 155,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "j"
                }, {
                    x: 315,
                    y: 155,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "c",
                    teleport_dest: "f"
                }, {
                    x: 35,
                    y: 135,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "f"
                }, {
                    x: 295,
                    y: 350,
                    w: 10,
                    h: 140,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 553,
                    y: 372,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 601,
                    y: 372,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 620,
                    y: 325,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 582,
                    y: 325,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 534,
                    y: 325,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 297,
                    y: 198,
                    id: 1,
                    c: "bluegreen",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 171,
                    y: 287,
                    id: 1,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }]
            },
            P = {
                time1: 78,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 3,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 60,
                    y: 399,
                    id: 1
                }, {
                    x: 140,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 185,
                    y: 40,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "act",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }, {
                    x: 410,
                    y: 75,
                    w: 440,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 185,
                    y: 120,
                    w: 10,
                    h: 100,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "red"
                }, {
                    x: 185,
                    y: 295,
                    w: 10,
                    h: 250,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 95,
                    y: 175,
                    w: 170,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 100,
                    y: 295,
                    w: 20,
                    h: 250,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 95,
                    y: 300,
                    w: 170,
                    h: 240,
                    t: "caveinbs3",
                    softWall: !0,
                    cavein_space: 0
                }, {
                    x: 405,
                    y: 215,
                    w: 450,
                    h: 410,
                    t: "caveinbs3",
                    softWall: !0,
                    cavein_space: 50,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }],
                balls: [{
                    x: 503,
                    y: 42,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 441,
                    y: 42,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 373,
                    y: 42,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 303,
                    y: 33,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 233,
                    y: 42,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 393,
                    y: 312,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 133,
                    y: 52,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            A = {
                time1: 49,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 3,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 270,
                    y: 329,
                    id: 1
                }, {
                    x: 410,
                    y: 329,
                    id: 2
                }],
                walls: [{
                    x: 525,
                    y: 355,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 585,
                    y: 355,
                    w: 90,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 425,
                    y: 355,
                    w: 170,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 325,
                    y: 355,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 220,
                    y: 355,
                    w: 180,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }, {
                    x: 115,
                    y: 355,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 55,
                    y: 355,
                    w: 90,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 66,
                    y: 166,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 543,
                    y: 166,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 153,
                    y: 166,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 463,
                    y: 166,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 293,
                    y: 102,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }]
            },
            L = {
                time1: 77,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 1,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 3,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {
                    reverse: {
                        speedx: 7,
                        grav: 36,
                        bounce: [0, 185, 175, 115, 185, 195]
                    }
                },
                players: [{
                    x: 150,
                    y: 209,
                    id: 1
                }, {
                    x: 120,
                    y: 209,
                    id: 2
                }],
                walls: [{
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    stateData: {
                        stateStart: "inact"
                    }
                }, {
                    x: 395,
                    y: 45,
                    w: 10,
                    h: 70,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "wdouble"
                }, {
                    x: 395,
                    y: 155,
                    w: 10,
                    h: 150,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 605,
                    y: 205,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 320,
                    y: 175,
                    w: 120,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 500,
                    y: 235,
                    w: 260,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 245,
                    y: 45,
                    w: 10,
                    h: 70,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "speed"
                }, {
                    x: 245,
                    y: 155,
                    w: 10,
                    h: 150,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 140,
                    y: 235,
                    w: 260,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 235,
                    w: 100,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }],
                balls: [{
                    x: 365,
                    y: 267,
                    id: 3,
                    c: "orange",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 473,
                    y: 292,
                    id: 3,
                    c: "orange",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 243,
                    y: 292,
                    id: 3,
                    c: "orange",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 577,
                    y: 82,
                    id: 3,
                    vx: -1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 451,
                    y: 82,
                    id: 3,
                    vx: -1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 107,
                    y: 82,
                    id: 3,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 163,
                    y: 82,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            M = {
                time1: 77,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 2,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 100,
                    y: 389,
                    id: 1
                }, {
                    x: 60,
                    y: 389,
                    id: 2
                }],
                walls: [{
                    x: 330,
                    y: 365,
                    w: 20,
                    h: 90,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 330,
                    y: 325,
                    w: 120,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 415,
                    w: 380,
                    h: 10,
                    t: "ice",
                    softWall: !0
                }, {
                    x: 570,
                    y: 415,
                    w: 120,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 70,
                    y: 415,
                    w: 120,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 323,
                    y: 102,
                    id: 3,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 133,
                    y: 172,
                    id: 3,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 303,
                    y: 242,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 593,
                    y: 222,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 474,
                    y: 260,
                    id: 3,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }, {
                    x: 393,
                    y: 212,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            O = {
                time1: 30,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 2,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {
                    normal: {
                        yellow: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 255, 255, 155, 195, 235]
                        }
                    }
                },
                players: [{
                    x: 370,
                    y: 389,
                    id: 1
                }, {
                    x: 270,
                    y: 389,
                    id: 2
                }],
                walls: [{
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "ice",
                    softWall: !0
                }, {
                    x: 320,
                    y: 210,
                    w: 620,
                    h: 400,
                    t: "caveinbs3",
                    softWall: !0,
                    cavein_space: 0
                }],
                balls: [{
                    x: 513,
                    y: 242,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 253,
                    y: 132,
                    id: 3,
                    c: "green",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 183,
                    y: 222,
                    id: 3,
                    c: "green",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 403,
                    y: 102,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 85,
                    y: 224,
                    id: 3,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 493,
                    y: 173,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 216,
                    y: 75,
                    id: 3,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 327,
                    y: 25,
                    id: 2,
                    c: "yellow",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }]
            },
            D = {
                time1: 32,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 2,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }, {
                    x: 390,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 430,
                    y: 105,
                    w: 80,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green"
                }, {
                    x: 220,
                    y: 265,
                    w: 60,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 360,
                    y: 265,
                    w: 100,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 515,
                    y: 265,
                    w: 90,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "spikeall",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "bluegreen"
                    }
                }, {
                    x: 95,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 25,
                    y: 185,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 350,
                    y: 105,
                    w: 80,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 515,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 485,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 435,
                    y: 175,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 185,
                    y: 105,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 155,
                    y: 105,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 55,
                    y: 185,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 125,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 145,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 175,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 265,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 295,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 425,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 455,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 575,
                    y: 265,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 610,
                    y: 340,
                    w: 20,
                    h: 160,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 610,
                    y: 265,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 350,
                    y: 360,
                    w: 20,
                    h: 120,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 255,
                    y: 105,
                    w: 110,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 350,
                    y: 185,
                    w: 20,
                    h: 170,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }],
                balls: [{
                    x: 611,
                    y: 223,
                    id: 1,
                    c: "bluegreen",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 519,
                    y: 18,
                    id: 1,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 329,
                    y: 18,
                    id: 1,
                    c: "green",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 189,
                    y: 18,
                    id: 1,
                    c: "blue",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }]
            },
            B = {
                time1: 91,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 2,
                    points1: 2,
                    dynamite: 1,
                    wlaser: 2,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 2,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }, {
                    x: 360,
                    y: 399,
                    id: 2
                }],
                walls: [],
                balls: [{
                    x: 233,
                    y: 191,
                    id: 4,
                    c: "yellow",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }, {
                    x: 393,
                    y: 181,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    splitWay: 4
                }]
            },
            R = {
                time1: 75,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 2,
                    points1: 2,
                    dynamite: 1,
                    wlaser: 2,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 2,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 60,
                    y: 389,
                    id: 1
                }, {
                    x: 40,
                    y: 389,
                    id: 2
                }],
                walls: [{
                    x: 25,
                    y: 115,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "sinvi"
                }, {
                    x: 305,
                    y: 235,
                    w: 10,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 245,
                    y: 235,
                    w: 10,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 275,
                    y: 285,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 610,
                    y: 310,
                    w: 20,
                    h: 200,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 25,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 55,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 85,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 115,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 145,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 175,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 205,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 235,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 265,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 295,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 325,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 355,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 385,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 415,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 445,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 475,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 505,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 535,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 605,
                    y: 85,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 565,
                    y: 85,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 25,
                    y: 215,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 605,
                    y: 55,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "a",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 335,
                    y: 115,
                    w: 590,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 335,
                    y: 215,
                    w: 590,
                    h: 10,
                    t: "ice",
                    softWall: !1
                }, {
                    x: 580,
                    y: 415,
                    w: 100,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 520,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 495,
                    y: 415,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 470,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 440,
                    y: 415,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 410,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 385,
                    y: 415,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 360,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 330,
                    y: 415,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 300,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 275,
                    y: 415,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 250,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 220,
                    y: 415,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 190,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 165,
                    y: 415,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 140,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 110,
                    y: 415,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 80,
                    y: 415,
                    w: 20,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 40,
                    y: 415,
                    w: 60,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 605,
                    y: 185,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }],
                balls: [{
                    x: 545,
                    y: 245,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 437,
                    y: 245,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 329,
                    y: 245,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 113,
                    y: 245,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 559,
                    y: 100,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 109,
                    y: 196,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 275,
                    y: 252,
                    id: 3,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 517,
                    y: 156,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 221,
                    y: 245,
                    id: 2,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 313,
                    y: 146,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 26,
                    y: 129,
                    id: 1,
                    c: "pink",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 211,
                    y: 146,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 415,
                    y: 136,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 466,
                    y: 100,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 160,
                    y: 100,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 388,
                    y: 19,
                    id: 1,
                    c: "bluegreen",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 364,
                    y: 100,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 237,
                    y: 19,
                    id: 1,
                    c: "bluegreen",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 262,
                    y: 100,
                    id: 1,
                    c: "purple",
                    vx: 0,
                    vy: 1,
                    t: "normal",
                    isMetal: !0
                }, {
                    x: 26,
                    y: 19,
                    id: 1,
                    c: "bluegreen",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }]
            },
            W = {
                time1: 52,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 1,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 340,
                    y: 399,
                    id: 1
                }, {
                    x: 300,
                    y: 399,
                    id: 2
                }],
                walls: [],
                balls: [{
                    x: 396,
                    y: 345,
                    id: 1,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 123,
                    y: 182,
                    id: 5,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 553,
                    y: 342,
                    id: 4,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 483,
                    y: 312,
                    id: 2,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 233,
                    y: 272,
                    id: 3,
                    c: "orange",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }]
            },
            N = {
                time1: 72,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 1,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 340,
                    y: 399,
                    id: 1
                }, {
                    x: 300,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 320,
                    y: 15,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }],
                balls: [{
                    x: 111,
                    y: 90,
                    id: 5,
                    c: "orange",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 551,
                    y: 100,
                    id: 5,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 131,
                    y: 220,
                    id: 5,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            C = {
                time1: 70,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 1,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 190,
                    y: 399,
                    id: 1
                }, {
                    x: 450,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 455,
                    y: 285,
                    w: 10,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 335,
                    y: 285,
                    w: 10,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 205,
                    y: 285,
                    w: 10,
                    h: 10,
                    t: "sticky"
                }],
                balls: [{
                    x: 243,
                    y: 42,
                    id: 3,
                    c: "blue",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 433,
                    y: 42,
                    id: 3,
                    c: "blue",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 273,
                    y: 102,
                    id: 3,
                    c: "pink",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 403,
                    y: 102,
                    id: 3,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 183,
                    y: 102,
                    id: 3,
                    c: "blue",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 493,
                    y: 102,
                    id: 3,
                    c: "blue",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 343,
                    y: 82,
                    id: 5,
                    c: "yellow",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }]
            },
            U = {
                time1: 44,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 1,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 240,
                    y: 399,
                    id: 1
                }, {
                    x: 390,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 205,
                    y: 215,
                    w: 10,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "splain"
                }, {
                    x: 415,
                    y: 215,
                    w: 10,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "wdouble"
                }, {
                    x: 500,
                    y: 225,
                    w: 160,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 120,
                    y: 225,
                    w: 160,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 225,
                    y: 215,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 395,
                    y: 215,
                    w: 30,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 310,
                    y: 215,
                    w: 60,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 225,
                    y: 105,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 310,
                    y: 75,
                    w: 140,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 310,
                    y: 35,
                    w: 140,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 395,
                    y: 105,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 415,
                    y: 80,
                    w: 10,
                    h: 140,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 205,
                    y: 80,
                    w: 10,
                    h: 140,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 350,
                    y: 135,
                    w: 60,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 270,
                    y: 135,
                    w: 60,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 395,
                    y: 145,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 225,
                    y: 145,
                    w: 30,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }],
                balls: [{
                    x: 451,
                    y: 69,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 561,
                    y: 69,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 376,
                    y: 19,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 376,
                    y: 18,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 366,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 356,
                    y: 19,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 346,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 336,
                    y: 19,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 326,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 316,
                    y: 19,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 306,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 286,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 266,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 256,
                    y: 20,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 372,
                    y: 101,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 372,
                    y: 91,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 362,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 352,
                    y: 92,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 342,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 332,
                    y: 92,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 322,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 312,
                    y: 92,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 302,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 292,
                    y: 92,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 282,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 272,
                    y: 92,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 262,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 252,
                    y: 102,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 369,
                    y: 59,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 369,
                    y: 49,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 359,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 349,
                    y: 50,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 339,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 329,
                    y: 50,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 319,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 309,
                    y: 50,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 299,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 289,
                    y: 50,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 279,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 269,
                    y: 50,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 259,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 249,
                    y: 60,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 271,
                    y: 110,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 296,
                    y: 19,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 276,
                    y: 19,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 221,
                    y: 179,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 151,
                    y: 69,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 621,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 481,
                    y: 204,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 101,
                    y: 179,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }]
            },
            Y = {
                time1: 84,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 1,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 240,
                    y: 399,
                    id: 1
                }, {
                    x: 390,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 375,
                    y: 195,
                    w: 70,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 195,
                    w: 40,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 320,
                    y: 305,
                    w: 20,
                    h: 230,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 540,
                    y: 115,
                    w: 40,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "whook"
                }, {
                    x: 100,
                    y: 115,
                    w: 40,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "splain"
                }, {
                    x: 265,
                    y: 195,
                    w: 70,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 250,
                    y: 325,
                    w: 40,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 390,
                    y: 325,
                    w: 40,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 490,
                    y: 265,
                    w: 100,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 150,
                    y: 265,
                    w: 100,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 603,
                    y: 228,
                    id: 3,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 50,
                    y: 217,
                    id: 3,
                    c: "red",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 294,
                    y: 47,
                    id: 2,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 272,
                    y: 77,
                    id: 2,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 382,
                    y: 77,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 352,
                    y: 47,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 101,
                    y: 166,
                    id: 3,
                    c: "red",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 541,
                    y: 166,
                    id: 3,
                    c: "red",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 102,
                    y: 35,
                    id: 3,
                    c: "orange",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 541,
                    y: 35,
                    id: 3,
                    c: "orange",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }]
            },
            K = {
                time1: 38,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 2,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 100,
                    y: 379,
                    id: 1
                }, {
                    x: 100,
                    y: 319,
                    id: 2
                }],
                walls: [{
                    x: 580,
                    y: 205,
                    w: 100,
                    h: 10,
                    t: "switch",
                    softWall: !1,
                    eType: "color_popped",
                    eInfo: "green"
                }, {
                    x: 320,
                    y: 205,
                    w: 360,
                    h: 10,
                    t: "switch",
                    softWall: !1,
                    eType: "color_popped",
                    eInfo: "green"
                }, {
                    x: 515,
                    y: 205,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 125,
                    y: 205,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 330,
                    y: 300,
                    w: 20,
                    h: 200,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 585,
                    y: 375,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b"
                }, {
                    x: 35,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 605,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 575,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 545,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 515,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 485,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 455,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 425,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 395,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 365,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 335,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 305,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 275,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 245,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 215,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 185,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 155,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 125,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 95,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 65,
                    y: 405,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 60,
                    y: 205,
                    w: 100,
                    h: 10,
                    t: "switch",
                    softWall: !1,
                    eType: "color_popped",
                    eInfo: "green"
                }, {
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }, {
                    x: 55,
                    y: 375,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "a"
                }],
                balls: [{
                    x: 312,
                    y: 96,
                    id: 4,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 585,
                    y: 40,
                    id: 3,
                    c: "purple",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 61,
                    y: 44,
                    id: 3,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 308,
                    y: 292,
                    id: 2,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 553,
                    y: 292,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 183,
                    y: 292,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 426,
                    y: 278,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            G = {
                time1: 72,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 2,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 300,
                    y: 399,
                    id: 1
                }, {
                    x: 360,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 395,
                    y: 95,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 350,
                    y: 95,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 305,
                    y: 95,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 245,
                    y: 95,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 455,
                    y: 50,
                    w: 10,
                    h: 20,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 425,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 425,
                    y: 65,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 395,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 380,
                    y: 65,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 335,
                    y: 65,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 365,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 335,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 305,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 275,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 245,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 275,
                    y: 65,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 215,
                    y: 65,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 185,
                    y: 50,
                    w: 10,
                    h: 20,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 215,
                    y: 65,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 320,
                    y: 35,
                    w: 260,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 80,
                    y: 385,
                    w: 140,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 560,
                    y: 385,
                    w: 140,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 163,
                    y: 212,
                    id: 3,
                    c: "yellow",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 493,
                    y: 212,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 243,
                    y: 152,
                    id: 4,
                    c: "orange",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 413,
                    y: 152,
                    id: 4,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 201,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 231,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 261,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 291,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 321,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 351,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 382,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 412,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 440,
                    y: 49,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 411,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 381,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 351,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 321,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 291,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 261,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }, {
                    x: 231,
                    y: 79,
                    id: 1,
                    vx: 1,
                    vy: 1,
                    t: "reverse"
                }]
            },
            H = {
                time1: 33,
                items: {
                    wdouble: 1,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 1,
                    wsingle: 1,
                    elife: 1,
                    points3: 2,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 389,
                    id: 1
                }, {
                    x: 350,
                    y: 389,
                    id: 2
                }],
                walls: [{
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 228,
                    y: 109,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 318,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 288,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 258,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 228,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 198,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 168,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 418,
                    y: 109,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 508,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 478,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 448,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 418,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 388,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 358,
                    y: 79,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 457,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 487,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 517,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 547,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 577,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 607,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 38,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 68,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 98,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 128,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 158,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 188,
                    y: 36,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            z = {
                time1: 101,
                items: {
                    wdouble: 5,
                    etime: 2,
                    splain: 2,
                    points1: 5,
                    dynamite: 3,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 5,
                    whook: 5,
                    wsingle: 1,
                    elife: 1,
                    points3: 5,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }, {
                    x: 340,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 585,
                    y: 395,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 615,
                    y: 370,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 585,
                    y: 345,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 575,
                    y: 265,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 545,
                    y: 240,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 605,
                    y: 240,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 575,
                    y: 215,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 65,
                    y: 265,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 35,
                    y: 240,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 95,
                    y: 240,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 65,
                    y: 215,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 55,
                    y: 395,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 25,
                    y: 370,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 85,
                    y: 370,
                    w: 10,
                    h: 60,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 55,
                    y: 345,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 230,
                    y: 235,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 250,
                    y: 325,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 70,
                    y: 145,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 85,
                    y: 110,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 55,
                    y: 110,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 110,
                    y: 245,
                    w: 20,
                    h: 350,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 100,
                    y: 75,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 50,
                    y: 75,
                    w: 20,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 200,
                    y: 15,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "whook"
                }, {
                    x: 200,
                    y: 75,
                    w: 20,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 150,
                    y: 145,
                    w: 20,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 260,
                    y: 155,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 275,
                    y: 120,
                    w: 10,
                    h: 80,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 245,
                    y: 120,
                    w: 10,
                    h: 80,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 440,
                    y: 15,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "freeze"
                }, {
                    x: 440,
                    y: 75,
                    w: 20,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 390,
                    y: 325,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 420,
                    y: 235,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 490,
                    y: 145,
                    w: 20,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 390,
                    y: 155,
                    w: 20,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 405,
                    y: 120,
                    w: 10,
                    h: 80,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 375,
                    y: 120,
                    w: 10,
                    h: 80,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 570,
                    y: 145,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 585,
                    y: 110,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 555,
                    y: 110,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 530,
                    y: 245,
                    w: 20,
                    h: 350,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 590,
                    y: 75,
                    w: 20,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 540,
                    y: 75,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 555,
                    y: 370,
                    w: 10,
                    h: 60,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }],
                balls: [{
                    x: 256,
                    y: 97,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 256,
                    y: 87,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 256,
                    y: 107,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 384,
                    y: 97,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 386,
                    y: 107,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 386,
                    y: 87,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 57,
                    y: 371,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 63,
                    y: 364,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 46,
                    y: 364,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 584,
                    y: 364,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 594,
                    y: 372,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 81,
                    y: 230,
                    id: 1,
                    c: "bluegreen",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 77,
                    y: 246,
                    id: 1,
                    c: "bluegreen",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 57,
                    y: 246,
                    id: 1,
                    c: "bluegreen",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 67,
                    y: 236,
                    id: 1,
                    c: "bluegreen",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 578,
                    y: 236,
                    id: 1,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 581,
                    y: 249,
                    id: 1,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 590,
                    y: 229,
                    id: 1,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 565,
                    y: 233,
                    id: 1,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 72,
                    y: 64,
                    id: 1,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 571,
                    y: 64,
                    id: 1,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 326,
                    y: 250,
                    id: 5,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 54,
                    y: 230,
                    id: 1,
                    c: "bluegreen",
                    vx: -3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 561,
                    y: 249,
                    id: 1,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 577,
                    y: 372,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            V = {
                time1: 93,
                items: {
                    wdouble: 5,
                    etime: 2,
                    splain: 2,
                    points1: 1,
                    dynamite: 1,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 2,
                    whook: 2,
                    wsingle: 1,
                    elife: 1,
                    points3: 2,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 300,
                    y: 289,
                    id: 1
                }, {
                    x: 360,
                    y: 289,
                    id: 2
                }],
                walls: [{
                    x: 335,
                    y: 105,
                    w: 110,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "splain"
                }, {
                    x: 115,
                    y: 215,
                    w: 110,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 525,
                    y: 215,
                    w: 110,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 330,
                    y: 365,
                    w: 20,
                    h: 110,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 330,
                    y: 315,
                    w: 200,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 105,
                    y: 335,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 45,
                    y: 355,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 165,
                    y: 355,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 535,
                    y: 335,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 475,
                    y: 355,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 595,
                    y: 355,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 82,
                    y: 140,
                    id: 5,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 86,
                    y: 250,
                    id: 3,
                    c: "green",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 566,
                    y: 250,
                    id: 3,
                    c: "green",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 562,
                    y: 140,
                    id: 5,
                    c: "bluegreen",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }]
            },
            F = {
                time1: 78,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 3,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 2,
                    wsingle: 1,
                    elife: 1,
                    points3: 1,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 30,
                    y: 89,
                    id: 1
                }, {
                    x: 50,
                    y: 89,
                    id: 2
                }],
                walls: [{
                    x: 65,
                    y: 395,
                    w: 10,
                    h: 50,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 40,
                    y: 365,
                    w: 60,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 320,
                    y: 165,
                    w: 540,
                    h: 10,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 20,
                    moving_start_direct: "diag",
                    moving_start_pos: "tr",
                    moving_width: 20,
                    moving_origin_x: 320,
                    moving_origin_y: 165,
                    moving_origin_w: 540,
                    moving_origin_h: 10
                }, {
                    x: 320,
                    y: 275,
                    w: 540,
                    h: 10,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 20,
                    moving_start_direct: "diag",
                    moving_start_pos: "tr",
                    moving_width: 20,
                    moving_origin_x: 320,
                    moving_origin_y: 275,
                    moving_origin_w: 540,
                    moving_origin_h: 10
                }, {
                    x: 605,
                    y: 55,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 320,
                    y: 225,
                    w: 540,
                    h: 10,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 20,
                    moving_start_direct: "diag",
                    moving_start_pos: "tl",
                    moving_width: 20,
                    moving_origin_x: 320,
                    moving_origin_y: 225,
                    moving_origin_w: 540,
                    moving_origin_h: 10
                }, {
                    x: 575,
                    y: 35,
                    w: 10,
                    h: 50,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 115,
                    w: 520,
                    h: 10,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 40,
                    moving_start_direct: "diag",
                    moving_start_pos: "tr",
                    moving_width: 50,
                    moving_origin_x: 320,
                    moving_origin_y: 115,
                    moving_origin_w: 520,
                    moving_origin_h: 10,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 605,
                    y: 115,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 35,
                    y: 115,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 35,
                    y: 395,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b"
                }, {
                    x: 35,
                    y: 35,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "a"
                }],
                balls: [{
                    x: 281,
                    y: 112,
                    id: 2,
                    c: "pink",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 331,
                    y: 112,
                    id: 2,
                    c: "pink",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 381,
                    y: 112,
                    id: 2,
                    c: "pink",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 381,
                    y: 162,
                    id: 2,
                    c: "pink",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 331,
                    y: 162,
                    id: 2,
                    c: "pink",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 281,
                    y: 162,
                    id: 2,
                    c: "pink",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 213,
                    y: 379,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 113,
                    y: 379,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 163,
                    y: 379,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 163,
                    y: 329,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 113,
                    y: 329,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 63,
                    y: 329,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 431,
                    y: 82,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 331,
                    y: 82,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 381,
                    y: 82,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 381,
                    y: 32,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 331,
                    y: 32,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 281,
                    y: 32,
                    id: 2,
                    c: "pink",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 602,
                    y: 26,
                    id: 2,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }]
            },
            X = {
                time1: 37,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 3,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 2,
                    wsingle: 1,
                    elife: 1,
                    points3: 1,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 40,
                    y: 109,
                    id: 1
                }, {
                    x: 40,
                    y: 109,
                    id: 2
                }],
                walls: [{
                    x: 315,
                    y: 65,
                    w: 10,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 35,
                    y: 55,
                    w: 50,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "whook"
                }, {
                    x: 315,
                    y: 35,
                    w: 10,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "wdouble"
                }, {
                    x: 275,
                    y: 25,
                    w: 10,
                    h: 30,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 295,
                    y: 35,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 315,
                    y: 45,
                    w: 10,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "medal"
                }, {
                    x: 315,
                    y: 245,
                    w: 30,
                    h: 10,
                    t: "spikeall",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 355,
                    y: 25,
                    w: 10,
                    h: 30,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 335,
                    y: 35,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 320,
                    y: 255,
                    w: 520,
                    h: 210,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 60,
                    moving_start_direct: "cw",
                    moving_start_pos: "bl",
                    moving_width: 50,
                    moving_origin_x: 320,
                    moving_origin_y: 255,
                    moving_origin_w: 520,
                    moving_origin_h: 210
                }, {
                    x: 35,
                    y: 135,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 315,
                    y: 55,
                    w: 10,
                    h: 10,
                    t: "breakable",
                    softWall: !0,
                    itemDrop: "points3"
                }, {
                    x: 320,
                    y: 415,
                    w: 620,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }],
                balls: [{
                    x: 320,
                    y: 16,
                    id: 1,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            j = {
                time1: 55,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 3,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 2,
                    wsingle: 1,
                    elife: 1,
                    points3: 1,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 330,
                    y: 399,
                    id: 1
                }, {
                    x: 370,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 455,
                    y: 115,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow"
                }, {
                    x: 315,
                    y: 115,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow"
                }, {
                    x: 175,
                    y: 115,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow"
                }, {
                    x: 35,
                    y: 245,
                    w: 50,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 35,
                    y: 265,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "a",
                    teleport_dest: "b",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 605,
                    y: 165,
                    w: 50,
                    h: 50,
                    t: "teleport",
                    softWall: !0,
                    teleport_name: "b",
                    teleport_dest: "a"
                }, {
                    x: 455,
                    y: 150,
                    w: 30,
                    h: 80,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 40,
                    moving_start_direct: "diag",
                    moving_start_pos: "bl",
                    moving_width: 30,
                    moving_origin_x: 455,
                    moving_origin_y: 150,
                    moving_origin_w: 30,
                    moving_origin_h: 80,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    },
                    spikey: !0
                }, {
                    x: 385,
                    y: 150,
                    w: 30,
                    h: 80,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 40,
                    moving_start_direct: "diag",
                    moving_start_pos: "tl",
                    moving_width: 30,
                    moving_origin_x: 385,
                    moving_origin_y: 150,
                    moving_origin_w: 30,
                    moving_origin_h: 80,
                    spikey: !0
                }, {
                    x: 315,
                    y: 150,
                    w: 30,
                    h: 80,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 35,
                    moving_start_direct: "diag",
                    moving_start_pos: "bl",
                    moving_width: 30,
                    moving_origin_x: 315,
                    moving_origin_y: 150,
                    moving_origin_w: 30,
                    moving_origin_h: 80,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    },
                    spikey: !0
                }, {
                    x: 245,
                    y: 150,
                    w: 30,
                    h: 80,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 25,
                    moving_start_direct: "diag",
                    moving_start_pos: "bl",
                    moving_width: 30,
                    moving_origin_x: 245,
                    moving_origin_y: 150,
                    moving_origin_w: 30,
                    moving_origin_h: 80,
                    spikey: !0
                }, {
                    x: 175,
                    y: 150,
                    w: 30,
                    h: 80,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 40,
                    moving_start_direct: "diag",
                    moving_start_pos: "bl",
                    moving_width: 30,
                    moving_origin_x: 175,
                    moving_origin_y: 150,
                    moving_origin_w: 30,
                    moving_origin_h: 80,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    },
                    spikey: !0
                }, {
                    x: 345,
                    y: 105,
                    w: 570,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }, {
                    x: 30,
                    y: 140,
                    w: 20,
                    h: 100,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0
                }, {
                    x: 605,
                    y: 95,
                    w: 50,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 565,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 535,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 505,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 475,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 445,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 415,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 385,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 355,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 325,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 295,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 265,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 235,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 205,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 175,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 145,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 115,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 85,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 55,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 25,
                    y: 95,
                    w: 30,
                    h: 10,
                    t: "timed",
                    softWall: !0
                }, {
                    x: 320,
                    y: 195,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 55,
                    y: 360,
                    w: 10,
                    h: 120,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow"
                }, {
                    x: 105,
                    y: 150,
                    w: 30,
                    h: 80,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 35,
                    moving_start_direct: "diag",
                    moving_start_pos: "tl",
                    moving_width: 30,
                    moving_origin_x: 105,
                    moving_origin_y: 150,
                    moving_origin_w: 30,
                    moving_origin_h: 80,
                    spikey: !0
                }, {
                    x: 540,
                    y: 305,
                    w: 20,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 540,
                    y: 355,
                    w: 20,
                    h: 130,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "bluegreen"
                    }
                }, {
                    x: 320,
                    y: 295,
                    w: 620,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }],
                balls: [{
                    x: 418,
                    y: 217,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 328,
                    y: 217,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 248,
                    y: 217,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 158,
                    y: 217,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 208,
                    y: 21,
                    id: 1,
                    c: "yellow",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 357,
                    y: 21,
                    id: 1,
                    c: "yellow",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 249,
                    y: 330,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 124,
                    y: 330,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: -3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 573,
                    y: 342,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1
                }, {
                    x: 612,
                    y: 21,
                    id: 1,
                    c: "yellow",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 30,
                    y: 367,
                    id: 1,
                    c: "red",
                    vx: 0,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 498,
                    y: 217,
                    id: 2,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            q = {
                time1: 120,
                items: {
                    wdouble: 2,
                    etime: 1,
                    splain: 2,
                    points1: 1,
                    dynamite: 3,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 1,
                    whook: 2,
                    wsingle: 1,
                    elife: 1,
                    points3: 1,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {
                    normal: {
                        green: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 10, 255, 155, 195, 235]
                        },
                        orange: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 10, 255, 155, 195, 235]
                        },
                        blue: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 10, 255, 155, 195, 235]
                        },
                        yellow: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 10, 255, 155, 195, 235]
                        }
                    }
                },
                players: [{
                    x: 30,
                    y: 89,
                    id: 1
                }, {
                    x: 610,
                    y: 89,
                    id: 2
                }],
                walls: [{
                    x: 565,
                    y: 95,
                    w: 10,
                    h: 30,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 550,
                    y: 75,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 110,
                    y: 275,
                    w: 80,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 375,
                    y: 355,
                    w: 10,
                    h: 50,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 385,
                    y: 325,
                    w: 390,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 610,
                    y: 325,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 85,
                    y: 285,
                    w: 30,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    spikey: !0
                }, {
                    x: 585,
                    y: 350,
                    w: 10,
                    h: 60,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "pink"
                }, {
                    x: 375,
                    y: 385,
                    w: 430,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 350,
                    y: 415,
                    w: 480,
                    h: 10,
                    t: "sticky"
                }, {
                    x: 610,
                    y: 415,
                    w: 40,
                    h: 10,
                    t: "trampoline",
                    softWall: !0
                }, {
                    x: 155,
                    y: 335,
                    w: 10,
                    h: 110,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 85,
                    y: 415,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow"
                }, {
                    x: 25,
                    y: 405,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 45,
                    y: 375,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 25,
                    y: 345,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 45,
                    y: 315,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 25,
                    y: 285,
                    w: 10,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 130,
                    y: 305,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "orange"
                }, {
                    x: 105,
                    y: 350,
                    w: 10,
                    h: 140,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 390,
                    y: 275,
                    w: 480,
                    h: 10,
                    t: "convbelt",
                    softWall: !1,
                    convBeltSpeed: -6
                }, {
                    x: 270,
                    y: 235,
                    w: 520,
                    h: 10,
                    t: "convbelt",
                    softWall: !1,
                    convBeltSpeed: 6
                }, {
                    x: 355,
                    y: 195,
                    w: 550,
                    h: 10,
                    t: "convbelt",
                    softWall: !1,
                    convBeltSpeed: -6
                }, {
                    x: 135,
                    y: 135,
                    w: 10,
                    h: 30,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "blue"
                }, {
                    x: 105,
                    y: 135,
                    w: 10,
                    h: 30,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 315,
                    y: 155,
                    w: 530,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 535,
                    y: 95,
                    w: 10,
                    h: 30,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green"
                }, {
                    x: 365,
                    y: 115,
                    w: 530,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 35,
                    y: 35,
                    w: 10,
                    h: 50,
                    t: "breakable",
                    softWall: !0
                }, {
                    x: 300,
                    y: 45,
                    w: 580,
                    h: 10,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 65,
                    y: 80,
                    w: 10,
                    h: 60,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 40,
                    y: 115,
                    w: 60,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 85,
                    y: 355,
                    w: 30,
                    h: 130,
                    t: "moving",
                    softWall: !1,
                    moving_speed: 10,
                    moving_start_direct: "diag",
                    moving_start_pos: "bl",
                    moving_width: 30,
                    moving_origin_x: 85,
                    moving_origin_y: 355,
                    moving_origin_w: 30,
                    moving_origin_h: 130,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 260,
                    y: 355,
                    w: 220,
                    h: 50,
                    t: "caveinbs3",
                    softWall: !0,
                    cavein_space: 0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "bluegreen"
                    }
                }, {
                    x: 175,
                    y: 325,
                    w: 30,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }, {
                    x: 65,
                    y: 345,
                    w: 10,
                    h: 150,
                    t: "normal",
                    softWall: !1
                }, {
                    x: 165,
                    y: 275,
                    w: 10,
                    h: 10,
                    t: "switch",
                    softWall: !1,
                    eType: "color_popped",
                    eInfo: "bluegreen"
                }, {
                    x: 585,
                    y: 300,
                    w: 10,
                    h: 40,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "purple"
                }, {
                    x: 35,
                    y: 415,
                    w: 50,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }, {
                    x: 30,
                    y: 155,
                    w: 40,
                    h: 10,
                    t: "spikeall",
                    softWall: !0
                }],
                balls: [{
                    x: 473,
                    y: 354,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 533,
                    y: 354,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 120,
                    y: 135,
                    id: 1,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 552,
                    y: 94,
                    id: 1,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 273,
                    y: 354,
                    id: 3,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 21,
                    y: 23,
                    id: 1,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 83,
                    y: 398,
                    id: 1,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 131,
                    y: 288,
                    id: 1,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 503,
                    y: 354,
                    id: 2,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 608,
                    y: 306,
                    id: 1,
                    c: "bluegreen",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            },
            J = {
                time1: 333,
                items: {
                    wdouble: 5,
                    etime: 2,
                    splain: 2,
                    points1: 5,
                    dynamite: 3,
                    wlaser: 1,
                    freeze: 1,
                    stime: 1,
                    speed: 1,
                    points2: 5,
                    whook: 5,
                    wsingle: 1,
                    elife: 1,
                    points3: 5,
                    sinvi: 1
                },
                item_prob: 3,
                ballInfo: {},
                players: [{
                    x: 310,
                    y: 399,
                    id: 1
                }, {
                    x: 360,
                    y: 399,
                    id: 2
                }],
                walls: [{
                    x: 455,
                    y: 315,
                    w: 170,
                    h: 170,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 65,
                    moving_start_direct: "ccw",
                    moving_start_pos: "br",
                    moving_width: 50,
                    moving_origin_x: 455,
                    moving_origin_y: 315,
                    moving_origin_w: 170,
                    moving_origin_h: 170,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 195,
                    y: 315,
                    w: 170,
                    h: 170,
                    t: "moving",
                    softWall: !0,
                    moving_speed: 75,
                    moving_start_direct: "cw",
                    moving_start_pos: "tl",
                    moving_width: 50,
                    moving_origin_x: 195,
                    moving_origin_y: 315,
                    moving_origin_w: 170,
                    moving_origin_h: 170,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 550,
                    y: 335,
                    w: 20,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 440,
                    y: 335,
                    w: 20,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 330,
                    y: 335,
                    w: 20,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 210,
                    y: 335,
                    w: 20,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 90,
                    y: 335,
                    w: 20,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "yellow",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 545,
                    y: 345,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 95,
                    y: 345,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 325,
                    y: 345,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 435,
                    y: 295,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 205,
                    y: 295,
                    w: 30,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "green",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 540,
                    y: 305,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 420,
                    y: 245,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 330,
                    y: 335,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 230,
                    y: 245,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 110,
                    y: 305,
                    w: 40,
                    h: 10,
                    t: "switch",
                    softWall: !0,
                    eType: "color_popped",
                    eInfo: "bluegreen",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 260,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 210,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    }
                }, {
                    x: 160,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 110,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "bluegreen"
                    }
                }, {
                    x: 30,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    }
                }, {
                    x: 30,
                    y: 255,
                    w: 20,
                    h: 330,
                    t: "ladder",
                    softWall: !0,
                    ladderP1: !0,
                    ladderP2: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 70,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 310,
                    y: 95,
                    w: 40,
                    h: 10,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 325,
                    y: 25,
                    w: 10,
                    h: 30,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 295,
                    y: 25,
                    w: 10,
                    h: 30,
                    t: "normal",
                    softWall: !0
                }, {
                    x: 310,
                    y: 35,
                    w: 20,
                    h: 10,
                    t: "breakable",
                    softWall: !0
                }],
                balls: [{
                    x: 91,
                    y: 147,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 201,
                    y: 147,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 271,
                    y: 147,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 341,
                    y: 147,
                    id: 1,
                    c: "red",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 351,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 481,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 541,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 421,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 291,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 181,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 71,
                    y: 47,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "yellow"
                    }
                }, {
                    x: 41,
                    y: 62,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 261,
                    y: 62,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 151,
                    y: 62,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 551,
                    y: 172,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 291,
                    y: 182,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 431,
                    y: 182,
                    id: 3,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 151,
                    y: 172,
                    id: 2,
                    c: "yellow",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "green"
                    },
                    splitWay: 4
                }, {
                    x: 83,
                    y: 192,
                    id: 3,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 183,
                    y: 192,
                    id: 3,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 363,
                    y: 192,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 463,
                    y: 192,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 563,
                    y: 192,
                    id: 3,
                    c: "green",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 283,
                    y: 192,
                    id: 3,
                    c: "green",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "pink"
                    }
                }, {
                    x: 199,
                    y: 184,
                    id: 5,
                    c: "pink",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "bluegreen"
                    }
                }, {
                    x: 529,
                    y: 184,
                    id: 5,
                    c: "pink",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "bluegreen"
                    }
                }, {
                    x: 403,
                    y: 102,
                    id: 2,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 283,
                    y: 222,
                    id: 2,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 83,
                    y: 222,
                    id: 2,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 353,
                    y: 172,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 303,
                    y: 172,
                    id: 3,
                    c: "bluegreen",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 533,
                    y: 62,
                    id: 3,
                    c: "bluegreen",
                    vx: -3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 193,
                    y: 62,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 193,
                    y: 172,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 533,
                    y: 172,
                    id: 3,
                    c: "bluegreen",
                    vx: 3,
                    vy: 3,
                    t: "penta",
                    rot: 1,
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "blue"
                    }
                }, {
                    x: 266,
                    y: 160,
                    id: 3,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    },
                    splitWay: 4
                }, {
                    x: 556,
                    y: 160,
                    id: 3,
                    c: "blue",
                    vx: -1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    },
                    splitWay: 4
                }, {
                    x: 126,
                    y: 160,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    },
                    splitWay: 4
                }, {
                    x: 426,
                    y: 160,
                    id: 3,
                    c: "blue",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "orange"
                    },
                    splitWay: 4
                }, {
                    x: 531,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 471,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 401,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 341,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 281,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 221,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 161,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 101,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 41,
                    y: 120,
                    id: 2,
                    c: "orange",
                    vx: 1,
                    vy: 1,
                    t: "normal",
                    stateData: {
                        stateStart: "inact",
                        stateEvtType: "color_popped",
                        stateEvtInfo: "purple"
                    }
                }, {
                    x: 271,
                    y: 200,
                    id: 4,
                    c: "purple",
                    vx: -1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 391,
                    y: 200,
                    id: 4,
                    c: "purple",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 311,
                    y: 17,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 311,
                    y: 17,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 311,
                    y: 17,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }, {
                    x: 311,
                    y: 17,
                    id: 1,
                    c: "red",
                    vx: 1,
                    vy: 1,
                    t: "normal"
                }]
            };
        J.extra = i.a
    },
    1140: function(e, t, a) {
        "use strict";
        a.r(t);
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(8),
            c = a(21),
            m = a(28),
            u = a(0),
            g = a(9),
            v = a(48),
            f = a(4),
            S = a(67),
            E = a(58),
            x = a(36),
            T = a(136),
            b = a(2),
            k = a(110),
            w = a(20),
            I = function(e) {
                function t() {
                    return s()(this, t), r()(this, p()(t).call(this, {
                        key: "BS3_LevelSelect"
                    }))
                }
                return y()(t, e), l()(t, [{
                    key: "create",
                    value: function() {
                        this.myTransition = new v.a(this).transitionOpen();
                        new S.a(this);
                        w.a.isLazyLoaded ? this._drawLazyStuff() : w.a.sceneLink.events.once(w.a.EVT_LOADED, this._drawLazyStuff, this);
                        for (var e = .6 * u.a.gameWidth, t = 408 / 9, a = u.a.gameHeight / 2 - 217 + 27, i = e - 214 + 23.666666666666668, s = Object(k.a)(_.a.currentMode), n = 0; n < 8; n++)
                            for (var l = 0; l < 9; l++) {
                                var o = 9 * n + l + 1;
                                if (null == s["lvl" + o]) break;
                                var r = new c.a(this, i + 428 * l / 9, a + 434 * n / 8, t, 52, {
                                    text: o,
                                    size: 32,
                                    fixY: 0
                                }, this.btn_startGame.bind(this, o));
                                f.a.gameSettings.maxLevelUnlocked[_.a.currentMode] < o && !b.a.deselectItem && (r.buttonIsActive = !1, r.myText.alpha = .35, r.backgroundNinePatch.ninePatch.alpha = .35), f.a.gameSettings.lastLevelPlayed[_.a.currentMode] == o && (this.tweens.add({
                                    targets: [r.myText, r.backgroundNinePatch.ninePatch],
                                    scale: 1.1,
                                    ease: "Sine.easeIn",
                                    duration: 450,
                                    loop: -1,
                                    yoyo: !0
                                }), x.a.selectButton(r))
                            }
                        new c.a(this, 70, 435, 100, 47, {
                            text: m.a.BT1.SETTINGS_BACK,
                            size: 32,
                            fixY: 0
                        }, this.myTransition.transitionToggle.bind(this.myTransition, !1, "BS3_MainMenu")), new E.a(this, 90, 45);
                        T.a.showNews(this)
                    }
                }, {
                    key: "btn_startGame",
                    value: function(e) {
                        _.a.newGame(_.a.currentMode, e), this.myTransition.transitionToggle(!1, "GameScene")
                    }
                }, {
                    key: "_drawLazyStuff",
                    value: function() {
                        this.add.sprite(.5 * u.a.gameWidth, .5 * u.a.gameHeight, "mainmenu_background");
                        this.add.sprite(.62 * u.a.gameWidth, .5 * u.a.gameHeight, u.a.lazySpriteKey, "ui/spotlight.png").alpha = .2;
                        new g.a(this, 50, 417, u.a.lazySpriteKey, "ani_torch/torch_1.png", 1.3);
                        new g.a(this, 541, 423, u.a.lazySpriteKey, "ani_torch/torch_1.png", 1.3).flipX = !0;
                        var e = new g.a(this, 412, 451, u.a.lazySpriteKey, "ui/menu_start1.png");
                        _.a.currentMode == _.a.MODES.TWOP && e.setFrame("ui/menu_start2.png");
                        var t = new Phaser.Geom.Rectangle(-20, -20, u.a.gameWidth + 40, u.a.gameHeight + 40),
                            a = this.add.graphics();
                        a.fillStyle(0, .65), a.fillRectShape(t)
                    }
                }]), t
            }(Phaser.Scene);
        t.default = I
    },
    1141: function(e, t, a) {
        "use strict";
        a.r(t);
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(21),
            c = a(28),
            m = a(0),
            u = a(48),
            g = a(9),
            v = a(20),
            f = a(14),
            S = a(1),
            E = (a(247), a(31), a(18), a(29), a(2), a(176)),
            x = function(e) {
                function t() {
                    return s()(this, t), r()(this, p()(t).call(this, {
                        key: "BS3_Help"
                    }))
                }
                return y()(t, e), l()(t, [{
                    key: "create",
                    value: function() {
                        (this.myTransition = new u.a(this).transitionOpen(), this.cameras.main.scrollX = f.a.cameraOffset.x, this.cameras.main.scrollY = f.a.cameraOffset.y, v.a.isLazyLoaded) && (this.add.sprite(.5 * m.a.gameWidth, .5 * m.a.gameHeight, "mainmenu_background").alpha = .35);
                        new _.a(this, 575, 440, 100, 62, {
                            text: c.a.BS2.MENU_BACK,
                            size: 36,
                            fixY: 0
                        }, this.myTransition.transitionToggle.bind(this.myTransition, !1, "BS3_MainMenu"), null, null, !0, !0);
                        new E.a(this, null, 440), this.add.bitmapText(m.a.gameWidth / 2, 28, m.a.fontNames.MENU, "- BONUS DROPS -", 35).setOrigin(.5, .5);
                        for (var e = [{
                                name: "500 points",
                                sprite: S.a.ITEM_TYPE.POINTS1
                            }, {
                                name: "1000 points",
                                sprite: S.a.ITEM_TYPE.POINTS2
                            }, {
                                name: "1500 points",
                                sprite: S.a.ITEM_TYPE.POINTS3
                            }, {
                                name: "dynamite",
                                sprite: S.a.ITEM_TYPE.DYNAMITE,
                                desc: "pops all bubbles to smallest size"
                            }, {
                                name: "extra life",
                                sprite: S.a.ITEM_TYPE.E_LIFE
                            }, {
                                name: "freezer",
                                sprite: S.a.ITEM_TYPE.FREEZE,
                                desc: "stops all bubbles"
                            }, {
                                name: "shield",
                                sprite: S.a.ITEM_TYPE.S_PLAIN,
                                desc: "invincibility until hit by a bubble"
                            }, {
                                name: "shield, invincible",
                                sprite: S.a.ITEM_TYPE.S_INVI,
                                desc: "invincibility, lasts 8 seconds"
                            }, {
                                name: "boots",
                                sprite: S.a.ITEM_TYPE.SPEED,
                                desc: "Move fast. Can walk on spikes."
                            }, {
                                name: "slow motion",
                                sprite: S.a.ITEM_TYPE.S_TIME,
                                desc: "slows down bubbles"
                            }, {
                                name: "extra time",
                                sprite: S.a.ITEM_TYPE.E_TIME
                            }, {
                                name: "single harpoon weapon",
                                sprite: S.a.ITEM_TYPE.W_SINGLE
                            }, {
                                name: "double harpoon weapon",
                                sprite: S.a.ITEM_TYPE.W_DOUBLE
                            }, {
                                name: "ice wine weapon",
                                sprite: S.a.ITEM_TYPE.W_HOOK
                            }, {
                                name: "star weapon",
                                sprite: S.a.ITEM_TYPE.W_LASER
                            }, {
                                name: "medal",
                                sprite: S.a.ITEM_TYPE.MEDAL,
                                desc: "pops all bubbles"
                            }], t = 0, a = 0, i = 0; i < e.length; i++) {
                            8 == i && (t = 0, a = 1);
                            var s = 50 + 330 * a,
                                n = 70 + 45 * t;
                            new g.a(this, s, n, m.a.spriteKey, "items/" + e[i].sprite + ".png");
                            var l = e[i].name;
                            m.a.isBS3 && (l = l.toUpperCase());
                            var o = this.add.bitmapText(s + 20, n, m.a.fontNames.MENU, l, 25);
                            if (o.setOrigin(0, .5), null != e[i].desc) {
                                var r = e[i].desc;
                                m.a.isBS3 && (r = r.toUpperCase());
                                var h = this.add.bitmapText(s + 20, n + 20, m.a.fontNames.MENU, r, 19);
                                h.setOrigin(0, .5), h.alpha = .6, o.y -= 10, h.y -= 10
                            }
                            t++
                        }
                    }
                }]), t
            }(Phaser.Scene);
        t.default = x
    },
    1145: function(e, t, a) {
        "use strict";
        a.r(t);
        var i = a(120),
            s = a.n(i),
            n = a(0),
            l = a(250),
            o = a(20),
            r = a(78),
            h = a(5),
            p = a.n(h),
            d = a(6),
            y = a.n(d),
            _ = a(10),
            c = a.n(_),
            m = a(7),
            u = a.n(m),
            g = a(11),
            v = a.n(g),
            f = a(2),
            S = a(8),
            E = a(4),
            x = function(e) {
                function t() {
                    return p()(this, t), c()(this, u()(t).call(this, {
                        key: "TitleScene"
                    }))
                }
                return v()(t, e), y()(t, [{
                    key: "create",
                    value: function() {
                        f.a.log("TITLE_SCENE", "Created Titlescene..", n.a.shortName);
                        var e = document.getElementById("bt-preloader");
                        if (null != e && (e.hidden = !0, e.parentNode.removeChild(e)), document.getElementById("bubble-trouble").style.display = "block", window.myResize(), 0 == E.a.gameSettings.maxLevelUnlocked[S.a.MODES.SINGLE] || f.a.alwaysShowControls) return S.a.newGame(S.a.MODES.SINGLE, 1), void this.scene.start("GameScene");
                        n.a.isBT ? this.scene.start("BT1_MainMenu") : n.a.isBS2 ? this.scene.start("BS2_MainMenu") : n.a.isBS3 && this.scene.start("BS3_MainMenu")
                    }
                }]), t
            }(Phaser.Scene),
            T = a(40),
            b = a.n(T),
            k = a(82),
            w = function(e) {
                function t() {
                    var e;
                    return p()(this, t), e = c()(this, u()(t).call(this, {
                        key: "FillerAdScene"
                    })), k.a.adScene = b()(e), e
                }
                return v()(t, e), y()(t, [{
                    key: "init",
                    value: function() {
                        window.myResize()
                    }
                }]), t
            }(Phaser.Scene),
            I = a(23),
            P = a(21),
            A = a(28),
            L = a(9),
            M = a(48),
            O = a(67),
            D = a(24),
            B = a(12),
            R = a(14),
            W = a(15),
            N = a(103),
            C = a(3),
            U = function() {
                function e(t, a, i, s) {
                    p()(this, e), f.a.log("EDITOR MESSAGE", t, a, i), a == e.MES_TYPE.INFO && this._showInfo(t, i)
                }
                return y()(e, [{
                    key: "_showInfo",
                    value: function(e, t) {
                        var a = n.a.gameHeight / 2,
                            i = e.add.graphics();
                        i.lineStyle(2, 14867459), i.fillStyle(0, .9), i.strokeRect(-1e3, a, n.a.gameWidth + 2e3, 30), i.fillRect(-1e3, a, n.a.gameWidth + 2e3, 30), C.a.mySpriteDepth(C.a.RENDER_DEPTH.UIOVER, i);
                        var s = 0;
                        n.a.isBT && (s = 6);
                        var l = e.add.bitmapText(n.a.gameWidth / 2, a + s, n.a.fontNames.MENU, t, 25);
                        l.setOrigin(.5, 0), C.a.mySpriteDepth(C.a.RENDER_DEPTH.UIOVER, l), i.alpha = 0, l.alpha = 0;
                        e.add.tween({
                            targets: [i, l],
                            alpha: 1,
                            duration: 200
                        }), e.add.tween({
                            targets: [i, l],
                            alpha: 0,
                            duration: 200,
                            delay: 1400
                        })
                    }
                }]), e
            }();
        U.MES_TYPE = {
            INFO: "info",
            CONFIRM: "confirm",
            INPUT: "input"
        };
        var Y = U,
            K = a(29),
            G = a(74),
            H = a(1),
            z = function(e) {
                function t() {
                    return p()(this, t), c()(this, u()(t).call(this, {
                        key: "MyTasksScene"
                    }))
                }
                return v()(t, e), y()(t, [{
                    key: "create",
                    value: function() {
                        this.myTransition = new M.a(this).transitionOpen();
                        new O.a(this, !1);
                        if (n.a.isBS3) {
                            this.add.sprite(.5 * n.a.gameWidth, .5 * n.a.gameHeight, "mainmenu_background"), new L.a(this, 412, 451, n.a.lazySpriteKey, "ui/menu_start1.png");
                            var e = new Phaser.Geom.Rectangle(-20, -20, n.a.gameWidth + 40, n.a.gameHeight + 40),
                                t = this.add.graphics();
                            t.fillStyle(0, .65), t.fillRectShape(e)
                        }
                        if (this._taskCellRenders = [], this.gridStartX = 0 + R.a.notchOffset, this.gridStartY = 180, this.gridCols = 3.5, this.gridRows = 3, this.cellWidth = n.a.gameWidth / this.gridCols, this.cellHeight = (n.a.gameHeight - this.gridStartY) / this.gridRows, this.cellOffsetBorder = 1, this.cellOffsetText = 3, this.cellOffsetCheckmarkX = this.cellWidth - 30, this.cellOffsetCheckmarkY = this.cellHeight - 20, this.cellOffsetPinX = this.cellWidth - 4, this.cellOffsetPinY = 2, this.cellDefaultStrokeCol = 3487285, n.a.isBS3 && (this.cellDefaultStrokeCol = 7090600), this.cellBubbleMasterStrokeCol = 14475273, n.a.isBS3 && (this.cellBubbleMasterStrokeCol = 14569303), this.cellDefaultBackCol = 6119517, n.a.isBS3 && (this.cellDefaultBackCol = 988996), this.cellCompletedBackCol = 5876480, n.a.isBS3 && (this.cellCompletedBackCol = 7090600), this.cellCompletedStrokeCol = 3169536, n.a.isBS3 && (this.cellCompletedStrokeCol = 14403313), this.cellCollectedBackCol = 2574848, n.a.isBS3 && (this.cellCollectedBackCol = 4426479), this.cellPinnedBackCol = 9568444, n.a.isBS3 && (this.cellPinnedBackCol = 3699837), this.cellBubbleMasterCol = 14037563, n.a.isBS3 && (this.cellBubbleMasterCol = 10961322), this._animateXpCount_Tween = null, this.tasksContainer = null, this.badgesWidth = 0, this.badgesPositionX = 0, this._createBadges(), this._renderTasks(), this.makeTasksScrollable(), this.renderBubbleMasterCheckmark(), this.sys.events.once("shutdown", N.a.save), n.a.isBT) {
                            var a = new I.a(this, 70 + R.a.notchOffset, 45, 130, 77, "ui/main_menu_back.png", {
                                top: 30,
                                bottom: 30,
                                left: 30,
                                right: 30
                            });
                            C.a.mySpriteDepth(C.a.RENDER_DEPTH.UIOVER, a.ninePatch)
                        }
                        var i = 6;
                        (n.a.isBS2 || n.a.isBS3) && (i = 0);
                        var s = new P.a(this, 70 + R.a.notchOffset, 45, 100, 47, {
                            text: A.a.BT1.SETTINGS_BACK,
                            size: 32,
                            fixY: i
                        }, this.backToMainMenu.bind(this), null, null, !1, !0);
                        C.a.mySpriteDepth(C.a.RENDER_DEPTH.UIOVER, s.backgroundNinePatch.ninePatch), C.a.mySpriteDepth(C.a.RENDER_DEPTH.UIOVER, s.myText), C.a.mySpriteDepth(C.a.RENDER_DEPTH.UIOVER, s.focusedNinePatch.ninePatch);
                        var l = 40 + R.a.notchOffset;
                        (n.a.isBS2 || n.a.isBS3) && (l = 52 + R.a.notchOffset);
                        new G.a.shareSceneButton(this, l, 130, .8, H.a.SHARE_TYPE.RANK)
                    }
                }, {
                    key: "_createBadges",
                    value: function() {
                        var e = .5 * n.a.gameWidth,
                            t = 190;
                        this.badges = [], this.badgesPositionX = e - D.a.CurrentLevel * t - t;
                        for (var a = this.badgesPositionX, i = 0; i < D.a.RANK_NAMES.length; i++) {
                            a += t, this.badgesWidth += t;
                            var s = null;
                            n.a.isBS3 && 6 == i && (s = 1.15);
                            var l = D.a.renderBadge(this, a, 90, i, !1, s);
                            if (i < D.a.RANK_NAMES.length - 1 && i >= D.a.CurrentLevel) {
                                var o = new L.a(this, a + 95, 90, n.a.lazySpriteKey, "retention/arrow.png");
                                l.arrow = o, i == D.a.CurrentLevel && (o.x += 25, a += 25)
                            }
                            this.badges.push(l)
                        }
                        this.makeBadgesScrollable()
                    }
                }, {
                    key: "_renderTasks",
                    value: function() {
                        this._taskCellRenders = [], this.tasksContainer = this.add.container();
                        for (var e = 0, t = 0, a = 0; a < B.a._TASKS[D.a.CurrentLevel].length; a++) {
                            e == this.gridRows && (t++, e = 0);
                            var i = B.a._TASKS[D.a.CurrentLevel][a],
                                s = this._renderTaskCell(i, t, e);
                            this._taskCellRenders.push(s), e++
                        }
                    }
                }, {
                    key: "_renderTaskCell",
                    value: function(e, t, a) {
                        var i = t * this.cellWidth,
                            s = a * this.cellHeight,
                            l = this.gridStartX + i + this.cellOffsetBorder,
                            o = this.gridStartY + s + this.cellOffsetBorder,
                            r = this._renderTaskBackground(l, o, e),
                            h = this.add.bitmapText(l + this.cellOffsetText, o + this.cellOffsetText, n.a.fontNames.MENU, e.taskDescr, 20);
                        h.maxWidth = this.cellWidth - 2 * this.cellOffsetText, h.letterSpacing = -1;
                        var p = new L.a(this, l + this.cellOffsetCheckmarkX, o + this.cellOffsetCheckmarkY, n.a.lazySpriteKey, "retention/checkmark.png"),
                            d = new L.a(this, l + this.cellOffsetPinX, o + this.cellOffsetPinY, n.a.lazySpriteKey, "retention/pin_task.png");
                        d.setOrigin(1, 0);
                        var y = this.add.graphics();
                        this.tasksContainer.add([h, p, d, y]);
                        var _ = {
                                calcedX: l,
                                calcedY: o,
                                currentVal: e.methods.getValue(),
                                task: e,
                                backGraphics: r,
                                checkmark: p,
                                pinSprite: d,
                                pinButton: y
                            },
                            c = this;
                        return y.setInteractive({
                            useHandCursor: !0,
                            hitArea: new Phaser.Geom.Rectangle(l, o, this.cellWidth, this.cellHeight),
                            hitAreaCallback: Phaser.Geom.Rectangle.Contains
                        }), y.on("pointerup", (function(t) {
                            if (c.tasksContainer_savex == c.tasksContainer.x && 0 == c.tasksContainer_flickLastX) {
                                if (e.hideProgress) return;
                                var a = E.a.gameSettings.taskPinned;
                                if (null != E.a.gameSettings.taskPinned)
                                    for (var i = 0; i < c._taskCellRenders.length; i++) {
                                        var s = c._taskCellRenders[i];
                                        E.a.gameSettings.taskPinned == s.task.uid && (E.a.gameSettings.taskPinned = null, c._renderTaskBackground(s.calcedX, s.calcedY, s.task, s.backGraphics), s.pinSprite.visible = !1)
                                    }
                                a != e.uid ? (E.a.gameSettings.taskPinned = e.uid, c._renderTaskBackground(l, o, e, r), d.visible = !0, new Y(c, Y.MES_TYPE.INFO, "PINNED A NEW TASK"), e.methods.showPinnedTaskProgress()) : new Y(c, Y.MES_TYPE.INFO, "UNPINNED THE TASK")
                            }
                        })), E.a.gameSettings.tasksCollected.includes(e.uid) ? (this._renderTaskBackground(l, o, e, _.backGraphics), d.visible = !1, y.visible = !1) : E.a.gameSettings.tasksCompleted.includes(e.uid) ? (this._renderCompletedTask(l, o, _), d.visible = !1, y.visible = !1) : (p.alpha = 0, this._renderTaskProgress(l, o, _), E.a.gameSettings.taskPinned != e.uid && (d.visible = !1)), _
                    }
                }, {
                    key: "_renderTaskBackground",
                    value: function(e, t, a) {
                        var i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                        null == i ? (i = this.add.graphics(), this.tasksContainer.add([i])) : i.clear();
                        var s = this.cellDefaultBackCol,
                            n = this.cellDefaultStrokeCol;
                        return E.a.gameSettings.tasksCompleted.includes(a.uid) && (s = this.cellCollectedBackCol), E.a.gameSettings.taskPinned == a.uid && (s = this.cellPinnedBackCol), a.taskType == B.a.TASK_TYPE.BUBBLE_MASTER && (s = this.cellBubbleMasterCol, n = this.cellBubbleMasterStrokeCol), s != this.cellCollectedBackCol && (i.lineStyle(3, n, 1), i.strokeRect(e, t, this.cellWidth - 2 * this.cellOffsetBorder, this.cellHeight - 2 * this.cellOffsetBorder)), i.fillStyle(s, .8), i.fillRect(e, t, this.cellWidth - 2 * this.cellOffsetBorder, this.cellHeight - 2 * this.cellOffsetBorder), i
                    }
                }, {
                    key: "_renderTaskProgress",
                    value: function(e, t, a) {
                        var i = 10,
                            s = 15,
                            l = this.cellHeight - s - 10,
                            o = this.cellWidth - 53,
                            r = 14475273;
                        n.a.isBS3 && (r = 10437839);
                        var h = 14633551;
                        n.a.isBS3 && (h = r);
                        var p = 14633551;
                        n.a.isBS3 && (p = 15454790);
                        var d = this.add.graphics();
                        d.lineStyle(2, r, 1), d.fillStyle(h, .2), d.strokeRect(e + i, t + l, this.cellWidth - i - 70, s), d.fillRect(e + i, t + l, this.cellWidth - i - 70, s);
                        var y = a.currentVal / a.task.goalNum;
                        y > 1 && (y = 1), d.fillStyle(p, 1), d.fillRect(e + i, t + l, (this.cellWidth - i - 70) * y, s);
                        var _ = this.add.graphics();
                        _.fillStyle(0, .35), _.fillRect(e + o, t + this.cellHeight - 20 - 8, 48, 20);
                        var c = this.add.bitmapText(e + i + (this.cellWidth - i - 70) / 2, t + l + 7.5, n.a.lazyFontNames.RETENTION_XP, a.currentVal + "/" + a.task.goalNum, 12);
                        c.setOrigin(.5, .5);
                        var m = new L.a(this, e + this.cellWidth - 47, c.y, n.a.lazySpriteKey, "retention/xp_icon.png"),
                            u = this.add.bitmapText(e + this.cellWidth - 19, c.y + 1, n.a.lazyFontNames.RETENTION_XP, a.task.rewXp, 18);
                        if (u.setOrigin(.5, .5), a.task.hideProgress && (d.visible = !1, c.visible = !1), a.task.taskType == B.a.TASK_TYPE.BUBBLE_MASTER) {
                            _.visible = !1, u.visible = !1, m.visible = !1, c.destroy();
                            var g = E.a.gameSettings.taskCompleteDateLast - E.a.gameSettings.taskCompleteDateFirst,
                                v = Math.floor(g / 24 / 60 / 60 / 1e3),
                                f = Math.floor((g - 24 * v * 60 * 60 * 1e3) / 60 / 60 / 1e3),
                                S = Math.floor((g - 24 * v * 60 * 60 * 1e3 - 60 * f * 60 * 1e3) / 60 / 1e3),
                                x = Math.floor((g - 24 * v * 60 * 60 * 1e3 - 60 * f * 60 * 1e3 - 60 * S * 1e3) / 1e3);
                            (c = this.add.bitmapText(e + i + (this.cellWidth - i - 70) / 2, t + l + 7.5, n.a.fontNames.MENU, v + " days, " + f + "h, " + S + "min, " + x + "secs", 12)).y += 5, c.setOrigin(.5, .5), c.visible = !1, a.fillTxt = c
                        }
                        this.tasksContainer.add([d, _, c, m, u])
                    }
                }, {
                    key: "_renderCompletedTask",
                    value: function(e, t, a) {
                        var i = this.add.graphics();
                        i.fillStyle(this.cellCompletedBackCol, 1), i.fillRect(e, t, this.cellWidth - 2 * this.cellOffsetBorder, this.cellHeight - 2 * this.cellOffsetBorder), i.lineStyle(5, this.cellCompletedStrokeCol, 1), i.strokeRect(e, t, this.cellWidth - 2 * this.cellOffsetBorder, this.cellHeight - 2 * this.cellOffsetBorder), i.fillStyle(0, .5), i.fillRect(e + this.cellWidth / 2 - 75, t + 10, 150, 30);
                        var s = new L.a(this, e + this.cellWidth / 2, t + 10 + 15, n.a.lazySpriteKey, "retention/xp_icon.png");
                        s.setOrigin(1, .5);
                        var l = 3;
                        (n.a.isBS2 || n.a.isBS3) && (l = 0);
                        var o = this.add.bitmapText(e + this.cellWidth / 2, t + 10 + 15 + l, n.a.lazyFontNames.RETENTION_XP, a.task.rewXp, 22);
                        o.setOrigin(0, .5);
                        var r = this.add.bitmapText(e + this.cellWidth / 2, t + this.cellHeight - 5, n.a.fontNames.MENU, "COLLECT", 26);
                        r.setOrigin(.5, 1);
                        var h = this;
                        i.setInteractive({
                            useHandCursor: !0,
                            hitArea: new Phaser.Geom.Rectangle(e, t, this.cellWidth, this.cellHeight),
                            hitAreaCallback: Phaser.Geom.Rectangle.Contains
                        }), i.on("pointerup", (function(l) {
                            if (h.tasksContainer_savex == h.tasksContainer.x && 0 == h.tasksContainer_flickLastX) {
                                i.removeInteractive(), E.a.gameSettings.taskPinned == a.task.uid && (E.a.gameSettings.taskPinned = null), E.a.gameSettings.tasksCollected.push(a.task.uid), E.a.saveUserSettings(), h.time.addEvent({
                                    delay: 1e3,
                                    callback: function() {
                                        D.a.CurrentBadge.progressContainer && (null != h._animateXpCount_Tween && h._animateXpCount_Tween.stop(), h._animateXpCount_Tween = h.tweens.addCounter({
                                            from: B.a.Experience - a.task.rewXp,
                                            to: B.a.Experience,
                                            duration: 400,
                                            onUpdate: function(e) {
                                                D.a.updateCrntBadgeProgress(Math.round(e.getValue()))
                                            },
                                            onComplete: function() {
                                                B.a.Experience == B.a.LEVEL_POINTS[D.a.CurrentBadge.badgeLevel] && h.renderLevelUp()
                                            }
                                        }), D.a.CurrentBadge.progressContainer.scale = 1, h.add.tween({
                                            targets: D.a.CurrentBadge.progressContainer,
                                            scale: 1.1,
                                            ease: Phaser.Math.Easing.Linear,
                                            duration: 50,
                                            yoyo: !0,
                                            loop: 2
                                        }))
                                    }
                                });
                                var p = e + h.cellWidth / 2,
                                    d = t + h.cellHeight / 2,
                                    y = h.add.container(p + h.tasksContainer.x, d);
                                i.x -= p, i.y -= d, s.x -= p, s.y -= d, o.x -= p, o.y -= d, r.x -= p, r.y -= d, y.add([i, s, o, r]), W.a.playSound(h, W.a.SND.RETENTION_XP), h.add.tween({
                                    targets: y,
                                    duration: 200,
                                    scale: .5,
                                    alpha: 0,
                                    ease: Phaser.Math.Easing.Back.In,
                                    onComplete: function() {
                                        for (var e = 0; e < 15; e++) {
                                            var t = new L.a(h, y.x, y.y, n.a.lazySpriteKey, "retention/xp_icon.png");
                                            h.add.tween({
                                                targets: t,
                                                duration: 200 + 100 * Math.random(),
                                                x: y.x - 60 + 120 * Math.random(),
                                                y: y.y - 20 + 40 * Math.random(),
                                                onComplete: function() {
                                                    D.a.CurrentBadge.progressContainer && h.add.tween({
                                                        targets: this,
                                                        duration: 250,
                                                        delay: 301 + Math.random(300),
                                                        x: D.a.CurrentBadge.progressContainer.x,
                                                        y: D.a.CurrentBadge.progressContainer.y,
                                                        scale: 1,
                                                        ease: Phaser.Math.Easing.Quadratic.In,
                                                        onComplete: function() {
                                                            this.visible = !1
                                                        },
                                                        onCompleteScope: this
                                                    })
                                                },
                                                onCompleteScope: t
                                            }, t), h.add.tween({
                                                targets: t,
                                                scale: 1.4,
                                                duration: 450,
                                                ease: Phaser.Math.Easing.Elastic.Out
                                            })
                                        }
                                    },
                                    onCompleteScope: h
                                }), a.checkmark.alpha = 0, a.checkmark.scale = 2.2, h.add.tween({
                                    targets: a.checkmark,
                                    alpha: 1,
                                    scale: 1,
                                    duration: 200,
                                    delay: 900,
                                    ease: Phaser.Math.Easing.Sine.in
                                }), h._renderTaskBackground(e, t, a.task, a.backGraphics)
                            }
                        }), this), this.tasksContainer.add([i, s, o, r])
                    }
                }, {
                    key: "renderBubbleMasterCheckmark",
                    value: function() {
                        if (D.a.IsFullXp)
                            for (var e = 0; e < this._taskCellRenders.length; e++) {
                                var t = this._taskCellRenders[e];
                                t.task.taskType == B.a.TASK_TYPE.BUBBLE_MASTER && (t.checkmark.alpha = 1, t.fillTxt.visible = 1)
                            }
                    }
                }, {
                    key: "renderLevelUp",
                    value: function() {
                        f.a.log("LEVELUP!");
                        var e = "new RANK";
                        n.a.isBS2 ? e = "new LEVEL" : n.a.isBS3 && (e = "NEW BADGE!");
                        D.a.RANK_NAMES[D.a.CurrentLevel];
                        var t = "YOU UNLOCKED " + B.a._TASKS[D.a.CurrentLevel].length + " NEW TASKS";
                        W.a.playSound(this, W.a.SND.RETENTION_LEVELUP);
                        var a = this.add.container();
                        C.a.mySpriteDepth(C.a.RENDER_DEPTH.GAME_POPUP, a), a.alpha = 0;
                        var i = this.add.graphics();
                        i.fillStyle(0, 1), i.fillRect(R.a.cameraOffset.x, R.a.cameraOffset.y, n.a.gameWidth + 2 * -R.a.cameraOffset.x, n.a.gameHeight + 2 * -R.a.cameraOffset.y);
                        var s = D.a.renderBadge(this, n.a.gameWidth / 2, n.a.gameHeight / 2, D.a.CurrentLevel, !1, 2),
                            l = s.getBadgeDisplayElements(!1);
                        s.progressBack && (s.progressBack.visible = !1), s.progressBar && (s.progressBar.visible = !1), s.progressTxt && (s.progressTxt.visible = !1), s.badgeStars && (s.badgeStars.visible = !1);
                        var o = this.add.bitmapText(.5 * n.a.gameWidth, .15 * n.a.gameHeight, n.a.fontNames.MENU, e, 40).setOrigin(.5, .5),
                            r = this.add.bitmapText(.5 * n.a.gameWidth, .85 * n.a.gameHeight, n.a.fontNames.MENU, t, 25).setOrigin(.5, .5);
                        D.a.IsFullXp && (o.text = "", r.text = "WOW. YOU ARE THE BUBBLE MASTER.", null == E.a.gameSettings.taskCompleteDateLast && (E.a.gameSettings.taskCompleteDateLast = Date.now())), a.add([i, o, r]), a.add(l);
                        var h = this;
                        this.add.tween({
                            targets: a,
                            alpha: 1,
                            duration: 220
                        }), this.add.tween({
                            delay: 2500,
                            targets: a,
                            alpha: 0,
                            duration: 220
                        }), this.time.addEvent({
                            delay: 250,
                            callback: function() {
                                h.tasksContainer.destroy();
                                for (var e = 0; e < h.badges.length; e++) h.badges[e].destroyBadge();
                                h._createBadges(), B.a.resetLevelTasksData(), h._renderTasks(), h.makeTasksScrollable(), h.renderBubbleMasterCheckmark(), K.a.LogRankUpgrade()
                            }
                        })
                    }
                }, {
                    key: "makeTasksScrollable",
                    value: function() {
                        if (null != this.tasksContainer) {
                            this.input.topOnly = !1, this.draggableTasks = new L.a(this, this.gridStartX, this.gridStartY, n.a.spriteKey, "ui/black.png"), this.draggableTasks.displayWidth = n.a.gameWidth - this.gridStartX - 2 * R.a.notchOffset, this.draggableTasks.displayHeight = n.a.gameHeight - this.gridStartY, this.draggableTasks.setOrigin(0, 0), this.draggableTasks.alpha = .01, this.draggableTasks.setInteractive({
                                useHandCursor: !0
                            }), this.input.setDraggable(this.draggableTasks), this.tasksContainer_savex = this.tasksContainer.x, this.tasksContainer_width = Math.ceil(B.a._TASKS[D.a.CurrentLevel].length / this.gridRows) * this.cellWidth - n.a.gameWidth + 2 * R.a.notchOffset, this.tasksContainer_tween = null, this.tasksContainer_flickLastX = 0, this.tasksContainer_flickLimitX = 20, this.draggingTasks_on = !1;
                            var e = this;
                            this.input.on("pointerdown", (function(t, a, i, s) {
                                e.tasksContainer_width < 0 || t.y + R.a.cameraOffset.y < e.gridStartY || (e.draggingTasks_on = !0, e.tasksContainer_savex = e.tasksContainer.x, e.tasksContainer_flickLastX = 0, null != e.tasksContainer_tween && e.tasksContainer_tween.stop())
                            })), this.input.on("pointerup", (function(i) {
                                if (e.draggingTasks_on) {
                                    e.draggingTasks_on = !1;
                                    var s = a(e.tasksContainer.x + 5 * e.tasksContainer_flickLastX),
                                        n = 2 * Math.abs(s - e.tasksContainer.x);
                                    e.tasksContainer_tween = e.add.tween({
                                        targets: e.tasksContainer,
                                        x: s,
                                        duration: n,
                                        ease: Phaser.Math.Easing.Cubic.Out,
                                        onComplete: t,
                                        onCompleteScope: e
                                    })
                                }
                            })), this.input.on("drag", (function(t, i, s, n) {
                                if (e.draggingTasks_on && i == e.draggableTasks) {
                                    e.tasksContainer_flickLastX = s - e.tasksContainer.x + e.tasksContainer_savex - R.a.notchOffset;
                                    var l = a(e.tasksContainer_savex + s - R.a.notchOffset);
                                    e.tasksContainer.x = l
                                }
                            }))
                        }

                        function t() {
                            e.tasksContainer.x > 0 ? e.tasksContainer_tween = e.add.tween({
                                targets: e.tasksContainer,
                                x: 0,
                                duration: 400,
                                ease: Phaser.Math.Easing.Back.Out
                            }) : e.tasksContainer.x < -e.tasksContainer_width && (e.tasksContainer_tween = e.add.tween({
                                targets: e.tasksContainer,
                                x: -e.tasksContainer_width,
                                duration: 400,
                                ease: Phaser.Math.Easing.Back.Out
                            }))
                        }

                        function a(t) {
                            return t > 0 + e.tasksContainer_flickLimitX ? t = e.tasksContainer_flickLimitX : t < -e.tasksContainer_width - e.tasksContainer_flickLimitX && (t = -e.tasksContainer_width - e.tasksContainer_flickLimitX), t
                        }
                    }
                }, {
                    key: "makeBadgesScrollable",
                    value: function() {
                        this.draggableBadges = new L.a(this, R.a.cameraOffset.x, 0, n.a.spriteKey, "ui/black.png"), this.draggableBadges.displayWidth = n.a.gameWidth - 2 * R.a.cameraOffset.x, this.draggableBadges.displayHeight = this.gridStartY, this.draggableBadges.setOrigin(0, 0), this.draggableBadges.alpha = .01, this.draggableBadges.setInteractive({
                            useHandCursor: !0
                        }), this.input.setDraggable(this.draggableBadges), this.draggableBadges_savex = 0, this.draggableBadges_originalX = this.badgesPositionX, this.draggableBadges_tween = null, this.draggingBadges_on = !1;
                        var e = this;
                        this.input.on("pointerdown", (function(t, a, i, s) {
                            t.y + R.a.cameraOffset.y > e.gridStartY || (e.draggingBadges_on = !0, e.draggableBadges_savex = t.x, e.draggableBadges_flickLastX = 0, null != e.draggableBadges_tween && e.draggableBadges_tween.stop())
                        })), this.input.on("pointerup", (function(t) {
                            if (e.draggingBadges_on) {
                                e.draggingBadges_on = !1;
                                var a = e.draggableBadges_originalX - e.badgesPositionX,
                                    i = .5 * Math.abs(a),
                                    s = e.badgesPositionX;
                                e.tweens.addCounter({
                                    from: e.badgesPositionX,
                                    to: e.draggableBadges_originalX,
                                    duration: i,
                                    onUpdate: function(t) {
                                        var a = s - t.getValue();
                                        s = t.getValue();
                                        for (var i = 0; i < e.badges.length; i++) e.badges[i].moveBadgeBy(-a, 0)
                                    },
                                    ease: Phaser.Math.Easing.Cubic.Out
                                }), e.badgesPositionX += a
                            }
                        })), this.input.on("drag", (function(t, a, i, s) {
                            if (a == e.draggableBadges) {
                                for (var n = e.draggableBadges_savex - t.x, l = 0; l < e.badges.length; l++) e.badges[l].moveBadgeBy(-n, 0);
                                e.badgesPositionX -= n, e.draggableBadges_savex -= n
                            }
                        }))
                    }
                }, {
                    key: "backToMainMenu",
                    value: function() {
                        this.input.topOnly = !0;
                        var e = "BT1_MainMenu";
                        n.a.isBS2 ? e = "BS2_MainMenu" : n.a.isBS3 && (e = "BS3_MainMenu"), E.a.saveUserSettings(), this.myTransition.transitionToggle(!1, e)
                    }
                }]), t
            }(Phaser.Scene),
            V = a(26),
            F = a(96),
            X = function(e) {
                function t() {
                    return p()(this, t), c()(this, u()(t).call(this, {
                        key: "MyUpgradesScene"
                    }))
                }
                return v()(t, e), y()(t, [{
                    key: "create",
                    value: function() {
                        this.myTransition = new M.a(this).transitionOpen();
                        new O.a(this, !1);
                        if (n.a.isBS3) {
                            this.add.sprite(.5 * n.a.gameWidth, .5 * n.a.gameHeight, "mainmenu_background");
                            var e = new Phaser.Geom.Rectangle(-20, -20, n.a.gameWidth + 40, n.a.gameHeight + 40),
                                t = this.add.graphics();
                            t.fillStyle(0, .65), t.fillRectShape(e)
                        }
                        if (n.a.isBT) new I.a(this, 70, 45, 130, 77, "ui/main_menu_back.png", {
                            top: 30,
                            bottom: 30,
                            left: 30,
                            right: 30
                        });
                        var a = 6;
                        (n.a.isBS2 || n.a.isBS3) && (a = 0);
                        new P.a(this, 70, 45, 100, 47, {
                            text: A.a.BT1.SETTINGS_BACK,
                            size: 32,
                            fixY: a
                        }, this.backToMainMenu.bind(this), null, null, !1, !0);
                        if (this.gridStartX = 200, (n.a.isBS2 || n.a.isBS3) && (this.gridStartX = 150), this.gridEndX = n.a.gameWidth - 10, this.gridStartY = 10, this.gridEndY = n.a.gameHeight - 10, this.gridSpacingY = 10, this.cellWidth = this.gridEndX - this.gridStartX, this.cellHeight = this.gridEndY - this.gridStartY - (V.a.ITEMS.length - 1) * this.gridSpacingY, this.cellHeight /= V.a.ITEMS.length, this.backCol = 7895928, n.a.isBS2 && (this.backCol = 5987163), n.a.isBS3 && (this.backCol = 5727886), this.backColAlpha = 1, n.a.isBS3 && (this.backColAlpha = .5), this.backStrokeCol = 4869194, n.a.isBS3 && (this.backStrokeCol = 7443676), this.backStrokeSize = 4, n.a.isBS2 && (this.backStrokeSize = 2), n.a.isBS3 && (this.backStrokeSize = 2), n.a.isBT) {
                            var i = this.add.graphics();
                            i.fillStyle(this.backCol, this.backColAlpha), i.lineStyle(this.backStrokeSize, this.backStrokeCol), i.fillRect(5, 139, 170, 100), i.strokeRect(5, 139, 170, 100);
                            var s = this.add.bitmapText(90, 190, n.a.fontNames.MENU, H.a.UPGRADE_TIP, 20);
                            s.setOrigin(.5, .5), s.maxWidth = 160
                        }
                        var l, o = this.add.graphics();
                        if (o.fillStyle(this.backCol, this.backColAlpha), o.lineStyle(this.backStrokeSize, this.backStrokeCol), n.a.isBT) l = this.add.sprite(80, 355, n.a.lazySpriteKey, "retention/upgrade_left_back.png");
                        else {
                            var r = {
                                top: 10,
                                bottom: 10,
                                left: 10,
                                right: 10
                            };
                            (l = new I.a(this, 70, 355, 64, 43, "ui/ingame/interface_box.png", r)).x = l.ninePatch.x, l.y = l.ninePatch.y
                        }
                        this.pointsLeftTxt = this.add.bitmapText(l.x, l.y, n.a.lazyFontNames.RETENTION_XP, "100", 24), this.pointsLeftTxt.setOrigin(.5, .5);
                        this.pointsLeftTxt.x += -3, this.pointsLeftTxt.y += 1;
                        var h = this.add.bitmapText(this.pointsLeftTxt.x, this.pointsLeftTxt.y, n.a.fontNames.MENU, "UPGRADE POINTS:", 19);
                        h.setOrigin(.5, .5), h.x += 3, h.y += -43;
                        var p = 150;
                        (n.a.isBS2 || n.a.isBS3) && (p = 125);
                        var d = l.x - p / 2,
                            y = l.y - 75;
                        o.fillRect(d + 0, y + 10, p, 150), o.strokeRect(d + 0, y + 10, p, 150);
                        var _ = 6;
                        (n.a.isBS2 || n.a.isBS3) && (_ = 0);
                        new P.a(this, l.x + 0, l.y + 55, 100, 47, {
                            text: A.a.BT1.RESET,
                            size: 32,
                            fixY: _
                        }, this.resetLevelPoints.bind(this));
                        this.updateLevelPointsLeft(), this.renderItems(), this.sys.events.once("shutdown", N.a.save), 0 == D.a.CurrentLevel ? new F.a(this, F.a.MSGS.UPGRADE_LOW_RANK) : new F.a(this, F.a.MSGS.FINISH_LEVELS_FOR_UPGRADE_PTS)
                    }
                }, {
                    key: "resetLevelPoints",
                    value: function() {
                        for (var e = 0; e < V.a.ITEMS.length; e++) {
                            for (var t = 0; t < V.a.ITEMS[e].upgradePrice.length; t++) E.a.gameSettings.levelPointsDistributed[e][t] = 0;
                            V.a.ITEMS[e].updateMarkersColors(), V.a.ITEMS[e].refreshUpgrade()
                        }
                        this.updateLevelPointsLeft()
                    }
                }, {
                    key: "updateLevelPointsLeft",
                    value: function() {
                        this.pointsLeftTxt.text = V.a.UndistributedLevelPoints
                    }
                }, {
                    key: "renderItems",
                    value: function() {
                        for (var e = 0; e < V.a.ITEMS.length; e++) this.renderItem(e, V.a.ITEMS[e])
                    }
                }, {
                    key: "renderItem",
                    value: function(e, t) {
                        var a = this.gridStartX,
                            i = this.gridStartY + (this.gridSpacingY + this.cellHeight) * e,
                            s = 10;
                        n.a.isBS2 && (s = 5);
                        var l = 10;
                        n.a.isBS2 && (l = 5);
                        var o = 43;
                        n.a.isBS2 && (o = 35);
                        var r = 12;
                        n.a.isBS2 && (r = 0), n.a.isBS3 && (r = 5);
                        var h = 10;
                        n.a.isBS2 && (h = 70);
                        var p = 150;
                        n.a.isBS2 && (p = 10);
                        var d = 40;
                        n.a.isBS2 && (d = 38), n.a.isBS3 && (d = 36);
                        var y = 130;
                        n.a.isBS2 && (y = 120), n.a.isBS3 && (y = 120);
                        var _ = 100;
                        n.a.isBS2 && (_ = this.cellHeight), n.a.isBS3 && (_ = this.cellHeight);
                        var c = 200;
                        n.a.isBS2 && (c = 210), n.a.isBS3 && (c = 210);
                        var m = 27;
                        n.a.isBS2 && (m = 21), n.a.isBS3 && (m = 27);
                        var u = 18;
                        (n.a.isBS2 || n.a.isBS3) && (u = 22);
                        var g = 400;
                        (n.a.isBS2 || n.a.isBS3) && (g = 420);
                        var v = 23;
                        (n.a.isBS2 || n.a.isBS3) && (v = 20);
                        var S = .5;
                        n.a.isBS2 && (S = .65), n.a.isBS3 && (S = .8);
                        var x = 400;
                        n.a.isBS2 && (x = 420), n.a.isBS3 && (x = 420);
                        var T = 66;
                        n.a.isBS2 && (T = 55), n.a.isBS3 && (T = 65);
                        var b = this.add.graphics();
                        b.fillStyle(this.backCol, .85 * this.backColAlpha), b.lineStyle(this.backStrokeSize, this.backStrokeCol, 1), b.fillRect(a, i, this.cellWidth, this.cellHeight), b.strokeRect(a, i, this.cellWidth, this.cellHeight), this.add.sprite(a + s, i + l, n.a.lazySpriteKey, t.icon).setOrigin(0, 0), this.add.bitmapText(a + o, i + r, n.a.fontNames.MENU, t.title, 30).setOrigin(0, 0);
                        var k = this.add.bitmapText(a + h, i + d, n.a.fontNames.MENU, t.description, 18);
                        k.setOrigin(0, 0), k.maxWidth = this.cellWidth - (h + p), n.a.isBS3 && (k.maxWidth = 0), k.alpha = .8;
                        var w = 10;
                        n.a.isBS2 && (w = 10), n.a.isBS3 && (w = 10);
                        var I = 77;
                        n.a.isBS2 && (I = 35), n.a.isBS3 && (I = 57);
                        var A = 100;
                        n.a.isBS2 && (A = 55), n.a.isBS3 && (A = 55);
                        var L = 25;
                        n.a.isBS2 && (L = 27), n.a.isBS3 && (L = 20);
                        var M = this.add.graphics();
                        M.fillStyle(0, .6), M.lineStyle(2, 0, 1), M.fillRect(a + w, i + I, A, L);
                        var O = 60;
                        n.a.isBS2 && (O = 36.5), n.a.isBS3 && (O = 36.5);
                        var R = 93;
                        n.a.isBS2 && (R = 49), n.a.isBS3 && (R = 67);
                        var W = this.add.bitmapText(a + O, i + R, n.a.fontNames.MENU, "3 SECONDS", 18);
                        W.setOrigin(.5, .5);
                        var N = this.add.graphics();
                        N.fillStyle(0, .5), N.fillRect(c - y / 2, m - _ / 2, y, _);
                        var C = 400;
                        n.a.isBS2 && (C = 420), n.a.isBS3 && (C = 420);
                        var U = 91;
                        n.a.isBS2 && (U = 63), n.a.isBS3 && (U = 70);
                        var Y = this.add.bitmapText(a + C, i + U, n.a.fontNames.MENU, "NEXT", 20);
                        Y.setOrigin(.5, .5);
                        var K = this.add.bitmapText(0, 0, n.a.fontNames.MENU, "REQUIRES RANK", u);
                        K.setOrigin(.5, .5);
                        var G = this,
                            H = 20;
                        n.a.isBS2 && (H = 10);
                        var z = this.cellHeight - H - 10,
                            F = (this.cellWidth - 20) / t.upgradeVal.length;
                        (n.a.isBS2 || n.a.isBS3) && (F = (this.cellWidth - y - 20) / t.upgradeVal.length);
                        var X = 13906490;
                        n.a.isBS3 && (X = 2565927);
                        var j = 14475273;
                        n.a.isBS3 && (j = 16769546);
                        var q = 7479070;
                        n.a.isBS3 && (q = 5000268);
                        var J = 11841312;
                        n.a.isBS3 && (J = 8352007);
                        var Z = 2;
                        n.a.isBS3 && (Z = 3);
                        for (var Q = [], $ = 0; $ < t.upgradeVal.length; $++) {
                            var ee = this.add.graphics();
                            Q.push(ee)
                        }
                        t.updateMarkersColors = function() {
                            null != t.rankBadge && (t.rankBadge.destroyBadge(), t.rankBadge = null);
                            for (var s = 0; s < Q.length; s++) {
                                var n = Q[s],
                                    l = s,
                                    o = E.a.gameSettings.levelPointsDistributed[e][s];
                                n.clear();
                                var r = X,
                                    h = q;
                                0 != o && (r = j, h = J), 0 == o && null == t.rankBadge && (t.rankBadge = D.a.renderBadge(G, a + x, i + T, t.rankReq[s], !1, S), K.x = a + g, K.y = i + v, N.x = a + c, N.y = i + m), n.fillStyle(r, 1), n.lineStyle(Z, h, 1);
                                var p = new Phaser.Geom.Rectangle(a + 10 + l * F, i + z, F, H);
                                n.fillRectShape(p), n.strokeRectShape(p)
                            }
                        };
                        var te = function() {
                                for (var t = 0; t < E.a.gameSettings.levelPointsDistributed[e].length; t++) {
                                    if (0 == E.a.gameSettings.levelPointsDistributed[e][t]) return t
                                }
                                return null
                            },
                            ae = 66;
                        n.a.isBS2 && (ae = 40), n.a.isBS3 && (ae = 40);
                        var ie = 400;
                        n.a.isBS2 && (ie = 420), n.a.isBS3 && (ie = 420);
                        var se = 40;
                        n.a.isBS2 && (se = 32), n.a.isBS3 && (se = 42);
                        var ne = 25;
                        n.a.isBS2 && (ne = 22), n.a.isBS3 && (ne = 23);
                        var le = 3;
                        (n.a.isBS2 || n.a.isBS3) && (le = 0), t.lvlUpBtn = new P.a(this, a + ie, i + se, 110, ae, {
                            text: "UPGRADE",
                            size: ne,
                            fixY: le
                        }, (function() {
                            var a = te(),
                                i = t.upgradePrice[a];
                            i > V.a.UndistributedLevelPoints || (B.a.TaskUpdate(G, B.a.TASK_TYPE.DO_UPGRADE, a + 1, t.modType), f.a.log("UPGRADING...", a, i), E.a.gameSettings.levelPointsDistributed[e][a] = i, E.a.saveUserSettings(), t.updateMarkersColors(), t.refreshUpgrade(), G.updateLevelPointsLeft())
                        })), t.refreshUpgrade = function() {
                            var e = te();
                            if (f.a.log("Refresh upgrade", "Getting next upgrade slot:", e), K.visible = !1, N.visible = !0, Y.visible = !0, 0 == e) M.visible = !1, W.text = "";
                            else {
                                M.visible = !0;
                                var a = e;
                                null == a ? a = t.upgradeVal.length - 1 : a--, W.text = t.upgradeVal[a] + " " + t.upgradeUnits
                            }
                            if (null == e) return t.lvlUpBtn.buttonIsActive = !1, t.lvlUpBtn.setVisibleMyUIButton(!1), N.visible = !1, Y.visible = !1, void(null != t.rankBadge && t.rankBadge.destroyBadge());
                            if (t.rankReq[e] > D.a.CurrentLevel) return t.lvlUpBtn.buttonIsActive = !1, t.lvlUpBtn.setVisibleMyUIButton(!1), K.visible = !0, void(Y.visible = !1);
                            t.lvlUpBtn.buttonIsActive = !0, t.lvlUpBtn.setVisibleMyUIButton(!0), null != t.rankBadge && t.rankBadge.destroyBadge();
                            var i = t.upgradePrice[e];
                            t.lvlUpBtn.myText.text = "UPGRADE\n (" + i + "PTS)", (n.a.isBS2 || n.a.isBS3) && (t.lvlUpBtn.myText.text = "UPGRADE (" + i + ")"), Y.text = t.upgradeVal[e] + " " + t.upgradeUnits
                        }, t.updateMarkersColors(), t.refreshUpgrade()
                    }
                }, {
                    key: "backToMainMenu",
                    value: function() {
                        var e = "BT1_MainMenu";
                        n.a.isBS2 ? e = "BS2_MainMenu" : n.a.isBS3 && (e = "BS3_MainMenu"), this.myTransition.transitionToggle(!1, e)
                    }
                }]), t
            }(Phaser.Scene),
            j = a(75),
            q = function(e) {
                function t() {
                    return p()(this, t), c()(this, u()(t).call(this, {
                        key: "MySkinsScene"
                    }))
                }
                return v()(t, e), y()(t, [{
                    key: "preload",
                    value: function() {
                        var e = this;
                        new O.a(this, !1);
                        for (var t in this.myTransition = new M.a(this), j.a.SKINS) {
                            var a = j.a.SKINS[t];
                            a.skinID != j.a._SKIN_ID_COMINGSOON && (this.textures.exists(a.skinID) || this.load.multiatlas(a.skinID, a.spriteJSON, a.spriteLocation))
                        }
                        var i = new Phaser.Geom.Rectangle(100, .85 * n.a.gameHeight, n.a.gameWidth - 200, 50);
                        this.progressBack = this.add.graphics(), this.progressBack.lineStyle(15, 13188130, 3), this.progressBack.strokeRectShape(i), this.progressBack.fillStyle(6842691, 1), this.progressBack.fillRectShape(i), this.progress = this.add.graphics(), this.load.on("progress", (function(t) {
                            t < .2 && (t = .2), e.progress.clear();
                            var a = new Phaser.Geom.Rectangle(100, .85 * n.a.gameHeight, (n.a.gameWidth - 200) * t, 50);
                            e.progress.fillStyle(13949193, 1), e.progress.fillRectShape(a)
                        })), C.a.mySpriteDepth(C.a.RENDER_DEPTH.TRANSITION, this.progressBack), C.a.mySpriteDepth(C.a.RENDER_DEPTH.TRANSITION, this.progress)
                    }
                }, {
                    key: "create",
                    value: function() {
                        if (null != this.progress && (this.progressBack.destroy(), this.progress.destroy()), this.devilImage && (this.devilImage.destroy(), this.devilImage = null), this.myTransition.transitionOpen(), n.a.isBS3) {
                            this.add.sprite(.5 * n.a.gameWidth, .5 * n.a.gameHeight, "mainmenu_background"), new L.a(this, 412, 451, n.a.lazySpriteKey, "ui/menu_start1.png");
                            var e = new Phaser.Geom.Rectangle(-20, -20, n.a.gameWidth + 40, n.a.gameHeight + 40),
                                t = this.add.graphics();
                            t.fillStyle(0, .65), t.fillRectShape(e)
                        }
                        var a = new L.a(this, n.a.gameWidth / 2, 444, "main_menu_floor", null, n.a.spriteScale / .5);
                        if (a.scaleX *= 1.3, a.scaleY *= 1.2, o.a.isLazyLoaded ? this._drawLazyStuff() : o.a.sceneLink.events.once(o.a.EVT_LOADED, this._drawLazyStuff, this), n.a.isBT) new I.a(this, 70 + R.a.notchOffset, 45, 130, 77, "ui/main_menu_back.png", {
                            top: 30,
                            bottom: 30,
                            left: 30,
                            right: 30
                        });
                        var i = 6;
                        (n.a.isBS2 || n.a.isBS3) && (i = 0);
                        new P.a(this, 70 + R.a.notchOffset, 45, 100, 47, {
                            text: A.a.BT1.SETTINGS_BACK,
                            size: 32,
                            fixY: i
                        }, this.backToMainMenu.bind(this), null, null, !1, !0);
                        var s = 0,
                            l = n.a.gameWidth - R.a.cameraOffset.x - 72 * j.a.SKINS.length;
                        for (var r in j.a.SKINS) {
                            var h = j.a.SKINS[r];
                            this._renderSkin(h, l + 85 * s, 80), s++
                        }
                        this._selectSkin(E.a.gameSettings.selectedSkinID)
                    }
                }, {
                    key: "_renderSkin",
                    value: function(e, t, a) {
                        f.a.log("BADGE", "Rendering..", e);
                        var i = {};
                        i.skinItem = e;
                        var s = .8,
                            l = e.skinID == j.a._SKIN_ID_COMINGSOON,
                            o = E.a.gameSettings.skinsUnlocked.includes(e.skinID);
                        if (!E.a.gameSettings.skinsNewViewed.includes(e.skinID)) {
                            E.a.gameSettings.skinsNewViewed.push(e.skinID), i.newSkinAura = [];
                            var r = new L.a(this, t, a, n.a.lazySpriteKey, "retention/back_lvl6_aura_particle2.png");
                            r.scale = s, this.add.tween({
                                targets: r,
                                angle: 46,
                                duration: 1045,
                                alpha: {
                                    to: .4,
                                    from: 1
                                },
                                scale: {
                                    from: s,
                                    to: 1
                                },
                                yoyo: !0,
                                loop: -1,
                                ease: Phaser.Math.Easing.Circular.InOut
                            });
                            var h = new L.a(this, t, a, n.a.lazySpriteKey, "retention/back_lvl6_aura_particle1.png");
                            h.scale = s, this.add.tween({
                                targets: h,
                                alpha: {
                                    to: .6,
                                    from: 1
                                },
                                scale: {
                                    from: .8 * s,
                                    to: 1.1 * s
                                },
                                duration: 100,
                                yoyo: !0,
                                loop: -1,
                                ease: Phaser.Math.Easing.Expo.InOut
                            }), this.add.tween({
                                targets: h,
                                angle: {
                                    from: 0,
                                    to: 360
                                },
                                duration: 3845,
                                loop: -1,
                                delay: 250
                            });
                            var p = new L.a(this, t, a, n.a.lazySpriteKey, "retention/back_lvl6_aura_particle1.png");
                            p.scale = s, this.add.tween({
                                targets: p,
                                alpha: {
                                    to: .7,
                                    from: .9
                                },
                                scale: {
                                    from: .9 * s,
                                    to: 1.1 * s
                                },
                                duration: 300,
                                yoyo: !0,
                                loop: -1,
                                ease: Phaser.Math.Easing.Back.InOut
                            }), this.add.tween({
                                targets: p,
                                angle: {
                                    from: 180,
                                    to: -180
                                },
                                duration: 5245,
                                loop: -1,
                                delay: 550
                            });
                            var d = new L.a(this, t, a, n.a.lazySpriteKey, "retention/back_lvl6_aura_back.png"),
                                y = s;
                            n.a.isBT && (y = 1.1 * s), d.scale = y, this.add.tween({
                                targets: d,
                                alpha: {
                                    to: .5,
                                    from: 1
                                },
                                duration: 250,
                                yoyo: !0,
                                loop: -1
                            }), i.newSkinAura.push(d, r, h, p)
                        }
                        var _, c = new L.a(this, t, a, n.a.lazySpriteKey, "retention/back_lvl0.png");
                        c.scale = s, i.skinBackground = c, (_ = l ? new L.a(this, t, a, n.a.lazySpriteKey, "skins/coming_soon.png") : o ? new L.a(this, t, a, e.skinID, "profile_pic.png") : new L.a(this, t, a, e.skinID, "profile_pic_locked.png")).scale *= s;
                        var m = this.make.graphics({
                            x: t,
                            y: a
                        });
                        m.scale = s, m.fillCircle(0, 0, 45);
                        var u = m.createGeometryMask();
                        if (_.setMask(u), i.profilePic = _, !l) {
                            if (!E.a.gameSettings.skinsUnlockedUsed.includes(e.skinID)) this.add.tween({
                                targets: [c, m],
                                scale: 1.05 * s,
                                duration: 330,
                                loop: -1,
                                yoyo: !0
                            }).timeScale = 1.5;
                            var g = this;
                            c.setInteractive({
                                useHandCursor: !0
                            }).on("pointerup", (function() {
                                o ? (null != i.newSkinAura && (i.newSkinAura.forEach((function(e) {
                                    e.destroy()
                                })), i.newSkinAura = null), g._selectSkin(e.skinID)) : new Y(g, Y.MES_TYPE.INFO, e.unlockDescription)
                            }))
                        }
                        return i._getSkinDisplayElements = function(e) {
                            var t = [];
                            return i.newSkinAura && i.newSkinAura.forEach((function(e) {
                                t.push(e)
                            })), c && t.push(c), _ && t.push(_), e && m && t.push(m), t
                        }, i.destroyBadge = function() {
                            for (var e = i._getSkinDisplayElements(!0), t = e.length - 1; t >= 0; t--) e[t].destroy()
                        }, i.moveBadgeBy = function(e, t) {
                            i._getSkinDisplayElements(!0).forEach((function(a) {
                                a.x += e, a.y += t
                            }))
                        }, i
                    }
                }, {
                    key: "_selectSkin",
                    value: function(e) {
                        if (e != E.a.gameSettings.selectedSkinID || null == this.devilImage) {
                            E.a.gameSettings.skinsUnlockedUsed.includes(e) || E.a.gameSettings.skinsUnlockedUsed.push(e), E.a.gameSettings.selectedSkinID = e;
                            var t = this;
                            this.add.tween({
                                targets: [this.devilImage],
                                duration: 250,
                                x: "-=200",
                                alpha: 0,
                                onComplete: function() {
                                    t.devilImage && t.devilImage.destroy();
                                    t.devilImage = new L.a(t, 339, 413, E.a.gameSettings.selectedSkinID, "ui/devil_idle.png", 1, C.a.RENDER_DEPTH.UIOVER), t.devilImage.alpha = 0, t.devilImage.x += 200, t.add.tween({
                                        targets: [t.devilImage],
                                        duration: 250,
                                        x: "-=200",
                                        alpha: 1,
                                        ease: Phaser.Math.Easing.Cubic.Out
                                    })
                                },
                                ease: Phaser.Math.Easing.Cubic.In
                            })
                        }
                    }
                }, {
                    key: "backToMainMenu",
                    value: function() {
                        this.input.topOnly = !0;
                        var e = "BT1_MainMenu";
                        n.a.isBS2 ? e = "BS2_MainMenu" : n.a.isBS3 && (e = "BS3_MainMenu"), E.a.saveUserSettings(), this.myTransition.transitionToggle(!1, e)
                    }
                }, {
                    key: "_drawLazyStuff",
                    value: function() {
                        new L.a(this, 128, 177, n.a.lazySpriteKey, "ui/window.png", 1.3);
                        var e = new L.a(this, 30, 125, n.a.lazySpriteKey, "ani_torch/torch_1.png", .9),
                            t = (new L.a(this, 30, 123, n.a.lazySpriteKey, "ani_torch/torch_base.png", .9), new L.a(this, 232, 125, n.a.lazySpriteKey, "ani_torch/torch_1.png", .9)),
                            a = new L.a(this, 232, 123, n.a.lazySpriteKey, "ani_torch/torch_base.png", .9);
                        a.scaleX = -a.scaleX, e.anims.play("torch_burn"), t.anims.play("torch_burn")
                    }
                }]), t
            }(Phaser.Scene),
            J = a(451),
            Z = a(18),
            Q = a(43),
            $ = a.n(Q),
            ee = a(65).default,
            te = a(65).default,
            ae = a(65).default,
            ie = a(65).default,
            se = a(65).default,
            ne = a(65).default,
            le = a(65).default,
            oe = a(65).default,
            re = a(65).default,
            he = a(65).default,
            pe = a(65).default,
            de = a(65).default,
            ye = a(65).default,
            _e = a(65).default,
            ce = a(65).default,
            me = a(1146).default,
            ue = a(1147).default,
            ge = a(1140).default,
            ve = a(1141).default;

        function fe(e) {
            console.log("STARTING.." + e, navigator.userAgent + ", " + $.a.GET_ENV_PROD_OR_DEV()), Z.a.initialize(e);
            var t = [l.a, x, o.a, r.a, w, z, X, G.a, q],
                a = [ee, ie, se, ae, te, ne],
                i = [le, oe, re, he, pe, de, ye, _e, ce],
                h = [me, ue, ge, ve],
                p = [];
            n.a.isBT ? p = t.concat(a) : n.a.isBS2 ? p = t.concat(i) : n.a.isBS3 && (p = t.concat(h));
            var d = {
                type: $.a.GET_PHASER_RENDERER(s.a),
                parent: n.a.containerName,
                width: n.a.gameWidth,
                height: n.a.gameHeight,
                scale: {
                    mode: s.a.Scale.NONE,
                    width: n.a.gameWidth,
                    height: n.a.gameHeight
                },
                dom: {
                    createContainer: !0
                },
                input: {
                    activePointers: 6
                },
                scene: p,
                plugins: {
                    global: [{
                        key: "NinePatchPlugin",
                        plugin: J.NinePatchPlugin,
                        start: !0
                    }]
                }
            };
            window.myResize = function() {
                var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                e && setTimeout((function() {
                    window.myResize(!1)
                }), 500);
                var t = window.innerWidth,
                    a = window.innerHeight,
                    i = n.a.gameWidth,
                    s = n.a.gameHeight,
                    l = 3 * n.a.gameWidth,
                    o = 3 * n.a.gameHeight,
                    r = t / i,
                    h = a / s,
                    p = Math.min(r, h),
                    d = Math.min(t / p, l),
                    _ = Math.min(a / p, o);
                R.a.orientation = r > h ? R.a.ORIENTATIONS.LANDSCAPE : R.a.ORIENTATIONS.PORTRAIT, R.a.cameraOffset.x = -(d - i) / 2, R.a.cameraOffset.y = -(_ - s) / 2;
                var c = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--sal"), 10),
                    m = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--sar"), 10);
                R.a.notchOffset = c >= m ? R.a.cameraOffset.x + c : R.a.cameraOffset.x + m, Z.a.isCordova && R.a.isAndroid && window.AndroidNotch && window.AndroidNotch.getInsetRight((function(e) {
                    window.AndroidNotch.getInsetLeft((function(t) {
                        R.a.notchOffset = t >= e ? R.a.cameraOffset.x + t : R.a.cameraOffset.x + e
                    }))
                })), null != y && (y.scale.resize(d, _), y.canvas.style.width = d * p + "px", y.canvas.style.height = _ * p + "px", y.canvas.style.marginTop = "".concat((a - _ * p) / 2, "px"), y.canvas.style.marginLeft = "".concat((t - d * p) / 2, "px"), y.scene.scenes.forEach((function(e) {
                    e.cameras.main && (e.cameras.main.scrollX = R.a.cameraOffset.x, e.cameras.main.scrollY = R.a.cameraOffset.y)
                })), y.events.emit("LevelEditoSceneResize", d, _, p))
            }, window.addEventListener("resize", (function(e) {
                window.myResize()
            })), window.onload = window.myResize, window._myToggleFullscreen = function() {
                var e = y.canvas;
                document.fullscreenElement ? document.exitFullscreen() : e.requestFullscreen().catch((function(e) {
                    console.log("Error attempting to enable full-screen mode: ".concat(e.message, " (").concat(e.name, ")"), e)
                }))
            };
            var y = new s.a.Game(d)
        }
        Element.prototype.requestFullscreen || (Element.prototype.requestFullscreen = Element.prototype.mozRequestFullscreen || Element.prototype.webkitRequestFullscreen || Element.prototype.msRequestFullscreen), document.exitFullscreen || (document.exitFullscreen = document.mozExitFullscreen || document.webkitExitFullscreen || document.msExitFullscreen), document.fullscreenElement || (Object.defineProperty(document, "fullscreenElement", {
            get: function() {
                return document.mozFullScreenElement || document.msFullscreenElement || document.webkitFullscreenElement
            }
        }), Object.defineProperty(document, "fullscreenEnabled", {
            get: function() {
                return document.mozFullScreenEnabled || document.msFullscreenEnabled || document.webkitFullscreenEnabled
            }
        }));
        var Se = a(37);
        PokiSDK.init().then((function() {
            fe(Z.a.TARGETS.POKI)
        })).catch((function() {
            Se.a.adBlockerEnabled = !0, fe(Z.a.TARGETS.POKI)
        }));
        var Ee = $.a.GET_ENV_PROD_OR_DEV() == $.a.ENV_DEV;
        PokiSDK.setDebug(Ee);
        /*var xe, Te, be = ["top", "indexOf", "aHR0cHM6Ly9wb2tpLmNvbS9zaXRlbG9jaw==", "hostname", "length", "location", "LnBva2ktZ2RuLmNvbQ==", "href"];
        xe = be, Te = 430,
            function(e) {
                for (; --e;) xe.push(xe.shift())
            }(++Te);
        var ke = function(e, t) {
            return be[e -= 0]
        };
        ! function() {
            for (var e = ["bG9jYWxob3N0", "LnBva2kuY29t", ke("0x0")], t = !1, a = window[ke("0x7")][ke("0x5")], i = 0; i < e[ke("0x6")]; i++) {
                var s = atob(e[i]);
                if (-1 !== a[ke("0x3")](s, a.length - s.length)) {
                    t = !0;
                    break
                }
            }
            if (!t) {
                var n = ke("0x4"),
                    l = atob(n);
                window.location[ke("0x1")] = l, window[ke("0x2")][ke("0x7")] !== window[ke("0x7")] && (window[ke("0x2")][ke("0x7")] = window[ke("0x7")])
            }
        }()*/
    },
    1146: function(e, t, a) {
        "use strict";
        a.r(t);
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(8),
            c = (a(23), a(21)),
            m = a(28),
            u = a(0),
            g = a(9),
            v = a(15),
            f = a(48),
            S = a(4),
            E = (a(67), a(242), a(18)),
            x = a(31),
            T = a(14),
            b = a(2),
            k = function e(t) {
                var a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                    i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 390;
                s()(this, e), null == a && (a = u.a.gameWidth - T.a.notchOffset - 62), E.a.isPoki && !b.a.debugLog || (this.app_logo_bsa = new g.a(t, a, i, "app_logo_bsa", null, .5), this.download_apple = new g.a(t, a, i + 40, "download_apple", null, .65), this.download_google = new g.a(t, a, i + 75, "download_google", null, .65), this.download_apple.setInteractive({
                    useHandCursor: !0
                }), this.download_apple.on("pointerup", (function() {
                    window.open(x.a.BSA_APPLE, E.a.browserWindow)
                })), this.download_google.setInteractive({
                    useHandCursor: !0
                }), this.download_google.on("pointerup", (function() {
                    window.open(x.a.BSA_GOOGLE, E.a.browserWindow)
                })), this.app_logo_bsa.setInteractive({
                    useHandCursor: !0
                }), this.app_logo_bsa.on("pointerup", (function() {
                    E.a.isCordova && (T.a.isIOS ? window.open(x.a.BSA_APPLE, E.a.browserWindow) : T.a.isAndroid && window.open(x.a.BSA_GOOGLE, E.a.browserWindow))
                })), E.a.isCordova && (this.app_logo_bsa.scale = .7, this.app_logo_bsa.y += 28, T.a.isIOS ? (this.download_google.visible = !1, this.download_apple.y = this.download_google.y) : T.a.isAndroid && (this.download_apple.visible = !1)), E.a.isPoki && (this.download_apple.alpha = .5, this.download_google.visible = !1, this.app_logo_bsa.alpha = .5))
            },
            w = function() {
                function e(t) {
                    return s()(this, e), this.myScene = t, this.link = x.a.REBUBBLED_HOMEPAGE, this.btnConfig = {
                        text: "rebubbled.com",
                        size: 23,
                        fixY: 5
                    }, (u.a.isBS2 || u.a.isBS3) && (this.btnConfig.fixY = 0), this
                }
                return l()(e, [{
                    key: "openLink",
                    value: function() {
                        v.a.playSound(this.myScene, v.a.SND.UI_BUTTON), window.open(this.link, E.a.browserWindow)
                    }
                }]), e
            }(),
            I = a(135),
            P = a(58),
            A = a(20),
            L = (a(96), a(24)),
            M = a(26),
            O = a(12),
            D = a(29),
            B = a(74),
            R = a(1),
            W = function(e) {
                function t() {
                    return s()(this, t), r()(this, p()(t).call(this, {
                        key: "BS3_MainMenu"
                    }))
                }
                return y()(t, e), l()(t, [{
                    key: "create",
                    value: function() {
                        this.myTransition = new f.a(this).transitionOpen(), this.cameras.main.scrollX = T.a.cameraOffset.x, this.cameras.main.scrollY = T.a.cameraOffset.y, this.devilSprite = null, A.a.isLazyLoaded ? this._drawLazyStuff() : A.a.sceneLink.events.once(A.a.EVT_LOADED, this._drawLazyStuff, this);
                        var e = 5;
                        I.a.isUsingLeader() && e++, E.a.isCordova && 1 == T.a.isAndroid && e++;
                        var t = 170,
                            a = 196,
                            i = 48,
                            s = 36,
                            n = e * i + 5 * (e + 1),
                            l = 270 - n / 2 + 26.5,
                            o = 0;
                        new c.a(this, t, l + n * o / e, a, i, {
                            text: m.a.BS3.MAINMENU_START1,
                            size: s,
                            fixY: 0
                        }, this.btn_startGame.bind(this, _.a.MODES.SINGLE), this.btn_hover.bind(this, m.a.BS3.MAINMENU_START1, !0), this.btn_hover.bind(this, m.a.BS3.MAINMENU_START1, !1), !0, !0);
                        o++;
                        new c.a(this, t, l + n * o / e, a, i, {
                            text: m.a.BS3.MAINMENU_START2,
                            size: s,
                            fixY: 0
                        }, this.btn_startGame.bind(this, _.a.MODES.TWOP), this.btn_hover.bind(this, m.a.BS3.MAINMENU_START2, !0), this.btn_hover.bind(this, m.a.BS3.MAINMENU_START2, !1), !0);
                        o++;
                        new c.a(this, t, l + n * o / e, a, i, {
                            text: m.a.BS3.MAINMENU_SETTINGS,
                            size: s,
                            fixY: 0
                        }, this.btn_openSettings_BS3.bind(this), this.btn_hover.bind(this, m.a.BS3.MAINMENU_SETTINGS, !0), this.btn_hover.bind(this, m.a.BS3.MAINMENU_SETTINGS, !1), !0);
                        if (I.a.isUsingLeader()) {
                            o++;
                            new c.a(this, t, l + n * o / e, a, i, {
                                text: m.a.BS3.MAINMENU_SCORES,
                                size: s,
                                fixY: 0
                            }, this.btn_openGameOver.bind(this), this.btn_hover.bind(this, m.a.BS3.MAINMENU_SCORES, !0), this.btn_hover.bind(this, m.a.BS3.MAINMENU_SCORES, !1), !0)
                        }
                        if (E.a.isCordova) {
                            o++;
                            var r = new w(this);
                            new c.a(this, t, l + n * o / e, a, i, r.btnConfig, r.openLink.bind(r), null, null)
                        }
                        if (E.a.isCordova && 1 == T.a.isAndroid) {
                            o++;
                            new c.a(this, t, l + n * o / e, a, i, {
                                text: m.a.BS3.MAINMENU_QUIT,
                                size: s,
                                fixY: 0
                            }, navigator.app.exitApp)
                        }
                        var h = this.add.bitmapText(10 + T.a.cameraOffset.x, 465, u.a.fontNames.MENU, "Bubble Trouble / Bubble Struggle 3 (c) 2002 - Kresimir Cvitanovic".toUpperCase(), 16);
                        h.setOrigin(0, .5), E.a.isPoki || (h.setInteractive({
                            useHandCursor: !0
                        }), h.on("pointerup", (function() {
                            window.open(x.a.REBUBBLED_HOMEPAGE, "_blank")
                        })));
                        new c.a(this, u.a.gameWidth - 60 - T.a.notchOffset, 30, 100, i, {
                            text: m.a.BS3.MAINMENU_HELP,
                            size: s,
                            fixY: 0
                        }, this.btn_openHelp_BS3.bind(this), null, null, !0);
                        var p = this.add.text(u.a.gameWidth - 20, 470, "2022-12-22T05:05:11.031Z".substring(0, "2022-12-22T05:05:11.031Z".indexOf(".")), {
                            fontSize: 14,
                            color: "#a09e9e"
                        });
                        p.setOrigin(1, .5), p.alpha = .2;
                        new P.a(this, .65 * u.a.gameWidth, 30);
                        S.a.gameSettings.levelEditor.lastLevelEdited = null
                    }
                }, {
                    key: "_drawLazyStuff",
                    value: function() {
                        var e = this.add.sprite(.5 * u.a.gameWidth, .5 * u.a.gameHeight, "mainmenu_background");
                        this.spotlight = this.add.sprite(.62 * u.a.gameWidth, .5 * u.a.gameHeight, u.a.lazySpriteKey, "ui/spotlight.png"), this.spotlight.alpha = .15, e.depth = -1, this.spotlight.depth = -1, new g.a(this, 50, 417, u.a.lazySpriteKey, "ani_torch/torch_1.png", 1.3).anims.play("torch_burn");
                        var t = new g.a(this, 541, 423, u.a.lazySpriteKey, "ani_torch/torch_1.png", 1.3);
                        t.flipX = !0, t.anims.play("torch_burn", !0, 6), new g.a(this, 180, 75, u.a.lazySpriteKey, "ui/bs3_logo.psd").angle = -3;
                        new k(this, null, 420);
                        this.btn_hover(null, !1), this.backEdgeLeft = this.add.sprite(-u.a.gameWidth / 2, u.a.gameHeight / 2, "mainmenu_background"), this.backEdgeLeft.flipX = !0, this.backEdgeRight = this.add.sprite(1.5 * u.a.gameWidth, u.a.gameHeight / 2, "mainmenu_background"), this.backEdgeLeft.alpha = .25, this.backEdgeRight.alpha = this.backEdgeLeft.alpha;
                        var a = 140;
                        E.a.isPoki && (a += 30);
                        L.a.renderBadge(this, u.a.gameWidth - 60 - T.a.notchOffset, a, L.a.CurrentLevel, !0, .8), M.a.renderButton(this, u.a.gameWidth - 60 - T.a.notchOffset, a + 100, .8), B.a.shareSceneButton(this, u.a.gameWidth - 60 - T.a.notchOffset, a + 180, .8, R.a.SHARE_TYPE.ALL);
                        O.a.TaskUpdate(this, O.a.TASK_TYPE.REPEAT_LOGIN, Date.now())
                    }
                }, {
                    key: "btn_startGame",
                    value: function(e) {
                        b.a.log("MAIN_MENU", "STARTING" + e), _.a.newGame(e, 1), 0 == S.a.gameSettings.maxLevelUnlocked[e] ? this.myTransition.transitionToggle(!1, "GameScene") : (_.a.currentMode = e, this.myTransition.transitionToggle(!1, "BS3_LevelSelect"))
                    }
                }, {
                    key: "btn_openGameOver",
                    value: function() {
                        this.myTransition.transitionToggle(!1, "BT1_GameOver")
                    }
                }, {
                    key: "btn_hover",
                    value: function(e, t) {
                        null == this.devilSprite && A.a.isLazyLoaded && (this.devilSprite = new g.a(this, 412, 451, u.a.lazySpriteKey, "ui/menu_idle.png"));
                        var a = "ui/menu_idle.png";
                        if (t) switch (e) {
                            case m.a.BS3.MAINMENU_START1:
                                a = "ui/menu_start1.png", v.a.playSound(this, v.a.SND.UI_START_1P);
                                break;
                            case m.a.BS3.MAINMENU_START2:
                                a = "ui/menu_start2.png", v.a.playSound(this, v.a.SND.UI_START_2P)
                        } else a = "ui/menu_idle.png";
                        null != this.devilSprite && (this.devilSprite.setTexture(u.a.lazySpriteKey, a), this.spotlight.alpha = t ? .2 : .05)
                    }
                }, {
                    key: "btn_openSettings_BS3",
                    value: function() {
                        b.a.log("BS3_Settings", "Open scene!"), D.a.LogClick(D.a.CLICK_TYPE.SETTINGS), this.myTransition.transitionToggle(!1, "BS3_Settings")
                    }
                }, {
                    key: "btn_openHelp_BS3",
                    value: function() {
                        b.a.log("BS3_Help", "Open scene!"), D.a.LogClick(D.a.CLICK_TYPE.HELP), this.myTransition.transitionToggle(!1, "BS3_Help")
                    }
                }, {
                    key: "btn_deleteSaveData",
                    value: function() {
                        S.a.clearAllLocalStorage(!0)
                    }
                }]), t
            }(Phaser.Scene);
        t.default = W
    },
    1147: function(e, t, a) {
        "use strict";
        a.r(t);
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = (a(23), a(21)),
            c = a(28),
            m = a(0),
            u = a(48),
            g = a(9),
            v = a(4),
            f = (a(44), a(67), a(14)),
            S = a(175),
            E = a(18),
            x = a(2),
            T = a(36),
            b = a(20),
            k = (a(120), a(176)),
            w = a(31),
            I = function(e) {
                function t() {
                    return s()(this, t), r()(this, p()(t).call(this, {
                        key: "BS3_Settings"
                    }))
                }
                return y()(t, e), l()(t, [{
                    key: "create",
                    value: function() {
                        this.myTransition = new u.a(this).transitionOpen(), this.cameras.main.scrollX = f.a.cameraOffset.x, this.cameras.main.scrollY = f.a.cameraOffset.y, b.a.isLazyLoaded ? this._drawLazyStuff() : b.a.sceneLink.events.once(b.a.EVT_LOADED, this._drawLazyStuff, this), this._menu_centerx = 50, this._menu_centery = 80, this._menu_btn_height = 47, this.font_size = 36, this.showKeys();
                        var e = {
                                x: 50,
                                y: 260
                            },
                            t = {
                                x: 50,
                                y: 320
                            },
                            a = {
                                x: 552,
                                y: 430
                            };
                        f.a.isMobile && (e = {
                            x: 220,
                            y: 90
                        }, t = {
                            x: 220,
                            y: 160
                        }, a = {
                            x: 310,
                            y: 430
                        });
                        new S.a(this, e.x, e.y);
                        if (this.add.bitmapText(t.x + 35, t.y, m.a.fontNames.MENU, "Show BONUS name", 35).setOrigin(0, .5), this.bonus_btn = new _.a(this, t.x, t.y, 60, 50, {
                                text: "ON",
                                size: 32
                            }, this.renderBonusButton.bind(this, !0)), this.renderBonusButton(), E.a.isCordova && !v.a.gameSettings.noads) {
                            var i = new _.a(this, 552, 405, 146, 47, {
                                text: c.a.BS3.RESTORE_IAP,
                                size: 19,
                                fixY: 0
                            }, store.refresh);
                            E.a.isCordova || (i.myText.alpha = .5)
                        }
                        new _.a(this, 70, 430, 100, this._menu_btn_height, {
                            text: c.a.BS3.MENU_BACK,
                            size: this.font_size,
                            fixY: 0
                        }, this.myTransition.transitionToggle.bind(this.myTransition, !1, "BS3_MainMenu"), null, null, !0, !0);
                        new k.a(this, a.x, a.y);
                        var s = new _.a(this, 552, 450, 146, 40, {
                            text: "PRIVACY POLICY",
                            size: 15,
                            fixY: 0
                        }, (function() {
                            window.open(w.a.PRIVACY_POLICY.BS3, E.a.browserWindow)
                        }));
                        s.backgroundNinePatch.ninePatch.alpha = .5, E.a.isPoki && x.a.debugLog ? s.backgroundNinePatch.ninePatch.alpha = .2 : E.a.isCordova || s.setVisibleMyUIButton(!1)
                    }
                }, {
                    key: "_drawLazyStuff",
                    value: function() {
                        this.add.sprite(.5 * m.a.gameWidth, .5 * m.a.gameHeight, "mainmenu_background");
                        this.add.sprite(.62 * m.a.gameWidth, .5 * m.a.gameHeight, m.a.lazySpriteKey, "ui/spotlight.png").alpha = .2;
                        new g.a(this, 50, 417, m.a.lazySpriteKey, "ani_torch/torch_1.png", 1.3);
                        new g.a(this, 541, 423, m.a.lazySpriteKey, "ani_torch/torch_1.png", 1.3).flipX = !0;
                        new g.a(this, 412, 451, m.a.lazySpriteKey, "ui/menu_start2.png");
                        var e = new Phaser.Geom.Rectangle(-20, -20, m.a.gameWidth + 40, m.a.gameHeight + 40),
                            t = this.add.graphics();
                        t.fillStyle(0, .65), t.fillRectShape(e)
                    }
                }, {
                    key: "renderBonusButton",
                    value: function(e) {
                        e && (v.a.gameSettings.showPickedItemName = !v.a.gameSettings.showPickedItemName), v.a.gameSettings.showPickedItemName ? this.bonus_btn.changeTextOrIcon({
                            text: "ON",
                            size: 32
                        }) : this.bonus_btn.changeTextOrIcon({
                            text: "OFF",
                            size: 32
                        })
                    }
                }, {
                    key: "showKeys",
                    value: function() {
                        if (!f.a.isMobile) {
                            var e = new Phaser.Geom.Rectangle(10, 10, m.a.gameWidth - 20, m.a.gameHeight - 20);
                            this.changeKeysBack = this.add.graphics(), this.changeKeysBack.fillStyle(0, .95), this.changeKeysBack.fillRectShape(e), this.changeKeysText = this.add.bitmapText(m.a.gameWidth / 2, m.a.gameHeight / 2, m.a.fontNames.MENU, "Press new key...".toUpperCase(), 36), this.changeKeysText.setOrigin(.5), this.keyboard_btn1_left = new _.a(this, this._menu_centerx, this._menu_centery + 60, 60, this._menu_btn_height, {
                                text: "<-",
                                size: this.font_size,
                                fixY: 0
                            }, this.btn_startListener.bind(this, this._setKey, "left", 1)), this.keyboard_btn1_right = new _.a(this, this._menu_centerx + 130, this._menu_centery + 60, 60, this._menu_btn_height, {
                                text: "->",
                                size: this.font_size,
                                fixY: 0
                            }, this.btn_startListener.bind(this, this._setKey, "right", 1)), this.keyboard_btn1_up = new _.a(this, this._menu_centerx + 65, this._menu_centery + 30, 60, this._menu_btn_height, {
                                text: "^",
                                size: this.font_size,
                                fixY: 0
                            }, this.btn_startListener.bind(this, this._setKey, "up", 1)), this.keyboard_btn1_down = new _.a(this, this._menu_centerx + 65, this._menu_centery + 90, 60, this._menu_btn_height, {
                                text: "~",
                                size: this.font_size,
                                fixY: 0
                            }, this.btn_startListener.bind(this, this._setKey, "down", 1)), this.keyboard_btn1_shoot = new _.a(this, this._menu_centerx + 210, this._menu_centery + 60, 60, this._menu_btn_height, {
                                text: "SPC",
                                size: this.font_size,
                                fixY: 0
                            }, this.btn_startListener.bind(this, this._setKey, "shoot", 1));
                            var t = 330;
                            this.keyboard_btn2_left = new _.a(this, this.keyboard_btn1_left.mid_x + t, this.keyboard_btn1_left.mid_y, 60, this._menu_btn_height, {
                                text: "2<-",
                                size: this.font_size,
                                fixY: 0
                            }, this.btn_startListener.bind(this, this._setKey, "left", 2)), this.keyboard_btn2_right = new _.a(this, this.keyboard_btn1_right.mid_x + t, this.keyboard_btn1_right.mid_y, 60, this._menu_btn_height, {
                                text: "2->",
                                size: this.font_size,
                                fixY: 0
                            }, this.btn_startListener.bind(this, this._setKey, "right", 2)), this.keyboard_btn2_up = new _.a(this, this.keyboard_btn1_up.mid_x + t, this.keyboard_btn1_up.mid_y, 60, this._menu_btn_height, {
                                text: "2^",
                                size: this.font_size,
                                fixY: 0
                            }, this.btn_startListener.bind(this, this._setKey, "up", 2)), this.keyboard_btn2_down = new _.a(this, this.keyboard_btn1_down.mid_x + t, this.keyboard_btn1_down.mid_y, 60, this._menu_btn_height, {
                                text: "2~",
                                size: this.font_size,
                                fixY: 0
                            }, this.btn_startListener.bind(this, this._setKey, "down", 2)), this.keyboard_btn2_shoot = new _.a(this, this.keyboard_btn1_shoot.mid_x + t, this.keyboard_btn1_shoot.mid_y, 60, this._menu_btn_height, {
                                text: "2PC",
                                size: this.font_size,
                                fixY: 0
                            }, this.btn_startListener.bind(this, this._setKey, "shoot", 2));
                            this.add.bitmapText(this._menu_centerx + 50, this._menu_centery - 50, m.a.fontNames.MENU, "PLAYER 1", 35), this.add.bitmapText(this._menu_centerx + 50 + t, this._menu_centery - 50, m.a.fontNames.MENU, "PLAYER 2", 35);
                            this._renderPlayerKeys()
                        }
                    }
                }, {
                    key: "_renderPlayerKeys",
                    value: function() {
                        this.input.keyboard.removeListener("keydown"), this.changeKeysBack.visible = !1, this.changeKeysText.visible = !1, x.a.log("SETT", "Rendering keys"), this._showKeys()
                    }
                }, {
                    key: "btn_startListener",
                    value: function(e, t, a) {
                        if (!f.a.isMobile) {
                            this.input.keyboard.removeListener("keydown");
                            var i = this;
                            this.input.keyboard.on("keydown", (function(s) {
                                x.a.log("SETT", "New key setting.....", "key:", s.key, "code:", s.keyCode, i.input.keyboard), "P" != s.key && "p" != s.key && "Escape" != s.key && e(s.key, s.keyCode, t, a), i.input.keyboard.removeListener("keydown"), i._renderPlayerKeys(), T.a.disableAllButtons(!1), s.stopImmediatePropagation(), s.stopPropagation()
                            })), this.changeKeysBack.visible = !0, this.children.bringToTop(this.changeKeysBack), this.changeKeysText.visible = !0, this.children.bringToTop(this.changeKeysText), T.a.disableAllButtons(!0), x.a.log("SETT", "Waiting for new key..", this.input.keyboard)
                        }
                    }
                }, {
                    key: "_setKey",
                    value: function(e, t, a, i) {
                        switch (a) {
                            case "left":
                            case "right":
                            case "up":
                            case "down":
                            case "shoot":
                                v.a.gameSettings.playerKeys["player" + i][a + "_txt"] = function(e) {
                                    return x.a.log("Getting key", e), " " == (e += "") ? "SPC" : "ArrowLeft" == e ? "◀" : "ArrowRight" == e ? "▶" : "ArrowUp" == e ? "▲" : "ArrowDown" == e ? "▼" : "Shift" == e ? "SHF" : "Control" == e ? "CTR" : "Meta" == e ? "CMD" : (e.length > 3 && (e = e.substr(0, 3)), e.toUpperCase())
                                }(e), v.a.gameSettings.playerKeys["player" + i][a] = t, v.a.saveUserSettings();
                                break;
                            default:
                                console.error("Unknown action (" + a + ") setting for key (" + key + ").")
                        }
                    }
                }, {
                    key: "_showKeys",
                    value: function() {
                        if (!f.a.isMobile) {
                            var e = v.a.gameSettings.playerKeys.player1,
                                t = v.a.gameSettings.playerKeys.player2;
                            this.keyboard_btn1_left.changeTextOrIcon({
                                text: e.left_txt,
                                size: 22,
                                bitmapText: !1
                            }), this.keyboard_btn1_right.changeTextOrIcon({
                                text: e.right_txt,
                                size: 22,
                                bitmapText: !1
                            }), this.keyboard_btn1_up.changeTextOrIcon({
                                text: e.up_txt,
                                size: 22,
                                bitmapText: !1
                            }), this.keyboard_btn1_down.changeTextOrIcon({
                                text: e.down_txt,
                                size: 22,
                                bitmapText: !1
                            }), this.keyboard_btn1_shoot.changeTextOrIcon({
                                text: e.shoot_txt,
                                size: 22,
                                bitmapText: !1
                            }), this.keyboard_btn2_left.changeTextOrIcon({
                                text: t.left_txt,
                                size: 22,
                                bitmapText: !1
                            }), this.keyboard_btn2_right.changeTextOrIcon({
                                text: t.right_txt,
                                size: 22,
                                bitmapText: !1
                            }), this.keyboard_btn2_up.changeTextOrIcon({
                                text: t.up_txt,
                                size: 22,
                                bitmapText: !1
                            }), this.keyboard_btn2_down.changeTextOrIcon({
                                text: t.down_txt,
                                size: 22,
                                bitmapText: !1
                            }), this.keyboard_btn2_shoot.changeTextOrIcon({
                                text: t.shoot_txt,
                                size: 22,
                                bitmapText: !1
                            })
                        }
                    }
                }]), t
            }(Phaser.Scene);
        t.default = I
    },
    12: function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.d(__webpack_exports__, "a", (function() {
            return MyTasks
        }));
        var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5),
            _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__),
            _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6),
            _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__),
            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17),
            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__),
            _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2),
            _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4),
            _MyXpProgress__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(24),
            _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(20),
            _game_objects_MyGameObject__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3),
            _build_platforms_GameConfigs_GameConfig__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(0),
            _my_sounds_MySoundManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(15),
            _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(1),
            _MyTaskRules__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(450),
            _game_channels_ads_MyAds__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(37),
            _MyUpgrades__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(26),
            _my_game_logic_MyGame__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(8),
            _game_channels_MyBuildTargets__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(18),
            _helpers_MyDeviceInfo__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(14),
            MyTasks = function() {
                function MyTasks() {
                    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, MyTasks)
                }
                return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(MyTasks, null, [{
                    key: "init",
                    value: function(e) {
                        if (null == MyTasks._TASKS) {
                            MyTasks._TASKS = e.cache.json.get("all_tasks").tasks, this.fixTasks();
                            for (var t = [], a = 0; a < MyTasks._TASKS.length; a++) {
                                var i = 0;
                                MyTasks._TASKS[a].sort((function(e, t) {
                                    return e.rewXp - t.rewXp
                                }));
                                for (var s = 0; s < MyTasks._TASKS[a].length; s++) {
                                    var n = MyTasks._TASKS[a][s];
                                    MyTasks.parseRule(n), n.taskType != MyTasks.TASK_TYPE.BUBBLE_MASTER && (i += n.rewXp), t.includes(n.uid) && _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.error("%c Duplicate task UID found: [" + n.uid + "], " + a + ", " + s, "color: yellow; font-size: 24px; background-color: blue;"), t.push(n.uid), 0 != _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.rushToLevel && a < _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.rushToLevel && (_my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.tasksCompleted.includes(n.uid) || _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.tasksCompleted.push(n.uid), _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.tasksCollected.includes(n.uid) || _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.tasksCollected.push(n.uid))
                                }
                                var l = 0;
                                a > 0 && (l = MyTasks.LEVEL_POINTS[a - 1]), MyTasks.LEVEL_POINTS.push(i + l)
                            }
                            MyTasks.LEVEL_POINTS.length != _MyXpProgress__WEBPACK_IMPORTED_MODULE_5__.a.RANK_NAMES.length && _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.error("Incorrect task levels", MyTasks.LEVEL_POINTS.length, MyTasks.LEVEL_POINTS, ", need: ", _MyXpProgress__WEBPACK_IMPORTED_MODULE_5__.a.RANK_NAMES.length, _MyXpProgress__WEBPACK_IMPORTED_MODULE_5__.a.RANK_NAMES), _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.log("inited level with level points", MyTasks.LEVEL_POINTS), MyTasks.initCrntLevelTasks()
                        }
                    }
                }, {
                    key: "fixTasks",
                    value: function() {
                        if (_helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.log("TASKS", "Fixing tasks."), _game_channels_MyBuildTargets__WEBPACK_IMPORTED_MODULE_15__.a.isCordova || _helpers_MyDeviceInfo__WEBPACK_IMPORTED_MODULE_16__.a.isMobile) {
                            _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.log("TASKS", "Fixing task CMPLT_EDITOR_LVL");
                            e: for (var e = 0; e < MyTasks._TASKS.length - 1; e++)
                                for (var t = 0; t < MyTasks._TASKS[e].length - 1; t++)
                                    if (-1 != MyTasks._TASKS[e][t].taskRule.indexOf(MyTasks.TASK_TYPE.CMPLT_EDITOR_LVL)) {
                                        MyTasks._TASKS[e].splice(t, 1), _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.log("TASKS", "Fixed task! CMPLT_EDITOR_LVL");
                                        break e
                                    }
                        }
                    }
                }, {
                    key: "parseRule",
                    value: function(e) {
                        var t = e.taskRule.split(",");
                        e.taskType = t[0], e.taskMathOperator = t[1], e.goalNum = t[2];
                        for (var a = 1; a < t.length; a++) {
                            var i = "|" + a + "|";
                            e.taskDescr = e.taskDescr.replace(i, t[a]), e.taskType == MyTasks.TASK_TYPE.SHOT_WEAPON && 3 == a ? e.taskDescr = e.taskDescr.replace(t[a], MyTasks.WeaponToString(t[a])) : e.taskType == MyTasks.TASK_TYPE.COLLECT_ITEM && 3 == a || e.taskType == MyTasks.TASK_TYPE.COLLECT_ITEM_LVL && 4 == a ? e.taskDescr = e.taskDescr.replace(t[a], MyTasks.ItemToString(t[a])) : e.taskType == MyTasks.TASK_TYPE.USE_UPGRADE && 3 == a || e.taskType == MyTasks.TASK_TYPE.DO_UPGRADE && 3 == a ? e.taskDescr = e.taskDescr.replace(t[a], MyTasks.UpgradeToString(t[a])) : e.taskType == MyTasks.TASK_TYPE.POP_REASON && 3 == a ? e.taskDescr = e.taskDescr.replace(t[a], MyTasks.PopReasonToString(t[a])) : e.taskType == MyTasks.TASK_TYPE.SHOOT_BALL_TYPE && 3 == a && (e.taskDescr = e.taskDescr.replace(t[a], MyTasks.BallShotTypeToString(t[a])))
                        }
                        var s = t.slice(3);
                        e.ruleFragment1 = s[0] || null, e.ruleFragment2 = s[1] || null, e.taskDescrAdbl && _game_channels_ads_MyAds__WEBPACK_IMPORTED_MODULE_12__.a.adBlockerEnabled && (e.taskDescr += " (DISABLE ADBLOCKER)")
                    }
                }, {
                    key: "initCrntLevelTasks",
                    value: function() {
                        for (var e in MyTasks._taskShortcuts = {}, MyTasks.TASK_TYPE) {
                            var t = MyTasks.TASK_TYPE[e];
                            null == MyTasks._taskShortcuts[t] && (MyTasks._taskShortcuts[t] = [])
                        }
                        for (var a = 0; a < MyTasks._TASKS[_MyXpProgress__WEBPACK_IMPORTED_MODULE_5__.a.CurrentLevel].length; a++) {
                            var i = MyTasks._TASKS[_MyXpProgress__WEBPACK_IMPORTED_MODULE_5__.a.CurrentLevel][a];
                            _MyTaskRules__WEBPACK_IMPORTED_MODULE_11__.a.generateMethods(i), i.methods.resetStartVal(!0), _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.tasksCompleted.includes(i.uid) || MyTasks._taskShortcuts[i.taskType].push(i)
                        }
                        _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.log("Initeddtasks", MyTasks._taskShortcuts), _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.log("Inited data slosts", _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.tasksStats)
                    }
                }, {
                    key: "RenderTaskFinishedNotification",
                    value: function(e) {
                        _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.log("RenderTaskFinishedNotification", e);
                        for (var t = 0; t < MyTasks._taskShortcuts[e.taskType].length; t++)
                            if (MyTasks._taskShortcuts[e.taskType][t] == e) {
                                MyTasks._taskShortcuts[e.taskType].splice(t, 1);
                                break
                            } null == _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.taskCompleteDateFirst && (_my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.taskCompleteDateFirst = Date.now());
                        for (var a = -1, i = 0; i <= MyTasks.numOfTaskNotif.length; i++)
                            if (0 == MyTasks.numOfTaskNotif[i]) {
                                a = i, MyTasks.numOfTaskNotif[i] = !0;
                                break
                            } if (-1 != a) {
                            var s = _build_platforms_GameConfigs_GameConfig__WEBPACK_IMPORTED_MODULE_8__.a.gameWidth,
                                n = 9;
                            (_build_platforms_GameConfigs_GameConfig__WEBPACK_IMPORTED_MODULE_8__.a.isBS2 || _build_platforms_GameConfigs_GameConfig__WEBPACK_IMPORTED_MODULE_8__.a.isBS3) && (n = 2);
                            var l = "",
                                o = 13839156;
                            _build_platforms_GameConfigs_GameConfig__WEBPACK_IMPORTED_MODULE_8__.a.isBS3 && (o = 7090600);
                            _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.sceneLink.scene.bringToTop();
                            var r = _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.sceneLink.add.container();
                            _game_objects_MyGameObject__WEBPACK_IMPORTED_MODULE_7__.a.mySpriteDepth(_game_objects_MyGameObject__WEBPACK_IMPORTED_MODULE_7__.a.RENDER_DEPTH.OVER_GAME, r);
                            var h = 0 + 40 * a,
                                p = _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.sceneLink.add.graphics();
                            p.fillStyle(o, 1), p.fillRect(0, h, s, 35), p.lineStyle(2, 14475529, .8), p.strokeRect(0, h, s, 35);
                            var d = "DONE: " + e.taskDescr;
                            d.length > 50 && (d = d.substring(0, 50) + "..");
                            var y = _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.sceneLink.add.bitmapText(10, h + n, _build_platforms_GameConfigs_GameConfig__WEBPACK_IMPORTED_MODULE_8__.a.fontNames.MENU, d, 26);
                            if (y.setOrigin(0, 0), r.add([p, y]), "" != l) {
                                l = _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.sceneLink.add.sprite(180, h + 17.5, _build_platforms_GameConfigs_GameConfig__WEBPACK_IMPORTED_MODULE_8__.a.lazySpriteKey, l);
                                r.add([l])
                            }
                            r.alpha = 0;
                            _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.sceneLink.add.tween({
                                targets: r,
                                duration: 350,
                                delay: 250 * a,
                                alpha: 1,
                                x: {
                                    from: -50,
                                    to: 0
                                },
                                yoyo: !0,
                                hold: 3e3,
                                onComplete: function(e) {
                                    MyTasks.numOfTaskNotif[a] = !1, r.destroy()
                                },
                                onStart: function(e) {
                                    _my_sounds_MySoundManager__WEBPACK_IMPORTED_MODULE_9__.a.playSound(_my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.sceneLink, _my_sounds_MySoundManager__WEBPACK_IMPORTED_MODULE_9__.a.SND.RETENTION_TASK_CMPLTD)
                                },
                                ease: Phaser.Math.Easing.Sine.InOut
                            })
                        }
                    }
                }, {
                    key: "_renderPinnedTaskProgress",
                    value: function(e, t) {
                        _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.sceneLink.scene.bringToTop();
                        var a = _build_platforms_GameConfigs_GameConfig__WEBPACK_IMPORTED_MODULE_8__.a.gameWidth / 2,
                            i = 3;
                        (_build_platforms_GameConfigs_GameConfig__WEBPACK_IMPORTED_MODULE_8__.a.isBS2 || _build_platforms_GameConfigs_GameConfig__WEBPACK_IMPORTED_MODULE_8__.a.isBS3) && (i = 0);
                        if (null != _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.taskPinned && _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.taskPinned == e.uid) {
                            null != _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.pinnedTaskContainer && _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.pinnedTaskContainer.destroy(), _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.pinnedTaskContainer = _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.sceneLink.add.container(), _game_objects_MyGameObject__WEBPACK_IMPORTED_MODULE_7__.a.mySpriteDepth(_game_objects_MyGameObject__WEBPACK_IMPORTED_MODULE_7__.a.RENDER_DEPTH.UNDER_GAME, _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.pinnedTaskContainer);
                            var s = _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.sceneLink.add.graphics(),
                                n = _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.sceneLink.add.bitmapText(a + -2, 12 + i, _build_platforms_GameConfigs_GameConfig__WEBPACK_IMPORTED_MODULE_8__.a.fontNames.MENU, e.taskDescr + ": " + t, 22);
                            n.setOrigin(.5, .5);
                            var l = n.width + 20,
                                o = n.height + 3;
                            s.fillStyle(9568444, 1), s.lineStyle(2, 14475529, .8), s.fillRect(a - l / 2, 12 - o / 2, l, o), s.strokeRect(a - l / 2, 12 - o / 2, l, o), _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.pinnedTaskContainer.add([s, n]), _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.pinnedTaskContainer.alpha = .8, null != _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.pinnedTaskTween && _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.pinnedTaskTween.stop(), _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.pinnedTaskTween = _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.sceneLink.add.tween({
                                targets: _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.pinnedTaskContainer,
                                alpha: 0,
                                duration: 200,
                                delay: 3e3
                            })
                        }
                    }
                }, {
                    key: "resetLevelTasksData",
                    value: function() {
                        _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.log("MyTasks", "Reseting levle tasks data to null", _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.tasksStats), _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.tasksStats = {}, MyTasks.initCrntLevelTasks()
                    }
                }, {
                    key: "TaskUpdate",
                    value: function(e, t, a) {
                        for (var i = arguments.length, s = new Array(i > 3 ? i - 3 : 0), n = 3; n < i; n++) s[n - 3] = arguments[n];
                        _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.isLazyLoaded && MyTasks._taskShortcuts[t].forEach((function(t) {
                            MyTasks._isTaskActive.apply(MyTasks, [e, t].concat(s)) && t.methods.updateAndNotify(a)
                        }))
                    }
                }, {
                    key: "TaskUpdateDontNotify",
                    value: function(e, t, a) {
                        for (var i = arguments.length, s = new Array(i > 3 ? i - 3 : 0), n = 3; n < i; n++) s[n - 3] = arguments[n];
                        _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.isLazyLoaded && MyTasks._taskShortcuts[t].forEach((function(t) {
                            MyTasks._isTaskActive.apply(MyTasks, [e, t].concat(s)) && t.methods.updateValue(a)
                        }))
                    }
                }, {
                    key: "TaskIncrement",
                    value: function(e, t, a) {
                        for (var i = arguments.length, s = new Array(i > 3 ? i - 3 : 0), n = 3; n < i; n++) s[n - 3] = arguments[n];
                        _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.isLazyLoaded && MyTasks._taskShortcuts[t].forEach((function(t) {
                            MyTasks._isTaskActive.apply(MyTasks, [e, t].concat(s)) && t.methods.incrementAndNotify(a)
                        }))
                    }
                }, {
                    key: "TaskIncrementDontNotify",
                    value: function(e, t, a) {
                        for (var i = arguments.length, s = new Array(i > 3 ? i - 3 : 0), n = 3; n < i; n++) s[n - 3] = arguments[n];
                        _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.isLazyLoaded && MyTasks._taskShortcuts[t].forEach((function(t) {
                            MyTasks._isTaskActive.apply(MyTasks, [e, t].concat(s)) && t.methods.incrementValue(a)
                        }))
                    }
                }, {
                    key: "TaskCheckAndNotify",
                    value: function(e, t) {
                        for (var a = arguments.length, i = new Array(a > 2 ? a - 2 : 0), s = 2; s < a; s++) i[s - 2] = arguments[s];
                        _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.isLazyLoaded && MyTasks._taskShortcuts[t].forEach((function(t) {
                            MyTasks._isTaskActive.apply(MyTasks, [e, t].concat(i)) && t.methods.notifyIfComplete()
                        }))
                    }
                }, {
                    key: "TaskReset",
                    value: function(e, t) {
                        for (var a = arguments.length, i = new Array(a > 2 ? a - 2 : 0), s = 2; s < a; s++) i[s - 2] = arguments[s];
                        _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.isLazyLoaded && MyTasks._taskShortcuts[t].forEach((function(t) {
                            MyTasks._isTaskActive.apply(MyTasks, [e, t].concat(i)) && t.methods.resetStartVal(!1)
                        }))
                    }
                }, {
                    key: "TaskUpdateIfCondition",
                    value: function TaskUpdateIfCondition(gameScene, taskType, value, mathOperator) {
                        for (var _len7 = arguments.length, fragments = new Array(_len7 > 4 ? _len7 - 4 : 0), _key7 = 4; _key7 < _len7; _key7++) fragments[_key7 - 4] = arguments[_key7];
                        _my_scenes_LazyloadScene__WEBPACK_IMPORTED_MODULE_6__.a.isLazyLoaded && MyTasks._taskShortcuts[taskType].forEach((function(t) {
                            MyTasks._isTaskActive.apply(MyTasks, [gameScene, t].concat(fragments)) && eval(value + mathOperator + t.methods.getValue()) && t.methods.updateAndNotify(value)
                        }))
                    }
                }, {
                    key: "_isTaskActive",
                    value: function(e, t) {
                        var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                            i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                        if (a != t.ruleFragment1 || i != t.ruleFragment2) return t.methods.__debug("VALIDATION FAIL fragments don't match: ", a, "<>", t.ruleFragment1, " -> ", i, "<>", t.ruleFragment2), !1;
                        var s = !1;
                        t.taskType == MyTasks.TASK_TYPE.COMPLETE_PACK_LVLS && t.ruleFragment1 == _my_game_logic_MyGame__WEBPACK_IMPORTED_MODULE_14__.a.customPack.packName && (s = !0);
                        var n = !1;
                        return t.taskType == MyTasks.TASK_TYPE.CMPLT_EDITOR_LVL && (n = !0), null == _my_game_logic_MyGame__WEBPACK_IMPORTED_MODULE_14__.a.customPack || s ? null != e && null != e.CrntLvl && e.CrntLvl.isEditorLevel && !n ? (t.methods.__debug("VALIDATION FAIL due: gameScene.CrntLvl != null && gameScene.CrntLvl.isEditorLevel"), !1) : _my_game_logic_MyGame__WEBPACK_IMPORTED_MODULE_14__.a.currentMode == _my_game_logic_MyGame__WEBPACK_IMPORTED_MODULE_14__.a.MODES.SINGLE || s ? null == _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.tasksStats[t.taskType] ? (t.methods.__debug("VALIDATION FAIL due: MyStorageUtils.gameSettings.tasksStats[task.taskType]", t.taskType, _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.tasksStats), !1) : (t.methods.__debug("Validation success:", _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.tasksStats[t.taskType]), !0) : (t.methods.__debug("VALIDATION FAIL due: MyGame.currentMode != MyGame.MODES.SINGLE && !packSpecific", _my_game_logic_MyGame__WEBPACK_IMPORTED_MODULE_14__.a.currentMode, s), !1) : (t.methods.__debug("VALIDATION FAIL due: MyGame.customPack != null && !packSpecific"), !1)
                    }
                }, {
                    key: "ItemToString",
                    value: function(e) {
                        return e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.NONE ? "" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.POINTS1 ? "BONUS 100 POINTS" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.POINTS2 ? "BONUS 200 POINTS" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.POINTS3 ? "BONUS 300 POINTS" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.POINTS4 ? "BONUS 400 POINTS" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.W_SINGLE ? "SINGLE HARPOON" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.W_HOOK ? "HOOK WEAPON" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.W_MINE ? "MINE WEAPON" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.W_LASER ? "LASER WEAPON" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.E_LIFE ? "EXTRA LIFE" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.S_TIME ? "SLOW TIME" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.S_PLAIN ? "SHIELD PLAIN" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.E_TIME ? "EXTRA TIME" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.DYNAMITE ? "DYNAMITE" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.FREEZE ? "FREEZE TIME" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.MEDAL ? "MEDAL" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.S_INVI ? "INVINCIBLE SHIELD" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.SPEED ? "SPEED UP" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_TYPE.W_DOUBLE ? "DOUBLE HARPOON" : void _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.error("Unknown item:", e)
                    }
                }, {
                    key: "WeaponToString",
                    value: function(e) {
                        return e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.SHOT_TYPE.SINGLE ? "'SINGLE HARPOON'" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.SHOT_TYPE.HOOK ? "'HOOK'" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.SHOT_TYPE.LASER ? "'LASER'" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.SHOT_TYPE.MINE ? "'MINE'" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.SHOT_TYPE.DOUBLE ? "'DOUBLE HARPOON'" : (_helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.error("Unknown weapon:", e), null)
                    }
                }, {
                    key: "UpgradeToString",
                    value: function(e) {
                        for (var t = 0; t < _MyUpgrades__WEBPACK_IMPORTED_MODULE_13__.a.ITEMS.length; t++)
                            if (_MyUpgrades__WEBPACK_IMPORTED_MODULE_13__.a.ITEMS[t].modType == e) return "'" + _MyUpgrades__WEBPACK_IMPORTED_MODULE_13__.a.ITEMS[t].title + "'";
                        return _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.error("Unknown modType (UpgradeToString):", e), null
                    }
                }, {
                    key: "PopReasonToString",
                    value: function(e) {
                        if (e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.POP_REASON.SHIELD_TANK) {
                            var t = MyTasks.UpgradeToString(_helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_TANK);
                            if (null != t) return t
                        } else {
                            if (e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.POP_REASON.SPIKEBURST) return "SPIKE WALLS";
                            if (e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.POP_REASON.SHIELD_PLAIN) return "PLAIN SHIELD";
                            if (e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.POP_REASON.DYNAMITE) return "DYNAMITE BONUS";
                            if (e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.POP_REASON.MEDAL) return "MEDAL BONUS"
                        }
                        return _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.error("Unknown popReason:", e), null
                    }
                }, {
                    key: "BallShotTypeToString",
                    value: function(e) {
                        return e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.BALL_TYPE_INFO.METAL ? "METAL" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.BALL_TYPE_INFO.GHOST ? "GHOST" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.BALL_TYPE_INFO.NORMAL ? "PLAIN" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.BALL_TYPE_INFO.PENTA ? "PENTA/UMBRELLA" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.BALL_TYPE_INFO.REVERSE ? "BLACK" : e == _helpers_Consts__WEBPACK_IMPORTED_MODULE_10__.a.BALL_TYPE_INFO.SPLIT4 ? "SPLIT-4" : (_helpers_MyDebug__WEBPACK_IMPORTED_MODULE_3__.a.error("Unknown popReason:", popReason), null)
                    }
                }, {
                    key: "Experience",
                    get: function() {
                        for (var e = 0, t = 0; t < MyTasks._TASKS.length; t++)
                            for (var a = 0; a < MyTasks._TASKS[t].length; a++) {
                                var i = MyTasks._TASKS[t][a];
                                _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_4__.a.gameSettings.tasksCollected.includes(i.uid) && (e += i.rewXp)
                            }
                        return e
                    }
                }]), MyTasks
            }();
        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(MyTasks, "_TASKS", null), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(MyTasks, "_taskShortcuts", {}), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(MyTasks, "TASK_TYPE", {
            LEVEL_COMPLETED: "lvlComplete",
            TOTAL_BUBBLES_POPPED: "totalBubbles",
            LEVEL_POINTS: "lvlPoints",
            TOTAL_REVIVES: "totalRevives",
            TOTAL_DEATHS: "totalDeath",
            TIME_LEFT: "timeLeft",
            GAMES_PLAYED: "gamesPlayed",
            SHOT_WEAPON: "shotWeapon",
            SHOT_ANY_WEAPON_ON_LVL: "shotAnyWeaponOnLvl",
            COLLECT_ITEM: "collectItem",
            COLLECT_ITEM_LVL: "collectItemLvl",
            DO_UPGRADE: "doUpgrade",
            USE_UPGRADE: "useUpgrade",
            DONT_MISS: "dontMiss",
            REPEAT_LOGIN: "repeatLogin",
            BALL_WALL_EDGE: "ballwallEdge",
            LOSE_SHIELD_PLAIN: "loseShieldPlain",
            LOSE_SHIELD_INVINCIBLE: "loseShieldInvincible",
            PHASE_INSIDE_BUBBLE: "phaseInsideBubble",
            GAME_POINTS: "gamePoints",
            CONSECUTIVE_LEVELS: "consecutiveLevels",
            LEVEL_COMBOS: "lvlCombo",
            POP_REASON: "popReason",
            BUBBLE_MASTER: "bubbleMaster",
            COMPLETE_PACK_LVLS: "completePackLvls",
            CMPLT_EDITOR_LVL: "cmpltEditorLvl",
            SHOOT_BALL_TYPE: "shootBallType",
            SPIKE_RUN: "spikeRun"
        }), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(MyTasks, "LEVEL_POINTS", []), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(MyTasks, "numOfTaskNotif", [!1, !1, !1])
    },
    121: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, s) {
            t.on(a, i, s), e.sys.events.once("shutdown", (function() {
                t.off(a, i, s)
            }))
        }
        a.d(t, "a", (function() {
            return i
        }))
    },
    122: function(e, t, a) {
        "use strict";
        a(78);
        var i = a(3),
            s = a(32),
            n = a(38),
            l = a(15),
            o = a(0),
            r = a(9),
            h = a(23),
            p = a(28),
            d = a(21),
            y = a(53),
            _ = a(2),
            c = a(36),
            m = (a(4), a(8), a(1));
        a(74), a(14);
        t.a = function(e) {
            _.a.log("Final level start.");
            var t = "BT1_MainMenu";
            o.a.isBS2 ? t = "BS2_MainMenu" : o.a.isBS3 && (t = "BS3_MainMenu"), e.ballManager._allBubblesArePopped = function() {
                return !1
            }, e.startLevelSound = l.a.playSound(e, l.a.SND.FINAL_LEVEL);
            var a = new i.a(e);
            e.myEventManager.registerForEvent(a, s.a.EVENT_TYPE.ALL_POPPED), e.myEventManager.registerForEvent(a, s.a.EVENT_TYPE.GAME_LOADED), a.onReceiveMyEvent = function(e, t) {
                e == s.a.EVENT_TYPE.GAME_LOADED ? (this.gameScene.startLevelMessage.myText.text = n.a.MESSAGES.FINAL_LEVEL, o.a.isBS3 && (this.gameScene.startLevelMessage.myText.text = n.a.MESSAGES.FINAL_LEVEL.toUpperCase()), this.gameScene.startLevelMessage.timer = 2.5) : e == s.a.EVENT_TYPE.ALL_POPPED && (this.gameScene.gamePauseButton.myDestroy(), this.gameScene.timebar.timebarStopped = !0, i.a._allGameObjects.forEach((function(e) {
                    e.goType != m.a.GO_TYPE.WALL || e.wallType != m.a.WALL.WALL_TYPE.MOVING && e.wallType != m.a.WALL.WALL_TYPE.CAVEIN_BS3 || (e._doSlide = !1)
                })), this.theEnd())
            }, a.theEnd = function() {
                e.saveLeveUnlocklProgress(), this.myRenderDepth = i.a.RENDER_DEPTH.GAME, this.myMessage1 = "Congratulations!!!", this.myMessage2 = "You are the  BUBBLE MASTER", this.myMessage3 = "Thank you for playing Bubble Trouble :)", this.myMessage4 = "MADE BY: KRESIMIR CVITANOVIC", this.myMessage5 = "IDEA FROM: CAPCOMs PANG SERIES", y.a.crntLives[1] > 0 && y.a.crntLives[2] > 0 && (this.myMessage2 = "You are both the  BUBBLE MASTERS"), o.a.isBS2 && (this.myMessage3 = "Thank you for playing Bubble Trouble 2 :)"), o.a.isBS3 && (this.myMessage3 = "Thank you for playing Bubble Trouble 3 :)"), o.a.isBS3 && (this.myMessage1 = this.myMessage1.toUpperCase(), this.myMessage2 = this.myMessage2.toUpperCase(), this.myMessage3 = this.myMessage3.toUpperCase(), this.myMessage4 = this.myMessage4.toUpperCase(), this.myMessage5 = this.myMessage5.toUpperCase());
                var a = o.a.gameAreaMin.x + (o.a.gameAreaMax.x - o.a.gameAreaMin.x) / 2,
                    s = o.a.gameAreaMin.y + (o.a.gameAreaMax.y - o.a.gameAreaMin.y) / 2;
                this.myText1 = this.gameScene.add.bitmapText(a, s - 140, o.a.fontNames.LVL_MSG, this.myMessage1, 42), this.myText1.setOrigin(.5, .5), this.myText2 = this.gameScene.add.bitmapText(a, s - 75, o.a.fontNames.LVL_MSG, this.myMessage2, 44), this.myText2.setOrigin(.5, .5), this.myText3 = this.gameScene.add.bitmapText(a, s - 25, o.a.fontNames.LVL_MSG, this.myMessage3, 27), this.myText3.setOrigin(.5, .5), this.myText3.alpha = .9, this.myText4 = this.gameScene.add.bitmapText(a, 310, o.a.fontNames.LVL_MSG, this.myMessage4, 27), this.myText4.setOrigin(.5, .5), this.myText4.alpha = .9, this.myText5 = this.gameScene.add.bitmapText(a, 340, o.a.fontNames.LVL_MSG, this.myMessage5, 27), this.myText5.setOrigin(.5, .5), this.myText5.alpha = .9, this.background = new r.a(this.gameScene, a, s - 5, o.a.spriteKey, "ui/black.png"), this.background.alpha = .5, this.background.setDisplaySize(o.a.gameWidth, o.a.gameHeight), this.background.setOrigin(.5, .5), i.a.mySpriteDepth(i.a.RENDER_DEPTH.GAME, this.background), i.a.mySpriteDepth(this.myRenderDepth, this.myText1), i.a.mySpriteDepth(this.myRenderDepth, this.myText2), i.a.mySpriteDepth(this.myRenderDepth, this.myText3), i.a.mySpriteDepth(this.myRenderDepth, this.myText4), i.a.mySpriteDepth(this.myRenderDepth, this.myText5);
                var n = i.a.RENDER_DEPTH.PAUSE_MENU;
                o.a.isBT && new h.a(this.gameScene, o.a.gameWidth / 2, 250, 200, 77, "ui/main_menu_back.png", {
                    top: 30,
                    bottom: 30,
                    left: 30,
                    right: 30
                }).setDepthNinePatch(n);
                var _ = 6;
                o.a.isBT || (_ = 0), new d.a(this.gameScene, o.a.gameWidth / 2, 250, 170, 47, {
                    text: p.a.BT1.GAME_COMPLETED,
                    size: 32,
                    fixY: _
                }, this.gameScene.myTransition.transitionToggle.bind(this.gameScene.myTransition, !1, t), c.a.changeActiveScene.bind(this, e)).setDepthMyUIButton(n), c.a.changeActiveScene(e.game.scene.getScene("BootScene")), l.a.playSound(this.gameScene, l.a.SND.FINAL_LEVEL_COMPLETED), e._tasksOnLevelCompleted(), e.saveBestLevelScore()
            }
        }
    },
    134: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(0),
            r = a(30),
            h = a(10),
            p = a.n(h),
            d = a(19),
            y = a.n(d),
            _ = a(7),
            c = a.n(_),
            m = a(11),
            u = a.n(m),
            g = a(15),
            v = a(1),
            f = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = p()(this, c()(t).call(this, e, a))).wallType = v.a.WALL.WALL_TYPE.SLIDING_BT1, i._slideForX = a.slideX || 0, i._slideForY = a.slideY || 0, i._slideEndX = i.pos.x + i._slideForX, i._slideEndY = i.pos.y + i._slideForY, i._slideTime = a.slideTime || 0, i._calculatedSlideSpeedX = 0, i._calculatedSlideSpeedY = 0, i._doSlide = !1, i
                }
                return u()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        return y()(c()(t.prototype), "myInit", this).call(this), 0 != this._slideForX && (this._calculatedSlideSpeedX = this._slideForX / this._slideTime), 0 != this._slideForY && (this._calculatedSlideSpeedY = this._slideForY / this._slideTime), this
                    }
                }, {
                    key: "onReceiveMyEvent",
                    value: function(e, t) {
                        t == this._eventInfo && (this.isStatic = !1, this._doSlide = !0, this.mySound = g.a.playSound(this.gameScene, g.a.SND.WALL_SLIDE_SMALL))
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, a, i) {
                        this._slideTime > 0 && this._doSlide && (this._slideTime -= a, this.pos.x += this._calculatedSlideSpeedX * a, this.pos.y += this._calculatedSlideSpeedY * a), this._doSlide && this._slideTime < 0 && (this.pos.x = this._slideEndX, this.pos.y = this._slideEndY, this._doSlide = !1, this.isStatic = !0), y()(c()(t.prototype), "myFixedPostUpdate", this).call(this, e, a, i)
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        this.mySprite.x = this.pos.x - this.sizeHalf.x, this.mySprite.y = this.pos.y - this.sizeHalf.y, y()(c()(t.prototype), "myUpdate", this).call(this, e, a)
                    }
                }]), t
            }(r.a),
            S = a(3),
            E = a(22),
            x = a(9),
            T = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = p()(this, c()(t).call(this, e, a))).wallType = v.a.WALL.WALL_TYPE.DOOR_BT1, i._spriteStickOutY = 5, i._slideForY = -a.h + i._spriteStickOutY, i._slideEndY = a.y + i._slideForY, i._slideTime = .25, i._calculatedSlideSpeedY = i._slideForY / i._slideTime, i._doSlide = !1, i._spriteOffsetY = (76 - a.h) / 2, i._darkWallSprite = null, i
                }
                return u()(t, e), l()(t, [{
                    key: "drawWall",
                    value: function() {
                        this.myRenderDepth = S.a.RENDER_DEPTH.UNDER_GAME, this._darkWallSprite = new x.a(this.gameScene, this.pos.x, this.pos.y - this._spriteOffsetY, o.a.spriteKey, "walls/door_back.png", 1, this.myRenderDepth), this.mySprite = new x.a(this.gameScene, this.pos.x, this.pos.y - this._spriteOffsetY, o.a.spriteKey, "walls/door.png", 1, this.myRenderDepth)
                    }
                }, {
                    key: "onReceiveMyEvent",
                    value: function(e, t) {
                        t == this._eventInfo && (this._doSlide = !0, this.mySound = g.a.playSound(this.gameScene, g.a.SND.WALL_SLIDE_SMALL), this.gameScene.phyEngine.bodySwitchLayer(E.a.LAYER.WALLBALL, E.a.LAYERS_WALL, this))
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        this._slideTime > 0 && this._doSlide && (this._slideTime -= a / 1e3, this.mySprite.y += this._calculatedSlideSpeedY * a / 1e3), this._doSlide && this._slideTime <= 0 && (this._doSlide = !1, this.mySprite.y = this._slideEndY - this._spriteOffsetY), y()(c()(t.prototype), "myUpdate", this).call(this, e, a)
                    }
                }]), t
            }(r.a),
            b = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = p()(this, c()(t).call(this, e, a))).wallType = v.a.WALL.WALL_TYPE.CEILSPIKE_BT1, i._slideForY = o.a.gameAreaMax.y - i.pos.y, i._slideTime = a.slideTime || 0, i._calculatedSlideSpeedY = 0, i._doSlide = !1, i._spikesOffsetY = -2, i._colorOffsetY = -2, i._spikesSprite = null, i
                }
                return u()(t, e), l()(t, [{
                    key: "drawWall",
                    value: function() {
                        this._calculatedSlideSpeedY = this._slideForY / this._slideTime, this.mySprite = this.gameScene.add.tileSprite(this.pos.x - this.sizeHalf.x, this.pos.y - this.sizeHalf.y, this.size.x, this.size.y, o.a.spriteKey, "walls/ceil_color.png"), this.makeDepthAndScale(this.mySprite), this.mySprite.setSize(this.size.x, 700), this.mySprite.setOrigin(0, 1), this.mySprite.setPosition(this.pos.x - this.sizeHalf.x, this.pos.y), this._spikesSprite = this.gameScene.add.tileSprite(this.pos.x - this.sizeHalf.x, this.pos.y + this._spikesOffsetY, this.size.x, 9, o.a.spriteKey, "walls/wall_spike.png"), this._spikesSprite.setDisplayOrigin(0, 0), this.makeDepthAndScale(this._spikesSprite)
                    }
                }, {
                    key: "onReceiveMyEvent",
                    value: function(e, t) {
                        this.isStatic = !1, this._doSlide = !0
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, a, i) {
                        this._slideTime > 0 && this._doSlide && (this._slideTime -= a, this.pos.y += this._calculatedSlideSpeedY * a), this._doSlide && this._slideTime < 0 && (this._doSlide = !1, this.isStatic = !0), y()(c()(t.prototype), "myFixedPostUpdate", this).call(this, e, a, i)
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        this.mySprite.y = this.pos.y, this._spikesSprite.y = this.pos.y + this._spikesOffsetY, y()(c()(t.prototype), "myUpdate", this).call(this, e, a)
                    }
                }]), t
            }(r.a),
            k = a(243),
            w = a(16),
            I = (a(2), a(173)),
            P = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = p()(this, c()(t).call(this, e, a))).wallType = v.a.WALL.WALL_TYPE.DOOR_BT1, i._slideTime = .25, i._mySpriteLeft = null, i._mySpriteRight = null, i._mySpriteTipLeft = null, i._mySpriteTipRight = null, i.switchBottomOrigin = i.pos.y + i._wallInfo.h / 2, i
                }
                return u()(t, e), l()(t, [{
                    key: "drawWall",
                    value: function() {
                        if (o.a.isBS2) {
                            var e = "walls/switch/" + this._eventInfo + ".png",
                                t = "walls/switch/" + this._eventInfo + "_tip.png",
                                a = new w.a(this._p1.x, this._p1.y + -.5),
                                i = new w.a(this.size.x, this.size.y - -1);
                            if (this.sizeHalf.y > this.sizeHalf.x) i = new w.a(this.size.y, this.size.x - -1);
                            this._mySpriteLeft = this.gameScene.add.tileSprite(a.x, a.y, i.x / 2, i.y, o.a.spriteKey, e), this._mySpriteLeft.setOrigin(0, 0), this.makeDepthAndScale(this._mySpriteLeft), this._mySpriteRight = this.gameScene.add.tileSprite(a.x + i.x, a.y, i.x / 2, i.y, o.a.spriteKey, e), this._mySpriteRight.setOrigin(1, 0), this.makeDepthAndScale(this._mySpriteRight), this.sizeHalf.y > this.sizeHalf.x && (this._mySpriteLeft.angle = 90, this._mySpriteLeft.x += 10, this._mySpriteRight.angle = 90, this._mySpriteRight.x -= i.x - 10, this._mySpriteRight.y += i.x), this._mySpriteTipLeft = new x.a(this.gameScene, this._p1.x, this._p1.y, o.a.spriteKey, t), this._mySpriteTipLeft.setOrigin(0, 0), this.makeDepthAndScale(this._mySpriteTipLeft), this._mySpriteTipRight = new x.a(this.gameScene, this._p1.x + i.x, this._p1.y, o.a.spriteKey, t), this._mySpriteTipRight.setOrigin(0, 0), this.makeDepthAndScale(this._mySpriteTipRight), this._mySpriteTipRight.flipX = !0, this.sizeHalf.y > this.sizeHalf.x && (this._mySpriteTipLeft.angle = 90, this._mySpriteTipLeft.x += 10, this._mySpriteTipRight.angle = 90, this._mySpriteTipRight.x = this._p1.x + 10, this._mySpriteTipRight.y = this._p1.y + i.x), this._stateSprites.push(this._mySpriteLeft, this._mySpriteTipLeft, this._mySpriteRight, this._mySpriteTipRight)
                        } else if (o.a.isBS3) {
                            var s = "walls/basic.png";
                            this._isVerticalBS3Switch() && (s = "walls/cavein_bs3.png"), this.mySprite = this.gameScene.add.tileSprite(this.pos.x - this.sizeHalf.x, this.pos.y - this.sizeHalf.y, this.size.x, this.size.y, o.a.spriteKey, s), this.mySprite.setDisplayOrigin(0, 0), this.makeDepthAndScale(this.mySprite)
                        }
                    }
                }, {
                    key: "onReceiveMyEvent",
                    value: function(e, t) {
                        if (t == this._eventInfo) {
                            if (0 == this.pbActive) return;
                            if (this.pbActive = !1, o.a.isBS2) {
                                this.mySound = g.a.playSound(this.gameScene, g.a.SND.SWITCH), this._mySpriteTipLeft.blendMode = Phaser.BlendModes.ADD, this._mySpriteTipRight.blendMode = Phaser.BlendModes.ADD;
                                var a = this;
                                this.gameScene.tweens.add({
                                    targets: [this._mySpriteLeft, this._mySpriteRight],
                                    width: 0,
                                    ease: "Quint",
                                    duration: 450,
                                    onComplete: function() {}
                                }), this.gameScene.tweens.add({
                                    targets: [this._mySpriteTipLeft, this._mySpriteTipRight],
                                    displayWidth: 1,
                                    duration: 350,
                                    delay: 150,
                                    onComplete: function() {
                                        a.myOnDestroy()
                                    }
                                })
                            } else if (o.a.isBS3)
                                if (this._isVerticalBS3Switch()) g.a.playSound(this.gameScene, g.a.SND.SWITCH), this.pbActive = !0, this.isStatic = !1, this.vel.y = 10;
                                else {
                                    this.mySprite.visible = !1;
                                    I.a.GetFragments(this)
                                }
                        }
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, t, a) {
                        this._isVerticalBS3Switch() && (this._pBodyResize(new w.a(this.size.x, this.switchBottomOrigin - this.pos.y + this.sizeHalf.y)), this.size.y <= 0 && this.myOnDestroy())
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        this._isVerticalBS3Switch() && (this.mySprite.setCrop(0, 0, this.mySprite.width, this.switchBottomOrigin - this.pos.y + this.sizeHalf.y), this.mySprite.x = this.pos.x - this.sizeHalf.x, this.mySprite.y = this.pos.y - this.sizeHalf.y, y()(c()(t.prototype), "myUpdate", this).call(this, e, a))
                    }
                }, {
                    key: "_isVerticalBS3Switch",
                    value: function() {
                        return o.a.isBS3 && this._wallInfo.h > this._wallInfo.w
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        o.a.isBS2 && (this._mySpriteLeft.destroy(), this._mySpriteRight.destroy(), this._mySpriteTipLeft.destroy(), this._mySpriteTipRight.destroy()), y()(c()(t.prototype), "myOnDestroy", this).call(this)
                    }
                }]), t
            }(r.a),
            A = a(111),
            L = a(174),
            M = a(17),
            O = a.n(M),
            D = a(23),
            B = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = p()(this, c()(t).call(this, e, a))).wallType = v.a.WALL.WALL_TYPE.CONV_BELT, i.convBeltSpeed = a.convBeltSpeed, i
                }
                return u()(t, e), l()(t, [{
                    key: "drawWall",
                    value: function() {
                        this.mySprite = new D.a(this.gameScene, this.pos.x, this.pos.y, this.size.x, this.size.y, "walls/convbelt.png", {
                            top: 5,
                            bottom: 6,
                            left: 11,
                            right: 11
                        }), this.mySprite.setDepthNinePatch(this.myRenderDepth);
                        for (var e = 0; e < this.size.x; e += 10) {
                            var t = new x.a(this.gameScene, this.pos.x - this.size.x / 2 + e + 5, this.pos.y - 4, o.a.spriteKey, "walls/convbelt/convbelt_1.png");
                            this.makeDepthAndScale(t), t.anims.play("convbelt"), this.convBeltSpeed < 0 && t.anims.playReverse("convbelt"), this._stateSprites.push(t)
                        }
                    }
                }]), t
            }(r.a);
        O()(B, "SPEED_UP", 0), O()(B, "SLOW_DOWN", 0);
        var R = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = p()(this, c()(t).call(this, e, a))).wallType = v.a.WALL.WALL_TYPE.SPIKEALL, i._spikesOffsetY = -2, i._colorOffsetY = -2, i._spikesSprite = null, i
                }
                return u()(t, e), l()(t, [{
                    key: "drawWall",
                    value: function() {
                        this.mySprite = new D.a(this.gameScene, this.pos.x, this.pos.y, this.size.x, this.size.y, "walls/spikeall.png", {
                            top: 7,
                            bottom: 7,
                            left: 7,
                            right: 7
                        }), this.mySprite.setDepthNinePatch(this.myRenderDepth);
                        var e = t.GetSpikesTopLeftRight(this.gameScene, this._wallInfo.w, this._wallInfo.h);
                        e[0].x = this.pos.x, e[0].y = this.pos.y - this._wallInfo.h / 2, e[1].x = this.pos.x - this._wallInfo.w / 2, e[1].y = this.pos.y, e[2].x = this.pos.x + this._wallInfo.w / 2, e[2].y = this.pos.y, this.makeDepthAndScale(e[0]), this.makeDepthAndScale(e[1]), this.makeDepthAndScale(e[2]), this._stateSprites = this._stateSprites.concat(e)
                    }
                }], [{
                    key: "GetSpikesTopLeftRight",
                    value: function(e, t, a) {
                        var i = [],
                            s = e.add.tileSprite(0, 0, t, 5, o.a.spriteKey, "walls/wall_spikey.psd");
                        s.setOrigin(.5, 0), s.y = -a / 2, s.angle = 180;
                        var n = e.add.tileSprite(0, 0, a, 5, o.a.spriteKey, "walls/wall_spikey.psd");
                        n.setOrigin(.5, 0), n.x = -t / 2, n.angle = 90;
                        var l = e.add.tileSprite(0, 0, a, 5, o.a.spriteKey, "walls/wall_spikey.psd");
                        return l.setOrigin(.5, 0), l.x = t / 2, l.angle = -90, i.push(s, n, l), i
                    }
                }]), t
            }(r.a),
            W = (a(42), a(20)),
            N = a(32),
            C = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = p()(this, c()(t).call(this, e, a))).wallType = v.a.WALL.WALL_TYPE.TELEPORT, i._teleportDestination = null, i._teleportRays = null, i._teleportIdleTime = 3e3, i._lastTeleportTimes = [0, -i._teleportIdleTime, -i._teleportIdleTime], i._teleportTween = null, i._teleportingPlayerFrame = [], i._teleportingPlayerAnim = [], i
                }
                return u()(t, e), l()(t, [{
                    key: "drawWall",
                    value: function() {
                        var e = 3;
                        o.a.isBS3 && (e = 0);
                        var a = "_teleportRays";
                        if (!this.gameScene.textures.exists(a)) {
                            var i = this.gameScene.add.graphics();
                            i.fillStyle(7391192, 1), i.fillRect(0, 0, 43, 40), i.generateTexture(a, 43, 40)
                        }
                        this._teleportRays = this.gameScene.add.image(this.pos.x, this.pos.y + e, "_teleportRays"), this.makeDepthAndScale(this._teleportRays), this.gameScene.add.tween({
                            targets: this._teleportRays,
                            duration: 230,
                            delay: 460 * Math.random(),
                            alpha: {
                                from: .6,
                                to: .2
                            },
                            loop: -1,
                            yoyo: !0
                        }), this.mySprite = t.GetTeleportSprite(this.gameScene), this.mySprite.x = this.pos.x, this.mySprite.y = this.pos.y, this.makeDepthAndScale(this.mySprite), this._stateSprites.push(this._teleportRays, this.mySprite)
                    }
                }, {
                    key: "startTeleportingPlayer",
                    value: function(e) {
                        if (null != this._wallInfo.teleport_dest) {
                            var t = this;
                            null == this._teleportDestination && null != this._wallInfo.teleport_dest && this.gameScene.phyEngine.bodies[E.a.LAYER.TELEPORT].forEach((function(e) {
                                var a = e;
                                a._wallInfo.t == v.a.WALL.WALL_TYPE.TELEPORT && a._wallInfo.teleport_name == t._wallInfo.teleport_dest && (t._teleportDestination = a)
                            })), this.gameScene.timeInLevel < this._lastTeleportTimes[e.playerId] || (e.shotManager.cantShootTimer = this.gameScene.timeInLevel + 1e17, this.animation1_startTeleporting(e))
                        }
                    }
                }, {
                    key: "animation1_startTeleporting",
                    value: function(e) {
                        e.pbActive = !1, this._teleportingPlayerAnim[e.playerId] = e.mySprite.anims.currentAnim.key, this._teleportingPlayerFrame[e.playerId] = e.mySprite.frame.name, e.mySprite.anims.stop();
                        var a = null;
                        W.a.isLazyLoaded && ((a = this.gameScene.add.sprite(this.pos.x, this.pos.y)).anims.play("teleport_ani"), this.makeDepthAndScale(a)), g.a.playSound(this.gameScene, g.a.SND.TELEPORT_CONTRACT);
                        var i = this;
                        this._teleportTween = this.gameScene.add.tween({
                            targets: e.pos,
                            x: this._teleportDestination.pos.x,
                            y: this._teleportDestination.pos.y,
                            delay: t.POOF_ANIM_LENGTH,
                            duration: t.TELEPORTATION_SPEED,
                            ease: Phaser.Math.Easing.Quadratic.Out,
                            onStart: function() {
                                g.a.playSound(i.gameScene, g.a.SND.TELEPORT_CONTENT)
                            },
                            onComplete: function() {
                                i._teleportDestination._lastTeleportTimes[e.playerId] = i.gameScene.timeInLevel + i._teleportIdleTime, a && a.destroy(), i.animation2_arrived(e)
                            }
                        }), this.gameScene.time.addEvent({
                            delay: t.POOF_SHOWOUTLINE,
                            callback: function() {
                                e.mySprite.setFrame("walls/char_outline.png"), e.playerShield && e.playerShield.shieldSprite && (e.playerShield.shieldSprite.visible = !1)
                            }
                        })
                    }
                }, {
                    key: "animation2_arrived",
                    value: function(e) {
                        var a = null;
                        W.a.isLazyLoaded && ((a = this.gameScene.add.sprite(this._teleportDestination.pos.x, this._teleportDestination.pos.y)).anims.playReverse("teleport_ani"), this.makeDepthAndScale(a)), g.a.playSound(this.gameScene, g.a.SND.TELEPORT_BACK);
                        var i = this;
                        this.gameScene.time.addEvent({
                            delay: t.POOF_ANIM_LENGTH - t.POOF_SHOWOUTLINE,
                            callback: function() {
                                e.mySprite.setFrame(i._teleportingPlayerFrame[e.playerId]), e.playerShield && e.playerShield.shieldSprite && (e.playerShield.shieldSprite.visible = !0)
                            }
                        }), this.gameScene.time.addEvent({
                            delay: t.POOF_ANIM_LENGTH,
                            callback: function() {
                                a && a.destroy(), e.vel.y = o.a.playerStartG, e.pbActive = !0, e.mySprite.anims.play(i._teleportingPlayerAnim[e.playerId]), e.shotManager.cantShootTimer = i.gameScene.timeInLevel
                            }
                        })
                    }
                }, {
                    key: "_onStateChanged",
                    value: function(e) {
                        e == N.a.EVENT_STATE.ACTIVE ? this._teleportRays.visible = !0 : e == N.a.EVENT_STATE.INACTIVE && (this._teleportRays.visible = !1)
                    }
                }, {
                    key: "myOnPause",
                    value: function(e) {
                        null != this._teleportTween && (e ? this._teleportTween.pause() : this._teleportTween.resume()), y()(c()(t.prototype), "myOnPause", this).call(this, e)
                    }
                }], [{
                    key: "GetTeleportSprite",
                    value: function(e) {
                        return new x.a(e, 0, 0, o.a.spriteKey, "walls/teleport_base.png")
                    }
                }]), t
            }(r.a);
        O()(C, "POOF_ANIM_LENGTH", 850), O()(C, "POOF_SHOWOUTLINE", 250), O()(C, "TELEPORTATION_SPEED", 350);
        var U = C,
            Y = a(244),
            K = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = p()(this, c()(t).call(this, e, a))).wallType = v.a.WALL.WALL_TYPE.TIMED, i._steppedOnWallTimed = 1e3 * t.STAY_ON, i._falledDownWallTimed = 0, i._playerStandingOnTimed = !1, i._usingSpriteNoAnimation = !0, i._fadingBackIn = !1, i
                }
                return u()(t, e), l()(t, [{
                    key: "drawWall",
                    value: function() {
                        if (o.a.isBS2 || !W.a.isLazyLoaded) {
                            this.mySprite = new D.a(this.gameScene, this.pos.x, this.pos.y, this.size.x, this.size.y, "walls/timed.png", {
                                top: 7,
                                bottom: 7,
                                left: 7,
                                right: 7
                            }), this.mySprite.setDepthNinePatch(this.myRenderDepth), this.showInvisibleWall(!1)
                        } else o.a.isBS3 && (this.mySprite = new x.a(this.gameScene, this.pos.x, this.pos.y, o.a.lazySpriteKey, "timed_ani/timed_4.png"), this.makeDepthAndScale(this.mySprite), this._usingSpriteNoAnimation = !1)
                    }
                }, {
                    key: "standingOnWallTimed",
                    value: function(e) {
                        this._playerStandingOnTimed = !0
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        y()(c()(t.prototype), "myUpdate", this).call(this, e, a), this.gameScene.isGamePaused || (this._playerStandingOnTimed && this.pbActive ? (this._steppedOnWallTimed -= a, this._steppedOnWallTimed <= 0 && this.timedWallOut()) : this.pbActive || (this._falledDownWallTimed -= a, this._falledDownWallTimed <= 0 && !this._fadingBackIn && (this._fadingBackIn = !0, this.timedWallBackIn())))
                    }
                }, {
                    key: "timedWallOut",
                    value: function() {
                        this.pbActive = !1, this._playerStandingOnTimed = !1, this._steppedOnWallTimed = 1e3 * t.STAY_ON, this._falledDownWallTimed = 1e3 * t.COME_BACK, g.a.playSound(this.gameScene, g.a.SND.WALL_TIMED_OUT), this._usingSpriteNoAnimation ? this.mySprite.ninePatch.alpha = .2 : this.mySprite.anims.play("timed_ani")
                    }
                }, {
                    key: "timedWallBackIn",
                    value: function() {
                        if (g.a.playSound(this.gameScene, g.a.SND.WALL_TIMED_IN), this._usingSpriteNoAnimation) this.mySprite.ninePatch.alpha = 1, this.pbActive = !0;
                        else {
                            this.mySprite.anims.playReverse("timed_ani");
                            var e = this;
                            this.gameScene.time.addEvent({
                                delay: this.mySprite.anims.currentAnim.duration,
                                callback: function() {
                                    e.pbActive = !0, e._fadingBackIn = !1
                                }
                            })
                        }
                    }
                }]), t
            }(r.a);
        O()(K, "STAY_ON", .5), O()(K, "COME_BACK", 2);
        var G = function(e) {
            function t(e, a) {
                var i;
                return s()(this, t), (i = p()(this, c()(t).call(this, e, a))).wallType = v.a.WALL.WALL_TYPE.STICKY, i
            }
            return u()(t, e), l()(t, [{
                key: "gotOnSticky",
                value: function(e) {
                    e._stickyModifier = t.STICKY_SLOW_DOWN_BS3, o.a.isBS2 && (e._stickyModifier = t.STICKY_SLOW_DOWN_BS2)
                }
            }, {
                key: "stickyBallBounce",
                value: function(e) {}
            }, {
                key: "drawWall",
                value: function() {
                    if (o.a.isBS2) {
                        this.mySprite = new D.a(this.gameScene, this.pos.x, this.pos.y, this.size.x, this.size.y, "walls/sticky.png", {
                            top: 7,
                            bottom: 7,
                            left: 7,
                            right: 7
                        }), this.mySprite.setDepthNinePatch(this.myRenderDepth)
                    } else o.a.isBS3 && (this.mySprite = this.gameScene.add.tileSprite(this.pos.x, this.pos.y, this.size.x, this.size.y, o.a.spriteKey, "walls/sticky.png"), S.a.mySpriteDepth(this.myRenderDepth, this.mySprite))
                }
            }]), t
        }(r.a);
        O()(G, "STICKY_SLOW_DOWN_BS3", 10.5), O()(G, "STICKY_SLOW_DOWN_BS2", 7);
        var H = a(245),
            z = a(246),
            V = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "spawnWall",
                    value: function(e, t) {
                        var a = t.t,
                            i = null;
                        return a == v.a.WALL.WALL_TYPE.NORMAL ? i = new r.a(e, t) : a == v.a.WALL.WALL_TYPE.SLIDING_BT1 ? i = new f(e, t) : a == v.a.WALL.WALL_TYPE.DOOR_BT1 ? i = new T(e, t) : a == v.a.WALL.WALL_TYPE.CEILSPIKE_BT1 ? i = new b(e, t) : a == v.a.WALL.WALL_TYPE.LADDER ? i = new z.a(e, t) : a == v.a.WALL.WALL_TYPE.BREAKABLE ? i = new k.a(e, t) : a == v.a.WALL.WALL_TYPE.SWITCH ? i = new P(e, t) : a == v.a.WALL.WALL_TYPE.ICE ? i = new A.a(e, t) : a == v.a.WALL.WALL_TYPE.TRAMPOLINE ? i = new L.a(e, t) : a == v.a.WALL.WALL_TYPE.CONV_BELT ? i = new B(e, t) : a == v.a.WALL.WALL_TYPE.SPIKEALL ? i = new R(e, t) : a == v.a.WALL.WALL_TYPE.TELEPORT ? i = new U(e, t) : a == v.a.WALL.WALL_TYPE.CAVEIN_BS3 ? i = new Y.a(e, t) : a == v.a.WALL.WALL_TYPE.TIMED ? i = new K(e, t) : a == v.a.WALL.WALL_TYPE.STICKY ? i = new G(e, t) : a == v.a.WALL.WALL_TYPE.MOVING ? i = new H.a(e, t) : console.error("Undefined wall type!" + a), i.myInit(), i._initializeStateEvent(), i
                    }
                }, {
                    key: "spawnBounds",
                    value: function(e) {
                        var t = 30,
                            a = new r.a(e, {
                                x: o.a.gameAreaMin.x - 15,
                                y: o.a.gameAreaMin.y + (o.a.gameAreaMax.y - o.a.gameAreaMin.y) / 2,
                                w: t,
                                h: o.a.gameAreaMax.y - o.a.gameAreaMin.y + t
                            }).myInit(),
                            i = new r.a(e, {
                                x: o.a.gameAreaMax.x + 15,
                                y: o.a.gameAreaMin.y + (o.a.gameAreaMax.y - o.a.gameAreaMin.y) / 2,
                                w: t,
                                h: o.a.gameAreaMax.y - o.a.gameAreaMin.y + t
                            }).myInit(),
                            s = new r.a(e, {
                                x: o.a.gameAreaMin.x + (o.a.gameAreaMax.x - o.a.gameAreaMin.x) / 2,
                                y: o.a.gameAreaMin.y - 15,
                                w: o.a.gameAreaMax.x - o.a.gameAreaMin.x + t,
                                h: t
                            }).myInit(),
                            n = new r.a(e, {
                                x: o.a.gameAreaMin.x + (o.a.gameAreaMax.x - o.a.gameAreaMin.x) / 2,
                                y: o.a.gameAreaMax.y + 15,
                                w: o.a.gameAreaMax.x - o.a.gameAreaMin.x + t,
                                h: t
                            }).myInit();
                        a.mySprite.destroy(), i.mySprite.destroy(), s.mySprite.destroy(), n.mySprite.destroy()
                    }
                }, {
                    key: "_assignPriority",
                    value: function(e) {
                        return e == v.a.WALL.WALL_TYPE.TELEPORT || e == v.a.WALL.WALL_TYPE.SPIKEALL ? 5 : e == v.a.WALL.WALL_TYPE.NORMAL ? 2 : e == v.a.WALL.WALL_TYPE.MOVING ? 6 : e == v.a.WALL.WALL_TYPE.CAVEIN_BS3 ? 1 : e == v.a.WALL.WALL_TYPE.BREAKABLE || e == v.a.WALL.WALL_TYPE.STICKY ? 2 : e == v.a.WALL.WALL_TYPE.CONV_BELT ? 3 : e == v.a.WALL.WALL_TYPE.ICE ? 2 : e == v.a.WALL.WALL_TYPE.TRAMPOLINE ? 1 : e == v.a.WALL.WALL_TYPE.LADDER ? 4 : e == v.a.WALL.WALL_TYPE.TIMED ? 2 : void 0
                    }
                }]), e
            }();
        t.a = V
    },
    135: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = (a(4), function e(t) {
                s()(this, e), this.rank = t.rank, this.name = t.name, this.score = t.score, this.playerUniqueId = t.playerUniqueId, this.photoURL = t.photoURL || null, this.optionalData = t.optionalData || {}
            }),
            c = function() {
                function e() {
                    s()(this, e), this.playerScore = null, this.scores = [], this._callbackScoresLoaded = null, this._callbackPlayerRankLoaded = null, this.uniquePlayerId = -1
                }
                return l()(e, [{
                    key: "init",
                    value: function() {}
                }, {
                    key: "loadScores",
                    value: function(e, t) {}
                }, {
                    key: "sendScore",
                    value: function(e) {}
                }]), e
            }(),
            m = a(2),
            u = function(e) {
                function t() {
                    return s()(this, t), r()(this, p()(t).apply(this, arguments))
                }
                return y()(t, e), l()(t, [{
                    key: "init",
                    value: function() {}
                }, {
                    key: "loadScores",
                    value: function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : function() {},
                            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : function() {};
                        "null" != FBInstant.context.getID() && (m.a.log("FB SCORE", "Context id:", FBInstant.context.getID()), FBInstant.getLeaderboardAsync("Single player." + FBInstant.context.getID()).then((function(e) {
                            console.log(e.getName())
                        })).catch((function(e) {
                            console.error("getLeaderboardAsync failed: " + e.message, e)
                        })), this._callbackScoresLoaded = e, this._callbackPlayerRankLoaded = t, null == this.leaderboard ? this.facebookPlugin.getLeaderboard(this.leaderboardID) : (this.leaderboard.getScores(), this.leaderboard.getPlayerScore()))
                    }
                }, {
                    key: "_onScoresLoaded",
                    value: function(e) {
                        for (var t in console.log("Loaded scores..", e), this.scores = [], e) {
                            var a = e[t];
                            this.scores.push(this._parseReceivedScore(a))
                        }
                        this._callbackScoresLoaded()
                    }
                }, {
                    key: "_parseReceivedScore",
                    value: function(e) {
                        return null == e ? null : new _({
                            name: e.playerName,
                            rank: e.rank,
                            score: e.score,
                            playerUniqueId: e.playerID,
                            photoURL: e.playerPhotoURL,
                            optionalData: JSON.parse(e.data)
                        })
                    }
                }]), t
            }(c),
            g = a(18);

        function v() {}
        v.initialize = function(e) {
            m.a.log("LEADER", "Initializing leaderboard:" + g.a.myTarget), g.a.isFacebook ? v.provider = (new u).init(e.facebook) : g.a.isCordova || g.a.isPoki ? v.provider = (new c).init() : console.error("Unknown leaderboard provider:" + g.a.myTarget)
        }, v.provider = null, v.SHOW_ENTRIES = 10, v.isUsingLeader = function() {
            return !!g.a.isFacebook
        };
        t.a = v
    },
    136: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(4),
            r = a(2),
            h = a(10),
            p = a.n(h),
            d = a(7),
            y = a.n(d),
            _ = a(11),
            c = a.n(_),
            m = a(82),
            u = a(14),
            g = a(9),
            v = a(0),
            f = a(18),
            S = function(e) {
                function t() {
                    return s()(this, t), p()(this, y()(t).apply(this, arguments))
                }
                return c()(t, e), l()(t, [{
                    key: "drawAd",
                    value: function() {
                        var e = 6;
                        (v.a.isBS2 || v.a.isBS3) && (e = 0), this.open_button.changeTextOrIcon({
                            text: T.newsObj.action,
                            size: 35,
                            fixY: e
                        }), this.image = new g.a(this.myScene, .52 * v.a.gameWidth, .35 * v.a.gameHeight, T.loadedImageName, null, 1)
                    }
                }, {
                    key: "openAd",
                    value: function() {
                        u.a.isIOS ? window.open(T.newsObj.url_ios) : u.a.isAndroid ? window.open(T.newsObj.url_android, f.a.browserWindow) : window.open(T.newsObj.url_web, f.a.browserWindow)
                    }
                }]), t
            }(m.a),
            E = (a(250), a(36)),
            x = function() {
                function e(t, a) {
                    s()(this, e), this.id = t.id || -1, this.action = t.action || "CLICK HERE", this.image = t.image || "", this.url_ios = t.url_ios || "", this.url_android = t.url_android || "", this.url_web = t.url_web || "", r.a.log("NEWS", "Getting into img:" + e.loadedImageName, "Image:" + this.image), a.load.image(e.loadedImageName, this.image), a.load.start(), a.load.on("filecomplete-image-" + e.loadedImageName, (function(e) {
                        r.a.log("NEWS", "mynews completed loading", e), a.remoteSettingsCallStart()
                    })), r.a.debugLog && a.load.on("loaderror", (function(e) {
                        r.a.log("RS", e)
                    }))
                }
                return l()(e, null, [{
                    key: "showNews",
                    value: function(t) {
                        if (r.a.log("NEWS", "Showing news..", e.newsObj), null != e.newsObj) {
                            if (0 == r.a.forceNewsOn) {
                                if (o.a.gameSettings.lastNewsID >= e.newsObj.id) return;
                                if (((new Date).getTime() - new Date(o.a.gameSettings.installDate).getTime()) / 1e3 / 60 / 60 < 1) return void r.a.log("NEWS", "Hour not passed yet.")
                            }
                            new S((function() {
                                E.a.changeActiveScene(t)
                            })).setRewarded(5), 0 == r.a.forceNewsOn && (o.a.gameSettings.lastNewsID = e.newsObj.id, o.a.saveUserSettings())
                        }
                    }
                }]), e
            }();
        x.newsObj = null, x.loadedImageName = "myNewsImage";
        var T = t.a = x
    },
    14: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = (a(2), a(16)),
            l = function e() {
                s()(this, e)
            };
        l.initialize = function(e) {
            l.isIpad = l._isIpad(), l.isMobile = l._isMobile(e), l.isIOS = l._isIOS(e), l.isAndroid = l._isAndroid(e)
        }, l._isIpad = function() {
            var e = -1 !== navigator.userAgent.toLowerCase().indexOf("ipad");
            return !!(!e && navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2) || e
        }, l.isIpad = !1, l._isMobile = function(e) {
            return !(e.device.os.desktop && !l.isIpad)
        }, l.isMobile = !1, l._isIOS = function(e) {
            return !!(e.device.os.iOS || e.device.os.iPad || e.device.os.iPhone)
        }, l.isIOS = !1, l._isAndroid = function(e) {
            return e.device.os.android
        }, l.isAndroid = !1, l.cameraOffset = n.a.ZERO, l.notchOffset = 0, l.orientation = (l.ORIENTATIONS = {
            LANDSCAPE: "landscape",
            PORTRAIT: "portrait"
        }).PORTRAIT, t.a = l
    },
    15: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(0),
            r = (a(2), a(8), a(53), a(4)),
            h = function() {
                function e(t) {
                    s()(this, e), this.myScene = t, this.allSounds = {}
                }
                return l()(e, [{
                    key: "_attachSound",
                    value: function(e) {
                        for (var t = 1; t <= e.num; t++) {
                            var a = e.tag + "_" + t;
                            if (null != this.allSounds[a]) return;
                            "" != e.files[o.a.shortName] && this.myScene.game.cache.audio.exists(e.tag) && (this.allSounds[a] = this.myScene.sound.add(e.tag))
                        }
                    }
                }], [{
                    key: "preloadSounds",
                    value: function(t) {
                        for (var a in e.SND) {
                            var i = e.SND[a],
                                s = [];
                            "" != i.files[o.a.shortName] && (s.push("assets/" + o.a.shortName + "/audio/" + i.files[o.a.shortName] + ".m4a"), s.push("assets/" + o.a.shortName + "/audio/" + i.files[o.a.shortName] + ".mp3")), t.load.audio(i.tag, s)
                        }
                    }
                }, {
                    key: "playSound",
                    value: function(t, a) {
                        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                        if (r.a.gameSettings.soundOn && !t.sound.locked) {
                            null == t.mySoundManager && (t.mySoundManager = new e(t)), t.mySoundManager._attachSound(a);
                            for (var s = 1; s <= a.num; s++) {
                                var n = a.tag + "_" + s;
                                if (t.mySoundManager.allSounds.hasOwnProperty(n) && !t.mySoundManager.allSounds[n].isPlaying) return t.mySoundManager.allSounds[n].play(i), t.mySoundManager.allSounds[n]
                            }
                            return null
                        }
                    }
                }, {
                    key: "playRandom",
                    value: function(e, t, a) {
                        var i = t[Math.floor(Math.random() * t.length)];
                        return this.playSound(e, i, a)
                    }
                }]), e
            }();
        h.SND = {
            BALL_POP1: {
                tag: "ballpop1",
                num: 4,
                files: {
                    bt1: "ball_nestane",
                    bs2: "pop1",
                    bs3: "pop1"
                }
            },
            BALL_POP2: {
                tag: "ballpop2",
                num: 4,
                files: {
                    bt1: "ball_pop",
                    bs2: "pop2",
                    bs3: "pop2"
                }
            },
            BALL_POP3: {
                tag: "ballpop3",
                num: 4,
                files: {
                    bt1: "ball_pop2",
                    bs2: "pop3",
                    bs3: "pop3"
                }
            },
            SHOT_SINGLE: {
                tag: "shot_single",
                num: 4,
                files: {
                    bt1: "shot_rope_twirl5",
                    bs2: "twirl",
                    bs3: "pucanj"
                }
            },
            OUT_OF_TIME: {
                tag: "out_of_time",
                num: 1,
                files: {
                    bt1: "ingame_time_out",
                    bs2: "vrijeme_isteklo",
                    bs3: "vrijeme_isteklo"
                }
            },
            LEVEL_FINISHED_SUCCESS: {
                tag: "level_success",
                num: 1,
                files: {
                    bt1: "ingame_gotov_level",
                    bs2: "gong",
                    bs3: "victory"
                }
            },
            HOOK_ATTACHED: {
                tag: "hook_attchd",
                num: 2,
                files: {
                    bt1: "shot_hook",
                    bs2: "hook-zakacen",
                    bs3: "hook-zakacen"
                }
            },
            PLAYER_DEATH_BALL: {
                tag: "player_dead_ball",
                num: 1,
                files: {
                    bt1: "ingame_dead",
                    bs2: "player_hit",
                    bs3: "player_hit"
                }
            },
            WALL_SLIDE_SMALL: {
                tag: "wallslidesmall",
                num: 2,
                files: {
                    bt1: "slide_wall_small",
                    bs2: "",
                    bs3: ""
                }
            },
            SHOT_LASER: {
                tag: "shot_laser",
                num: 5,
                files: {
                    bt1: "shot_lejz",
                    bs2: "flower",
                    bs3: ""
                }
            },
            SHIELD_ON: {
                tag: "shield_on",
                num: 2,
                files: {
                    bt1: "item_stit_paljenje",
                    bs2: "stit_pali",
                    bs3: "stit_plain"
                }
            },
            MINE_DIGIN: {
                tag: "mine_digin",
                num: 3,
                files: {
                    bt1: "shot_mina_diginin",
                    bs2: "",
                    bs3: ""
                }
            },
            MINE_SHOT: {
                tag: "mine_shot",
                num: 4,
                files: {
                    bt1: "shot_mina_shot",
                    bs2: "",
                    bs3: ""
                }
            },
            FINAL_LEVEL: {
                tag: "final_level",
                num: 1,
                files: {
                    bt1: "final_level",
                    bs2: "final_level",
                    bs3: "final_level"
                }
            },
            FINAL_LEVEL_COMPLETED: {
                tag: "final_level_cmplt",
                num: 1,
                files: {
                    bt1: "final_level_completed",
                    bs2: "kraj_igre",
                    bs3: "kraj_igre"
                }
            },
            UI_BUTTON: {
                tag: "ui_button",
                num: 2,
                files: {
                    bt1: "menu_option",
                    bs2: "",
                    bs3: ""
                }
            },
            UI_START_1P: {
                tag: "ui_start_1p",
                num: 1,
                files: {
                    bt1: "menu_recharging_a_gun",
                    bs2: "menu_recharging_a_gun",
                    bs3: "menu_recharging_a_gun"
                }
            },
            UI_START_2P: {
                tag: "ui_start_2p",
                num: 1,
                files: {
                    bt1: "menu_recharging_a_gun2",
                    bs2: "",
                    bs3: "menu_swoosh_odjeca"
                }
            },
            UI_OPEN_SETTINGS: {
                tag: "ui_open_settings",
                num: 1,
                files: {
                    bt1: "menu_swoosh_odjeca",
                    bs2: "menu_swoosh_odjeca",
                    bs3: ""
                }
            },
            UI_SLIDE_UP: {
                tag: "slide_up",
                num: 1,
                files: {
                    bt1: "menu_sliding_up",
                    bs2: "",
                    bs3: ""
                }
            },
            UI_SLIDE_DOWN: {
                tag: "slide_down",
                num: 1,
                files: {
                    bt1: "menu_sliding_down",
                    bs2: "",
                    bs3: ""
                }
            },
            UI_SOUND_ONOFF: {
                tag: "slide_down",
                num: 1,
                files: {
                    bt1: "",
                    bs2: "kravica",
                    bs3: "kravica"
                }
            },
            TRAMPOLINE: {
                tag: "trampoline",
                num: 4,
                files: {
                    bt1: "",
                    bs2: "trampoline",
                    bs3: "trambulin"
                }
            },
            SWITCH: {
                tag: "switch",
                num: 6,
                files: {
                    bt1: "",
                    bs2: "switch",
                    bs3: "slide4"
                }
            },
            LEVEL_START: {
                tag: "lvl_start",
                num: 1,
                files: {
                    bt1: "",
                    bs2: "pocetak_levela",
                    bs3: "pocetak_levela"
                }
            },
            METAL_BALL: {
                tag: "metalball",
                num: 5,
                files: {
                    bt1: "",
                    bs2: "metalna",
                    bs3: "metalna"
                }
            },
            HOOK_FLYING: {
                tag: "hook_flying",
                num: 2,
                files: {
                    bt1: "",
                    bs2: "hook-shot",
                    bs3: "hook-shot"
                }
            },
            TIME_BONUS: {
                tag: "time_bonus",
                num: 4,
                files: {
                    bt1: "",
                    bs2: "vrijeme-bonus",
                    bs3: ""
                }
            },
            UI_10SEC_LEFT: {
                tag: "time_10sec",
                num: 1,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "podmornica_vrijeme"
                }
            },
            FRAGMENT_SWITCH: {
                tag: "frag_switch",
                num: 10,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "switch_horiz"
                }
            },
            ITEM_EXTRA_TIME: {
                tag: "itm_e_time",
                num: 2,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "cuka"
                }
            },
            ITEM_EXTRA_LIFE: {
                tag: "itm_e_life",
                num: 2,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "extra_life"
                }
            },
            SHIELD_ON_2: {
                tag: "shield_on_2",
                num: 3,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "stit_invincible"
                }
            },
            SHOOT_LASER1: {
                tag: "bs3_laser1",
                num: 2,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "laser1"
                }
            },
            SHOOT_LASER2: {
                tag: "bs3_laser2",
                num: 2,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "laser2"
                }
            },
            SHOOT_LASER3: {
                tag: "bs3_laser3",
                num: 2,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "laser3"
                }
            },
            TELEPORT_CONTRACT: {
                tag: "teleport_cntrct",
                num: 2,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "smoke_puff"
                }
            },
            TELEPORT_CONTENT: {
                tag: "teleport_conten",
                num: 2,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "teleport_content"
                }
            },
            TELEPORT_BACK: {
                tag: "teleport_back",
                num: 2,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "smoke_puff_nack"
                }
            },
            WALL_TIMED_OUT: {
                tag: "wall_timed_out",
                num: 4,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "rasipanje"
                }
            },
            WALL_TIMED_IN: {
                tag: "wall_timed_in",
                num: 4,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "rasipanje_back"
                }
            },
            BALL_WARP: {
                tag: "ball_warp",
                num: 1,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "magical_16"
                }
            },
            FIREWORK_1: {
                tag: "firework1",
                num: 3,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "fireworks_bum_1"
                }
            },
            FIREWORK_2: {
                tag: "firework2",
                num: 3,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "fireworks_bum_2"
                }
            },
            FIREWORK_3: {
                tag: "firework3",
                num: 3,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "fireworks_bum_3"
                }
            },
            FIREWORK_ROCKET: {
                tag: "firework_rocket",
                num: 3,
                files: {
                    bt1: "",
                    bs2: "",
                    bs3: "fireworks_raketa"
                }
            },
            RETENTION_XP: {
                tag: "ret_xp",
                num: 3,
                files: {
                    bt1: "collect_xp",
                    bs2: "collect_xp",
                    bs3: "collect_xp"
                }
            },
            RETENTION_LEVELUP: {
                tag: "ret_lvlup",
                num: 3,
                files: {
                    bt1: "levelup",
                    bs2: "levelup",
                    bs3: "levelup"
                }
            },
            RETENTION_TASK_CMPLTD: {
                tag: "tsk_cmpltd",
                num: 3,
                files: {
                    bt1: "task_notify",
                    bs2: "task_notify",
                    bs3: "task_notify"
                }
            },
            RETENTION_UPGRD_ACTIVE: {
                tag: "upgrd_active",
                num: 1,
                files: {
                    bt1: "upgrade_active",
                    bs2: "upgrade_active",
                    bs3: "upgrade_active"
                }
            }
        }, t.a = h
    },
    16: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = function() {
                function e() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                        a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                    if (s()(this, e), "number" != typeof t) throw new Error("Invalid X value" + t);
                    if ("number" != typeof a) throw new Error("Invalid Y value" + a);
                    this.x = t, this.y = a
                }
                return l()(e, [{
                    key: "plus",
                    value: function(t) {
                        return new e(this.x + t.x, this.y + t.y)
                    }
                }, {
                    key: "minus",
                    value: function(t) {
                        return new e(this.x - t.x, this.y - t.y)
                    }
                }, {
                    key: "multiply",
                    value: function(t) {
                        return new e(this.x * t.x, this.y * t.y)
                    }
                }, {
                    key: "multiplyInt",
                    value: function(t) {
                        return new e(this.x * t, this.y * t)
                    }
                }, {
                    key: "divide",
                    value: function(t) {
                        return new e(this.x / t.x, this.y / t.y)
                    }
                }, {
                    key: "divideInt",
                    value: function(t) {
                        return new e(this.x / t, this.y / t)
                    }
                }, {
                    key: "equalTo",
                    value: function(e) {
                        return this.x === e.x && this.y === e.y
                    }
                }, {
                    key: "copy",
                    value: function() {
                        return new e(this.x, this.y)
                    }
                }, {
                    key: "toString",
                    value: function() {
                        return "(".concat(this.x.toFixed(2), ", ").concat(this.y.toFixed(2), ")")
                    }
                }], [{
                    key: "getPowDistance",
                    value: function(e, t) {
                        return Math.pow(t.x - e.x, 2) + Math.pow(t.y - e.y, 2)
                    }
                }, {
                    key: "ZERO",
                    get: function() {
                        return new e(0, 0)
                    }
                }, {
                    key: "ONE",
                    get: function() {
                        return new e(1, 1)
                    }
                }]), e
            }();
        t.a = o
    },
    169: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return d
        }));
        var i = a(5),
            s = a.n(i),
            n = a(10),
            l = a.n(n),
            o = a(7),
            r = a.n(o),
            h = a(11),
            p = a.n(h),
            d = function(e) {
                function t() {
                    var e;
                    return s()(this, t), (e = l()(this, r()(t).call(this))).playerKeys = {
                        player1: {
                            controller: "keyboard",
                            left: 37,
                            left_txt: "◀",
                            right: 39,
                            right_txt: "▶",
                            shoot: 32,
                            shoot_txt: "SPC"
                        },
                        player2: {
                            controller: "keyboard",
                            left: 65,
                            left_txt: "A",
                            right: 68,
                            right_txt: "D",
                            shoot: 81,
                            shoot_txt: "Q"
                        }
                    }, e
                }
                return p()(t, e), t
            }(a(170).a)
    },
    170: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return o
        }));
        var i = a(5),
            s = a.n(i),
            n = a(8),
            l = a(0),
            o = function e() {
                s()(this, e), this.playerKeys = {
                    player1: {
                        controller: "keyboard",
                        left: 37,
                        left_txt: "◀",
                        right: 39,
                        right_txt: "▶",
                        shoot: 32,
                        shoot_txt: "SPC"
                    },
                    player2: {
                        controller: "keyboard",
                        left: 65,
                        left_txt: "A",
                        right: 68,
                        right_txt: "D",
                        shoot: 81,
                        shoot_txt: "Q"
                    }
                }, this.lastLevelPlayed = {}, this.lastLevelPlayed[n.a.MODES.SINGLE] = 0, this.lastLevelPlayed[n.a.MODES.TWOP] = 0, this.maxLevelUnlocked = {}, this.maxLevelUnlocked[n.a.MODES.SINGLE] = 0, this.maxLevelUnlocked[n.a.MODES.TWOP] = 0, this.totalBubblesPopped = 0, this.soundOn = !0, this.installDate = new Date, this.lastNewsID = 0, this.noads = !1, this.showPickedItemName = l.a.isBS3, this.shownGamePopups = [], this.tasksCompleted = [], this.tasksCollected = [], this.tasksStats = {}, this.taskPinned = null, this.taskCompleteDateFirst = null, this.taskCompleteDateLast = null, this.levelPointsDistributed = [], this.loggedClicks = [], this.filledAdFreqCount = 0, this.sharedClickedFrom = [], this.bestScorePerLevel = [], this.selectedSkinID = "", this.skinsNewViewed = [], this.skinsUnlocked = [], this.skinsUnlockedUsed = []
            }
    },
    171: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return _
        }));
        var i = a(17),
            s = a.n(i),
            n = a(5),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = function(e) {
                function t() {
                    var e;
                    return l()(this, t), (e = r()(this, p()(t).call(this))).playerKeys = {
                        player1: {
                            controller: "keyboard",
                            left: 37,
                            left_txt: "◀",
                            right: 39,
                            right_txt: "▶",
                            up: 38,
                            up_txt: "▲",
                            down: 40,
                            down_txt: "▼",
                            shoot: 32,
                            shoot_txt: "SPC"
                        },
                        player2: {
                            controller: "keyboard",
                            left: 65,
                            left_txt: "A",
                            right: 68,
                            right_txt: "D",
                            up: 87,
                            up_txt: "W",
                            down: 83,
                            down_txt: "S",
                            shoot: 81,
                            shoot_txt: "Q"
                        }
                    }, e.levelEditor = s()({
                        uniqueCounter: 1,
                        allLevels: [],
                        lastLevelEdited: 1,
                        watchedTutorials: []
                    }, "lastLevelEdited", null), e.playedPackInfo = {}, e.loadedPacks = [], e
                }
                return y()(t, e), t
            }(a(170).a)
    },
    172: function(e, t, a) {
        "use strict";
        var i = a(79),
            s = a.n(i),
            n = a(5),
            l = a.n(n),
            o = a(6),
            r = a.n(o),
            h = a(10),
            p = a.n(h),
            d = a(19),
            y = a.n(d),
            _ = a(7),
            c = a.n(_),
            m = a(11),
            u = a.n(m),
            g = a(71),
            v = a(2),
            f = a(0),
            S = (a(244), a(3)),
            E = (a(245), a(32)),
            x = (a(70), a(1)),
            T = a(26),
            b = a(12),
            k = function(e) {
                function t() {
                    return l()(this, t), p()(this, c()(t).apply(this, arguments))
                }
                return u()(t, e), r()(t, [{
                    key: "myInit",
                    value: function() {
                        this.modType = x.a.ITEM_MANAGER.MOD_TYPE.FREEZE, this.MOD_TIME = 5, (f.a.isBS2 || f.a.isBS3) && (this.MOD_TIME = 6), this.modTime = this.MOD_TIME;
                        var e = T.a.getPassiveItemValue(x.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_FREEZE);
                        e > 0 && (this.modTime += e, b.a.TaskIncrement(this.gameScene, b.a.TASK_TYPE.USE_UPGRADE, 1, x.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_FREEZE)), v.a.log("ITM_FREEZE", "freeze initiated!");
                        for (var a = 0, i = Object.entries(this.gameScene.ballManager.activeBalls); a < i.length; a++) {
                            var n = s()(i[a], 2);
                            n[0];
                            n[1].forEach((function(e) {
                                t.freezeBall(e)
                            }))
                        }
                        return S.a._allGameObjects.forEach((function(e) {
                            e.goType != x.a.GO_TYPE.WALL || e._wallInfo.t != x.a.WALL.WALL_TYPE.CAVEIN_BS3 && e._wallInfo.t != x.a.WALL.WALL_TYPE.MOVING || t.freezeCaveinMoving(e)
                        })), this._formatCountdownTime(this.modTime), this
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        y()(c()(t.prototype), "myUpdate", this).call(this, e, a), this._formatCountdownTime(this.modTime)
                    }
                }, {
                    key: "modAddExisting",
                    value: function() {
                        v.a.log("ITM_FREEZE", "Addi ng more freeze time.."), this.modTime += 4, this._formatCountdownResetAlpha()
                    }
                }, {
                    key: "modExpired",
                    value: function() {
                        v.a.log("ITM_FREEZE", "No more freeze time!!");
                        for (var e = 0, a = Object.entries(this.gameScene.ballManager.activeBalls); e < a.length; e++) {
                            var i = s()(a[e], 2);
                            i[0];
                            i[1].forEach((function(e) {
                                t.unfreezeBall(e)
                            }))
                        }
                        S.a._allGameObjects.forEach((function(e) {
                            e.goType != x.a.GO_TYPE.WALL || e._wallInfo.t != x.a.WALL.WALL_TYPE.CAVEIN_BS3 && e._wallInfo.t != x.a.WALL.WALL_TYPE.MOVING || t.unfreezeCaveinMoving(e)
                        }))
                    }
                }], [{
                    key: "freezeBall",
                    value: function(e) {
                        e._currentState == E.a.EVENT_STATE.ACTIVE && (e.mySprite.alpha = .5, e.isStatic = !0)
                    }
                }, {
                    key: "unfreezeBall",
                    value: function(e) {
                        e._currentState == E.a.EVENT_STATE.ACTIVE && (e.mySprite.alpha = 1, e.isStatic = !1)
                    }
                }, {
                    key: "freezeCaveinMoving",
                    value: function(e) {
                        e._currentState == E.a.EVENT_STATE.ACTIVE && (e._frozen = !0)
                    }
                }, {
                    key: "unfreezeCaveinMoving",
                    value: function(e) {
                        e._currentState == E.a.EVENT_STATE.ACTIVE && (e._frozen = !1)
                    }
                }]), t
            }(g.a);
        t.a = k
    },
    173: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return E
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(16),
            c = a(49),
            m = a(22),
            u = a(0),
            g = (a(30), a(3)),
            v = a(25),
            f = (a(73), a(1)),
            S = a(15),
            E = function(e) {
                function t(e, a, i, n, l) {
                    var o;
                    s()(this, t);
                    var h = e.gameScene,
                        d = e._wallInfo,
                        y = new _.a(d.x - d.w / 2 + a - i / 2, d.y + 10 * (l - 1) - d.h / 2 + 5),
                        c = new _.a(i, 10),
                        S = new _.a(y.x - c.x / 2, y.y - c.y / 2),
                        E = new _.a(y.x + c.x / 2, y.y + c.y / 2);
                    o = r()(this, p()(t).call(this, h, m.a.LAYER.FRAGMENTS, m.a.LAYERS_FRAGMENTS, S, E, {
                        vel: new _.a(0, u.a.itemGrav)
                    }));
                    var x = "walls/breakable.png";
                    return e._wallInfo.t == f.a.WALL.WALL_TYPE.SWITCH && (x = "walls/basic.png"), o.mySprite = h.add.tileSprite(y.x - i / 2, y.y, i, 10, u.a.spriteKey, x), o.mySprite.tilePositionX += a - n, o.mySprite.tilePositionY += 10 * (l - 1), o.mySprite.angle = v.a(-20, 20), o.acc.y = v.a(3.5, 5), g.a.mySpriteDepth(g.a.RENDER_DEPTH.UNDER_GAME, o.mySprite), o.goType = f.a.GO_TYPE.FRAGMENT, o._isLanded = !1, o._fadeTime = 2e3, o
                }
                return y()(t, e), l()(t, [{
                    key: "myUpdate",
                    value: function(e, t) {
                        this.mySprite.x = this.pos.x, this.mySprite.y = this.pos.y, this._isLanded && (this._fadeTime -= t, this.mySprite.alpha = this._fadeTime / 1e3, 0 == this.mySprite.alpha && this.myOnDestroy())
                    }
                }, {
                    key: "collideEdge",
                    value: function(e, t, a, i, s, n, l, o) {
                        return e == f.a.PHY.COL_EDGE.BOTTOM && (this.acc.y = 0, this.vel.y = 0, this._isLanded = !0, this.pbActive = !1, !0)
                    }
                }], [{
                    key: "GetFragments",
                    value: function(e) {
                        var a = e._wallInfo,
                            i = 11.5,
                            s = 9.8,
                            n = 4;
                        e._wallInfo.t == f.a.WALL.WALL_TYPE.SWITCH && (i = 18, s = 30.25, n = 2);
                        for (var l = a.w, o = [], r = 1; 10 * r <= a.h; r++)
                            for (var h = 0, p = 0, d = 1; h < l; d++)
                                if (p = i, d > 1 && (p = s), (h += p) > l && (p -= h - l, h = l), p > 3) {
                                    var y = new t(e, h, p, i, r);
                                    o.push(y), d % n == 1 && r % 2 == 1 && S.a.playSound(e.gameScene, S.a.SND.FRAGMENT_SWITCH, {
                                        delay: v.a(0, .2)
                                    })
                                } return o
                    }
                }]), t
            }(c.a)
    },
    174: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return E
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(19),
            p = a.n(h),
            d = a(7),
            y = a.n(d),
            _ = a(11),
            c = a.n(_),
            m = a(17),
            u = a.n(m),
            g = a(30),
            v = a(23),
            f = (a(70), a(42), a(15)),
            S = a(1),
            E = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = r()(this, y()(t).call(this, e, a))).wallType = S.a.WALL.WALL_TYPE.TRAMPOLINE, i._steppedOnTrampoline = !1, i._steppedOnTrampolineTime = 0, t.ANI_LENGTH = t.TOTAL_FRAMES / t.FRAME_RATE, i
                }
                return c()(t, e), l()(t, [{
                    key: "drawWall",
                    value: function() {
                        this.mySprite = new v.a(this.gameScene, this.pos.x, this.pos.y - 2, this.size.x, 14, "walls/trampoline/trampoline_3.png", {
                            top: 9,
                            bottom: 2,
                            left: 3.5,
                            right: 3.5
                        }), this.mySprite.setDepthNinePatch(this.myRenderDepth), this.mySprite.ninePatch.setFrame("walls/trampoline/trampoline_1.png")
                    }
                }, {
                    key: "trampolineBallBounce",
                    value: function(e) {
                        this.animateTrampoline()
                    }
                }, {
                    key: "trampolinePlayerBounce",
                    value: function(e) {
                        this.animateTrampoline()
                    }
                }, {
                    key: "animateTrampoline",
                    value: function() {
                        f.a.playSound(this.gameScene, f.a.SND.TRAMPOLINE), this._steppedOnTrampoline || (this._steppedOnTrampoline = !0, this._steppedOnTrampolineTime = this.gameScene.gameTime)
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        if (p()(y()(t.prototype), "myUpdate", this).call(this, e, a), !this.gameScene.isGamePaused && this._steppedOnTrampoline) {
                            var i = 1 + (e - this._steppedOnTrampolineTime) / 1e3 / t.ANI_LENGTH * t.FRAME_RATE / t.TOTAL_FRAMES;
                            (i = Math.floor(i)) > t.TOTAL_FRAMES && (i = 1, this._steppedOnTrampoline = !1), this.mySprite.ninePatch.setFrame("walls/trampoline/trampoline_" + i + ".png")
                        }
                    }
                }]), t
            }(g.a);
        u()(E, "SPEED_UP", 1.3), u()(E, "FRAME_RATE", 60), u()(E, "TOTAL_FRAMES", 12), u()(E, "ANI_LENGTH", 0)
    },
    175: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return _
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(21),
            r = a(23),
            h = a(4),
            p = a(0),
            d = a(15),
            y = a(3),
            _ = function() {
                function e(t, a, i) {
                    if (s()(this, e), this.myScene = t, p.a.isBT) {
                        this.btn_background = new r.a(t, a, i, 100, 100, "ui/main_menu_back.png", {
                            top: 30,
                            bottom: 30,
                            left: 30,
                            right: 30
                        });
                        var n = "ui/volume_on.png";
                        h.a.gameSettings.soundOn || (n = "ui/volume_off.png"), this.soundButton = new o.a(t, a, i, 70, 70, {
                            icon: n
                        }, this.btn_changeSound.bind(this), null, null, !1, !1)
                    } else if (p.a.isBS2 || p.a.isBS3) {
                        this.snd_title = t.add.bitmapText(a + 35, i, p.a.fontNames.MENU, "SOUND", 35), this.snd_title.setOrigin(0, .5), this.snd_title.alpha = 1;
                        var l = "ui/btn/sound_on.png";
                        h.a.gameSettings.soundOn || (l = "ui/btn/sound_off.png"), this.soundButton = new o.a(t, a, i, 60, 50, {
                            icon: l,
                            size: 36
                        }, this.btn_changeSound.bind(this), null, null, !1, !1)
                    }
                }
                return l()(e, [{
                    key: "btn_changeSound",
                    value: function() {
                        if (h.a.gameSettings.soundOn = !h.a.gameSettings.soundOn, h.a.saveUserSettings(), p.a.isBT) {
                            var e = "ui/volume_on.png";
                            h.a.gameSettings.soundOn || (e = "ui/volume_off.png"), this.soundButton.changeTextOrIcon({
                                icon: e
                            })
                        } else if (p.a.isBS2 || p.a.isBS3) {
                            var t = "ui/btn/sound_on.png";
                            h.a.gameSettings.soundOn || (t = "ui/btn/sound_off.png"), this.soundButton.changeTextOrIcon({
                                icon: t
                            }), d.a.playSound(this.myScene, d.a.SND.UI_SOUND_ONOFF)
                        }
                    }
                }, {
                    key: "changeDepth",
                    value: function(e) {
                        this.btn_background && this.btn_background.setDepthNinePatch(e), this.snd_title && y.a.mySpriteDepth(e, this.snd_title), this.soundButton && this.soundButton.setDepthMyUIButton(e)
                    }
                }, {
                    key: "setVisibleMySndBtn",
                    value: function(e) {
                        this.btn_background && this.btn_background.setVisibleNinePatch(e), this.snd_title && (this.snd_title.visible = e), this.soundButton && this.soundButton.setVisibleMyUIButton(e)
                    }
                }]), e
            }()
    },
    176: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = (a(9), a(242), a(18)),
            l = a(31),
            o = (a(14), a(2), a(0)),
            r = a(21),
            h = a(247),
            p = a(29),
            d = a(20);
        t.a = function e(t) {
            var a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
            if (s()(this, e), !n.a.isFacebook && d.a.isLazyLoaded) {
                var y = 146,
                    _ = 56,
                    c = a || .68 * o.a.gameWidth,
                    m = i || .9 * o.a.gameHeight,
                    u = function() {
                        new h.a(t, (function(e) {
                            e && (p.a.LogClick(p.a.CLICK_TYPE.DISCORD), window.open(l.a.DISCORD_INTRODUCEYOURSELF_CHANNEL, n.a.browserWindow))
                        }))
                    },
                    g = new r.a(t, c, m, y, _, {
                        icon: "ui/my_discord.png",
                        iconSpriteKey: o.a.lazySpriteKey
                    }, u);
                return g
            }
        }
    },
    18: function(e, t, a) {
        "use strict";
        a(2);

        function i() {}
        i.TARGETS = {
            FACEBOOK: "fb",
            POKI: "poki",
            CORDOVA: "cordova"
        }, i.myTarget = null, i.initialize = function(e) {
            i.myTarget = e, i.myTarget == i.TARGETS.FACEBOOK && (i.isFacebook = !0), i.myTarget == i.TARGETS.CORDOVA && (i.isCordova = !0, i.browserWindow = "_system"), i.myTarget == i.TARGETS.POKI && (i.isPoki = !0)
        }, i.isFacebook = !1, i.isCordova = !1, i.isPoki = !1, i.browserWindow = "_blank", t.a = i
    },
    2: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(0),
            r = a(43),
            h = a.n(r),
            p = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "always",
                    value: function(e) {
                        for (var t, a = arguments.length, i = new Array(a > 1 ? a - 1 : 0), s = 1; s < a; s++) i[s - 1] = arguments[s];
                        (t = console).log.apply(t, [this._format(e)].concat(i))
                    }
                }, {
                    key: "log",
                    value: function(t) {
                        for (var a, i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), n = 1; n < i; n++) s[n - 1] = arguments[n];
                        e.debugLog && (a = console).log.apply(a, [this._format(t)].concat(s))
                    }
                }, {
                    key: "warn",
                    value: function(t) {
                        for (var a, i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), n = 1; n < i; n++) s[n - 1] = arguments[n];
                        e.debugLog && (a = console).warn.apply(a, [this._format(t)].concat(s))
                    }
                }, {
                    key: "error",
                    value: function(t) {
                        if (e.debugLog) {
                            for (var a, i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), n = 1; n < i; n++) s[n - 1] = arguments[n];
                            (a = console).error.apply(a, [this._format(t)].concat(s)), e.Beep()
                        }
                    }
                }, {
                    key: "todo",
                    value: function(t) {
                        e.debugLog && (console.error("%c[TODO]" + t, "color: blue; font-size: 12px; background-color: yellow;"), e.Beep())
                    }
                }, {
                    key: "_format",
                    value: function(e) {
                        return "[" + e + "]"
                    }
                }, {
                    key: "printDebuggerOptions",
                    value: function() {
                        var t = "";
                        e.logAnalytics && (t += "\nDEBUGGER: Loggin Analytics ON."), e.debugPhy && (t += "\nDEBUGGER: Physics On."), e.debugPhyFrame && (t += "\nDEBUGGER: Physics Frame is On.", o.a.phyStepMax = 3), e.forceRSOff && (t += "\nDEBUGGER: Remote Settings always off."), e.forceNewsOn && (t += "\nDEBUGGER: NEWS debugger is on."), e.noAdBreak && (t += "\nDEBUGGER: No ad break, ever."), e.noAdIgnore && (t += "\nDEBUGGER: Ignoring NO-AD purchase."), e.useAdMobTestAds && (t += "\nDEBUGGER: Admob test adas are ON."), e.deselectItem && (t += "\nDEBUGGER: Deselecting item by defaut."), e.addMoreInfo && (t += "\nDEBUGGER: Adding more information to log."), e.packCanBeUnchecked && (t += "\nDEBUGGER: Pack can add unchecekd leveles."), e.alwaysShowAllFillerAds && (t += "\nDEBUGGER: Always showing filler ads.."), e.neverShowAllFillerAds && (t += "\nDEBUGGER: Never show filler ads.."), e.alwaysShowControls && (t += "\nDEBUGGER: Showing game controls. Always."), e.alwaysShowEditorTutorials && (t += "\nDEBUGGER: Showing tutorials. Always."), e.editorExtraCommands && (t += "\nAllow extra command in the editor (import from flash, delete all, export to clipboard..)"), e.loadLazyImmediate && (t += "\nLoading LazySprite sheet immediately (like Cordova)"), e.getMobileScreenshots && (t += "\nDEBUGGER: Using fake input Keyboard (looks like TOUCH)"), e.resetExperience && (t += "\nDEBUGGER: Using SET EXPERIENCE"), 0 != e.rushToLevel && (t += "\nDEBUGGER: SKIPPING XP LEVELS!"), e.taskLogin && (t += "\nDEBUGGER: Using repeat login debug"), !1 !== e.overrideLives && (t += "\nDEBUGGER: Using override LIVES" + e.overrideLives), e.upgradeItemTime && (t += "\nDEBUGGER: Using upgradeItemTime NOW"), e.resetSkins && (t += "\nDEBUGGER: RESETTING ALL SKIN INFORMATION"), "" != t && (console.error("%cDEBUGGER IS ON", "color: yellow; font-size: 35px; background-color: red;"), console.error(t))
                    }
                }]), e
            }();
        p.debugLog = h.a.GET_ENV_PROD_OR_DEV() == h.a.ENV_DEV, p.logAnalytics = !1, p.debugPhy = !1, p.debugPhyFrame = !1, p.forceRSOff = !1, p.forceNewsOn = !1, p.forceNewsOnJSON = '{"breakBetweenAds":120,"noAdsBeforeLevel":2,"fillerAdFrequency":11,"news":{"id":3,"action":"DOWNLOAD","image":"https://www.kresogames.com/game_supervisor/serve_files/bt1_mobile_for_bsa.jpg","url_ios":"https://itunes.apple.com/app/id947676130","url_android":"https://play.google.com/store/apps/details?id=com.rebubbled.bubblestruggle","url_web":"https://bubble-adventures.com"}}', p.noAdBreak = !1, p.noAdIgnore = !1, p.useAdMobTestAds = !1, p.alwaysShowAllFillerAds = !1, p.neverShowAllFillerAds = !1, p.packCanBeUnchecked = !1, p.deselectItem = !1, p.addMoreInfo = !1, p.alwaysShowControls = !1, p.alwaysShowEditorTutorials = !1, p.editorExtraCommands = !1, p.loadLazyImmediate = !1, p.resetExperience = !1, p.rushToLevel = 0, p.taskLogin = !1, p.overrideLives = !1, p.upgradeItemTime = !1, p.resetSkins = !1, p.getMobileScreenshots = !1, p.Beep = function() {
            p.debugLog && new Audio("").play()
        }, t.a = p
    },
    20: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return E
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(17),
            c = a.n(_),
            m = a(0),
            u = (a(18), a(2)),
            g = a(12),
            v = a(24),
            f = a(26),
            S = a(29),
            E = function(e) {
                function t() {
                    return s()(this, t), r()(this, p()(t).call(this, {
                        key: "LazyloadScene"
                    }))
                }
                return y()(t, e), l()(t, [{
                    key: "preload",
                    value: function() {
                        t.sceneLink = this, t.LazyLoad(this), S.a.LoadSDK(this), u.a.log("LazyLoad", "Preloading.."), this.load.on("loaderror", (function(e) {
                            t._errorWhileLoading = !0, u.a.error("loaderror loading", e)
                        }))
                    }
                }, {
                    key: "init",
                    value: function(e) {
                        u.a.log("LazyLoad", "LazyLoadScene init with data:", e), this.continueToTitleSceneCallback = e.continueToTitleScene
                    }
                }, {
                    key: "create",
                    value: function() {
                        var e = this;
                        t._errorWhileLoading || (t._textureManager = this.textures, m.a.lazyAnimations.forEach((function(t) {
                            e.anims.create(t)
                        })), v.a.init(this), f.a.init(), g.a.init(this), this.events.emit(t.EVT_LOADED, "param"), u.a.log("Lazyload", "Scene created & event sent"), null != this.continueToTitleSceneCallback ? (u.a.log("LazyLoad", "Loaded Lazyload received 'continueToTitleSceneCallback'... loading TitleScene now..."), this.continueToTitleSceneCallback()) : u.a.log("LazyLoad", "Loaded Lazyload while TitleScene was active..."))
                    }
                }], [{
                    key: "LazyLoad",
                    value: function(e) {
                        u.a.log("LazyLoad", "Calling loadAfterGameStarts(scene)", e), m.a.loaderAfterGameStarts(e)
                    }
                }, {
                    key: "isLazyLoaded",
                    get: function() {
                        if (!t._errorWhileLoading) return null != t._textureManager && !!t._textureManager.exists(m.a.lazySpriteKey)
                    }
                }]), t
            }(Phaser.Scene);
        c()(E, "sceneLink", null), c()(E, "EVT_LOADED", "lazyLoaded"), c()(E, "pinnedTaskContainer", null), c()(E, "pinnedTaskTween", null), c()(E, "_errorWhileLoading", !1), c()(E, "_textureManager", null)
    },
    21: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(0),
            r = a(23),
            h = a(3),
            p = a(15),
            d = a(9),
            y = a(36),
            _ = (a(2), function() {
                function e(t, a, i, n, l, h, p, d, _) {
                    var c = arguments.length > 9 && void 0 !== arguments[9] && arguments[9],
                        m = arguments.length > 10 && void 0 !== arguments[10] && arguments[10],
                        u = arguments.length > 11 && void 0 !== arguments[11] ? arguments[11] : null,
                        g = arguments.length > 12 && void 0 !== arguments[12] && arguments[12];
                    s()(this, e), this.myScene = t, this.gameInfo = {
                        padding: 0,
                        paddingOutline: 0
                    }, o.a.isBT ? (this.gameInfo.padding = 6, this.gameInfo.paddingOutline = 12) : o.a.isBS2 ? (this.gameInfo.padding = 20, this.gameInfo.paddingOutline = 12) : o.a.isBS3 && (this.gameInfo.padding = 20, this.gameInfo.paddingOutline = 20), this.buttonIsActive = !0, this.mid_x = a, this.mid_y = i, this.w = n, this.h = l, this.isBitmapText = !0, this.useOnlyOnce = c, this.newOption = g, this.newButtonSprite = null, this.isVisible = !0, this.buttonID = "", this.backgroundNinePatch = new r.a(t, a, i, n, l, "ui/button_back.png", {
                        top: this.gameInfo.padding * o.a.spriteScale,
                        bottom: this.gameInfo.padding * o.a.spriteScale,
                        left: this.gameInfo.padding * o.a.spriteScale,
                        right: this.gameInfo.padding * o.a.spriteScale
                    }), this.btnGroup = u || t.scene.key, this.focused = m, this.focusedNinePatch = new r.a(t, a, i, n, l, "ui/button_focused.psd", {
                        top: this.gameInfo.paddingOutline / o.a.spriteScale,
                        bottom: this.gameInfo.paddingOutline / o.a.spriteScale,
                        left: this.gameInfo.paddingOutline / o.a.spriteScale,
                        right: this.gameInfo.paddingOutline / o.a.spriteScale
                    });
                    t.tweens.add({
                        targets: this.focusedNinePatch.ninePatch,
                        alpha: {
                            from: .2,
                            to: .8
                        },
                        ease: "Linear",
                        duration: 200,
                        repeat: -1,
                        yoyo: !0
                    });
                    this._drawButton(h), this.callbackClick = p, this.callbackHover = d, this.callbackRest = _, this.makeSound = !0, this.myInit(), y.a._registerSceneButton(this)
                }
                return l()(e, [{
                    key: "myInit",
                    value: function() {
                        var e = this;
                        this.backgroundNinePatch.ninePatch.setInteractive({
                            useHandCursor: !0
                        }).on("pointerover", (function() {
                            return e.mouseOver()
                        })).on("pointerout", (function() {
                            return e.mouseOut()
                        })).on("pointerup", (function() {
                            return e.mouseClick()
                        }))
                    }
                }, {
                    key: "mouseClick",
                    value: function() {
                        this.buttonIsActive && (y.a.selectButton(this), y.a._triggerSelectedButton())
                    }
                }, {
                    key: "mouseOver",
                    value: function() {
                        this.buttonIsActive && y.a.selectButton(this)
                    }
                }, {
                    key: "mouseOut",
                    value: function() {
                        this.buttonIsActive && this.actionHoverOff()
                    }
                }, {
                    key: "actionClick",
                    value: function() {
                        this.buttonIsActive && this.isVisible && (this.callbackClick(), this.useOnlyOnce && (this.buttonIsActive = !1), this.makeSound && p.a.playSound(this.myScene, p.a.SND.UI_BUTTON))
                    }
                }, {
                    key: "actionHoverOn",
                    value: function() {
                        this.buttonIsActive && this.isVisible && null != this.callbackHover && this.callbackHover()
                    }
                }, {
                    key: "actionHoverOff",
                    value: function() {
                        this.buttonIsActive && this.isVisible && null != this.callbackRest && this.callbackRest()
                    }
                }, {
                    key: "setVisibleMyUIButton",
                    value: function(e) {
                        this.backgroundNinePatch.setVisibleNinePatch(e), null != this.myText && this.myText.setVisible(e), null != this.myIcon && this.myIcon.setVisible(e), this.focusedNinePatch.setVisibleNinePatch(e), this.isVisible = e, e && this._drawButton(), this.focused && !e && (this.focused = !1)
                    }
                }, {
                    key: "setDepthMyUIButton",
                    value: function(e) {
                        this.backgroundNinePatch.setDepthNinePatch(e), null != this.myText && h.a.mySpriteDepth(e, this.myText), null != this.myIcon && h.a.mySpriteDepth(e, this.myIcon), this.focusedNinePatch.setDepthNinePatch(e)
                    }
                }, {
                    key: "changeTextOrIcon",
                    value: function(e) {
                        if (null != this.myText && null != e.text && (this.isBitmapText && null == e.bitmapText || !this.isBitmapText && null != e.bitmapText)) return this.myText.text = e.text, this.myText.y = this.mid_y + (e.fixY || 0), void(this.myText.fontSize = e.size || this.myText.fontSize);
                        null == this.myIcon || null == e.icon ? (null != this.myText && (this.myText.destroy(), this.myText = null), null != this.myIcon && (this.myIcon.destroy(), this.myIcon = null), this._drawButton(e)) : this.myIcon.setTexture(e.iconSpriteKey || o.a.spriteKey, e.icon)
                    }
                }, {
                    key: "_drawButton",
                    value: function(e) {
                        null != e && (null != e.text && (this.isBitmapText = e.bitmapText || !0, null == e.bitmapText ? this.myText = this.myScene.add.bitmapText(this.mid_x, this.mid_y, o.a.fontNames.MENU, e.text, e.size) : this.myText = this.myScene.add.text(this.mid_x, this.mid_y, e.text).setFont("Arial, Verdana").setFontSize(e.size).setColor("#dcdb2f"), this.myText.setOrigin(.5, .5), this.myText.y += e.fixY || 0, this.buttonID = e.text), null != e.icon && (this.myIcon = new d.a(this.myScene, this.mid_x, this.mid_y, e.iconSpriteKey || o.a.spriteKey, e.icon), this.buttonID = e.icon)), this.focused ? this.focusedNinePatch.setVisibleNinePatch(!0) : this.focusedNinePatch.setVisibleNinePatch(!1), this.newOption && (null != this.newButtonSprite && this.newButtonSprite.destroy(), this.newButtonSprite = new d.a(this.myScene, this.mid_x - this.w / 2, this.mid_y, o.a.spriteKey, "ui/button_new.psd"), this.newButtonSprite.scale = this.h / this.newButtonSprite.height, this.newButtonSprite.setOrigin(0, .5))
                    }
                }, {
                    key: "destroyMyUIButton",
                    value: function() {
                        null != this.myText && this.myText.destroy(), null != this.myIcon && this.myIcon.destroy(), this.backgroundNinePatch.destroy(), this.focusedNinePatch.destroy(), this.newButtonSprite && this.newButtonSprite.destroy(), y.a._unregisterSceneButton(this)
                    }
                }, {
                    key: "addToContainer",
                    value: function(e) {
                        e.add(this.backgroundNinePatch.ninePatch), e.add(this.focusedNinePatch.ninePatch), null != this.myText && e.add(this.myText), null != this.myIcon && e.add(this.myIcon), this.newButtonSprite && e.add(this.newButtonSprite)
                    }
                }]), e
            }());
        t.a = _
    },
    22: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(17),
            r = a.n(o),
            h = a(0),
            p = a(1),
            d = (a(2), a(73), a(50)),
            y = function() {
                function e(t) {
                    s()(this, e), this.tStep = e.TIMESTEP, this.tStepMS = 500 * e.TIMESTEP, this.debugOn = !1, this.bodies = {}, this._simulationBodies = [], this.uidCount = 0, this.gameScene = t, this._pastFrameTime = 0, this._processedTime = 0, this._accumulatedTime = 0, this._waitingLayerChange = {}, this._timeScale = 1, this._tempSimulationCollisionResult = null, this._tickNumber = 0
                }
                return l()(e, [{
                    key: "myInit",
                    value: function(t) {
                        for (var a in e.LAYER) e.LAYER[a] != e.LAYER.SIMULATION && (this.bodies[e.LAYER[a]] = []);
                        return this.debugOn = t, this
                    }
                }, {
                    key: "addBody",
                    value: function(t) {
                        null !== this.bodies && void 0 !== this.bodies || console.error("PhyEngine.addBody(). Engine probably not created."), -1 !== t.uid && console.error("PhyBody already has UID set. uid:" + t.uid), this.uidCount++, t.uid = this.uidCount, this.bodies.hasOwnProperty(t.myLayer) || t.myLayer == e.LAYER.SIMULATION || console.error("Layer not yet defined for PhyEngine" + t.myLayer), t.myLayer == e.LAYER.SIMULATION ? this._simulationBodies.push(t) : this.bodies[t.myLayer].push(t), this.debugOn && console.info("DEBUG Phy: Added new body w id:" + t.uid + ", layer:" + t.myLayer), t.myLayer === e.NONE && console.warn("Added pBody without set layer")
                    }
                }, {
                    key: "removeBody",
                    value: function(e) {
                        null !== this.bodies && void 0 !== this.bodies || console.error("PhyEngine.removeBody(). Engine probably not created.");
                        for (var t = 0; t < this.bodies[e.myLayer].length; t++)
                            if (this.bodies[e.myLayer][t].uid === e.uid) return this.bodies[e.myLayer].splice(t, 1), !0;
                        return console.error("Trying to remove pBody not inside engine.bodies. Layer: " + e.myLayer + ", uid: " + e.uid, this.bodies), !1
                    }
                }, {
                    key: "bodySwitchLayer",
                    value: function(e, t, a) {
                        a.collidesLayers = t, this._waitingLayerChange.hasOwnProperty(e) || (this._waitingLayerChange[e] = []), this._waitingLayerChange[e].push(a)
                    }
                }, {
                    key: "engineLoop",
                    value: function(e) {
                        if (this.gameScene.isGamePaused) this._pastFrameTime = e;
                        else {
                            if (this._pastFrameTime) {
                                var t = e - this._pastFrameTime;
                                for (t > h.a.phyStepMax && (t = h.a.phyStepMax), this._accumulatedTime += t; this._accumulatedTime >= this.tStepMS;) this._tickNumber++, this._integratePhy(this._processedTime, this.tStepMS, this.tStepMS * this._timeScale), this._processedTime += this.tStepMS, this._accumulatedTime -= this.tStepMS
                            }
                            if (this.debugOn) {
                                for (var a in this.bodies)
                                    for (var i in this.bodies[a]) {
                                        this.bodies[a][i]._debugDraw()
                                    }
                                for (var s in this._simulationBodies) this._simulationBodies[s]._debugDraw()
                            }
                            this._switchAllLayers(), this._pastFrameTime = e
                        }
                    }
                }, {
                    key: "_integratePhy",
                    value: function(e, t, a) {
                        var i = t * this.tStep,
                            s = a * this.tStep,
                            n = i,
                            l = i;
                        for (var o in this.bodies) e: for (var r in this.bodies[o]) {
                            var h = this.bodies[o][r];
                            if (h.pbActive && !h.isStatic) {
                                h.ignoreTimeScale ? (n = i, l = i) : (n = s, l = s);
                                var p = h.vel.y + l * h.acc.y;
                                h.useGravity && (p += n), h.tickInfo.vy = p * l, h.pos.y += h.tickInfo.vy, h.vel.y = p;
                                var d = h.vel.x + l * h.acc.x;
                                for (var y in h.tickInfo.vx = d * l, h.pos.x += h.tickInfo.vx, h.vel.x = d, h.myFixedPreUpdate(e, t / 1e3, a / 1e3), h.collidesLayers) {
                                    var _ = h.collidesLayers[y];
                                    if (_ !== h.myLayer)
                                        for (var c in this.bodies[_]) {
                                            var m = this.bodies[_][c];
                                            if (m.uid !== h.uid && 0 != m.pbActive) {
                                                if (0 == h.pbActive) continue e;
                                                !0 === h.collision.doColl[h.bodyType][m.bodyType](h, m, l, h) && (p = h.vel.y + l * h.acc.y, h.useGravity && (p += n), h.tickInfo.vy = p * l, d = h.vel.x + l * h.acc.x, h.tickInfo.vx = d * l)
                                            }
                                        }
                                }
                                h.myFixedPostUpdate(e, t / 1e3, a / 1e3)
                            }
                        }
                    }
                }, {
                    key: "_switchAllLayers",
                    value: function() {
                        e: for (var e in this._waitingLayerChange) {
                            for (var t = this._waitingLayerChange[e], a = 0; a < t.length; a++) {
                                var i = t[a];
                                if (i.myLayer != e)
                                    for (var s = 0; s < this.bodies[i.myLayer].length; s++)
                                        if (this.bodies[i.myLayer][s] == i) {
                                            this.bodies[i.myLayer].splice(s, 1), i.myLayer = e, this.bodies[i.myLayer].push(i);
                                            break e
                                        }
                            }
                            delete this._waitingLayerChange[e]
                        }
                    }
                }, {
                    key: "simulateCollisions",
                    value: function(e, t, a, i) {
                        for (var s in e.pos.x = t, e.pos.y = a, e.bodyType == d.a.CIRCLE && (e.tickInfo.vx = e.vel.x / Math.abs(e.vel.x) * .01, e.tickInfo.vy = e.vel.y / Math.abs(e.vel.y) * .01), e._pBodyResize(e.size), this.debugOn && e._debugDraw(), e.collideEdge = this.__testCollisionEdgeFunc, this._tempSimulationCollisionResult = {
                                isSquished: !1,
                                collisions: []
                            }, i) {
                            var n = i[s];
                            if (n !== e.myLayer)
                                for (var l in this.bodies[n]) {
                                    var o = this.bodies[n][l];
                                    o.uid !== e.uid && (0 != o.pbActive && e.collision.doColl[e.bodyType][o.bodyType](e, o, 0, e))
                                }
                        }
                        var r = !1,
                            h = !1,
                            y = !1,
                            _ = !1,
                            c = !1;
                        return this._tempSimulationCollisionResult.collisions.forEach((function(e) {
                            (e.pBody.goType == p.a.GO_TYPE.WALL && e.pBody.wallType == p.a.WALL.WALL_TYPE.MOVING || e.pBody.wallType == p.a.WALL.WALL_TYPE.CAVEIN_BS3) && (c = !0)
                        })), c && this._tempSimulationCollisionResult.collisions.forEach((function(e) {
                            e.edge == p.a.PHY.COL_EDGE.LEFT ? r = !0 : e.edge == p.a.PHY.COL_EDGE.RIGHT ? h = !0 : e.edge == p.a.PHY.COL_EDGE.TOP ? y = !0 : e.edge == p.a.PHY.COL_EDGE.BOTTOM && (_ = !0)
                        })), (r && h || y && _) && (this._tempSimulationCollisionResult.isSquished = !0), this._tempSimulationCollisionResult
                    }
                }, {
                    key: "__testCollisionEdgeFunc",
                    value: function(e, t, a, i, s, n, l, o) {
                        return l.pEngine._tempSimulationCollisionResult.collisions.push({
                            edge: e,
                            pBody: o
                        }), !0
                    }
                }]), e
            }();
        r()(y, "TIMESTEP", .01), y.LAYER = {
            NONE: "none",
            BALL: "ball",
            PLAYER: "player",
            WALL: "wall",
            ITEM: "item",
            SHOT: "shot",
            WALLBALL: "wallball",
            LADDER: "ladder",
            TELEPORT: "teleport",
            FRAGMENTS: "fragments",
            SIMULATION: "simulation"
        }, y.LAYERS_BALL = [y.LAYER.WALL, y.LAYER.WALLBALL], y.LAYERS_SHOT = [y.LAYER.BALL, y.LAYER.WALL, y.LAYER.WALLBALL], y.LAYERS_PLAYER = [y.LAYER.BALL, y.LAYER.WALL, y.LAYER.LADDER, y.LAYER.TELEPORT], y.LAYERS_ITEM = [y.LAYER.PLAYER, y.LAYER.WALL, y.LAYER.WALLBALL], y.LAYERS_WALL = [], y.LAYERS_FRAGMENTS = [y.LAYER.WALL, y.LAYER.WALLBALL], y.LAYERS_NONE = [], t.a = y
    },
    23: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(0),
            r = a(3),
            h = function() {
                function e(t, a, i, n, l, r, h) {
                    s()(this, e), this.ninePatch = t.add.ninePatch(a, i, n, l, o.a.spriteKey, r, {
                        top: h.top * o.a.spriteScale,
                        bottom: h.bottom * o.a.spriteScale,
                        left: h.left * o.a.spriteScale,
                        right: h.right * o.a.spriteScale
                    })
                }
                return l()(e, [{
                    key: "setVisibleNinePatch",
                    value: function(e) {
                        this.ninePatch.visible = e
                    }
                }, {
                    key: "setDepthNinePatch",
                    value: function(e) {
                        r.a.mySpriteDepth(e, this.ninePatch)
                    }
                }, {
                    key: "destroy",
                    value: function() {
                        this.ninePatch.destroy()
                    }
                }, {
                    key: "animate",
                    value: function(e) {}
                }]), e
            }();
        t.a = h
    },
    24: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return m
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(17),
            r = a.n(o),
            h = a(0),
            p = a(9),
            d = a(2),
            y = a(29),
            _ = a(4),
            c = a(12),
            m = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "init",
                    value: function(t) {
                        d.a.resetExperience ? (_.a.gameSettings.tasksCollected = [], _.a.gameSettings.tasksCompleted = [], _.a.gameSettings.tasksStats = {}) : d.a.log("NyXpProgress.init with", _.a.gameSettings.tasksCollected, "experience"), h.a.isBS2 ? e.RANK_NAMES = e._RANK_NAMES_BS2 : h.a.isBS3 && (e.RANK_NAMES = e._RANK_NAMES_BS3)
                    }
                }, {
                    key: "renderBadge",
                    value: function(t, a, i, s, n) {
                        var l = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null;
                        d.a.log("BADGE", "Rendering..", s, ", crnt lvl:", e.CurrentLevel, ", crnt badge:", e.CurrentBadge);
                        var o = h.a.isBS2 || h.a.isBS3,
                            r = {};
                        r.badgeLevel = s;
                        var y = 1;
                        if (s != e.CurrentLevel || n || (y = 1.35), null != l && (y = l), r.badgeScale = y, s == e.CurrentLevel && e.IsFullXp) {
                            r.badgeAura = [];
                            var m = new p.a(t, a, i, h.a.lazySpriteKey, "retention/back_lvl" + s + "_aura_particle2.png");
                            m.scale = y, t.add.tween({
                                targets: m,
                                angle: 46,
                                duration: 1045,
                                alpha: {
                                    to: .4,
                                    from: 1
                                },
                                scale: {
                                    from: y,
                                    to: 1.25 * y
                                },
                                yoyo: !0,
                                loop: -1,
                                ease: Phaser.Math.Easing.Circular.InOut
                            });
                            var u = new p.a(t, a, i, h.a.lazySpriteKey, "retention/back_lvl" + s + "_aura_particle1.png");
                            u.scale = y, t.add.tween({
                                targets: u,
                                alpha: {
                                    to: .6,
                                    from: 1
                                },
                                scale: {
                                    from: .8 * y,
                                    to: 1.1 * y
                                },
                                duration: 100,
                                yoyo: !0,
                                loop: -1,
                                ease: Phaser.Math.Easing.Expo.InOut
                            }), t.add.tween({
                                targets: u,
                                angle: {
                                    from: 0,
                                    to: 360
                                },
                                duration: 3845,
                                loop: -1,
                                delay: 250
                            });
                            var g = new p.a(t, a, i, h.a.lazySpriteKey, "retention/back_lvl" + s + "_aura_particle1.png");
                            g.scale = y, t.add.tween({
                                targets: g,
                                alpha: {
                                    to: .7,
                                    from: .9
                                },
                                scale: {
                                    from: .9 * y,
                                    to: 1.1 * y
                                },
                                duration: 300,
                                yoyo: !0,
                                loop: -1,
                                ease: Phaser.Math.Easing.Back.InOut
                            }), t.add.tween({
                                targets: g,
                                angle: {
                                    from: 180,
                                    to: -180
                                },
                                duration: 5245,
                                loop: -1,
                                delay: 550
                            });
                            var v = new p.a(t, a, i, h.a.lazySpriteKey, "retention/back_lvl" + s + "_aura_back.png"),
                                f = y;
                            h.a.isBT && (f = 1.1 * y), v.scale = f, t.add.tween({
                                targets: v,
                                alpha: {
                                    to: .5,
                                    from: 1
                                },
                                duration: 250,
                                yoyo: !0,
                                loop: -1
                            }), r.badgeAura.push(v, m, u, g)
                        }
                        var S = new p.a(t, a, i, h.a.lazySpriteKey, "retention/back_lvl" + s + ".png");
                        if (S.scale = y, r.badgeBack = S, s == e.CurrentLevel) {
                            var E = new p.a(t, a, i, e.PROFILE_PIC.spriteKey, e.PROFILE_PIC.image);
                            E.scale *= y;
                            var x = 100,
                                T = t.make.graphics({
                                    x: a,
                                    y: i
                                });
                            T.scale = y, T.fillCircle(0, 0, x / 2 - 4);
                            var b = T.createGeometryMask();
                            E.setMask(b), r.profilePic = E
                        }
                        var k = "retention/back_lvl" + s + "_over.png",
                            w = S.texture.getFrameNames().includes(k),
                            I = null;
                        w && ((I = new p.a(t, a, i, h.a.lazySpriteKey, k)).y += S.displayHeight / 2, I.scale = y, r.badgeStars = I);
                        var P = 100 * y,
                            A = 25 * y,
                            L = i - S.displayHeight / 2,
                            M = 3 * y;
                        o && (M = 0);
                        var O = [14037563, 14037563, 14037563, 14037563, 14037563, 14037563, 14037563];
                        h.a.isBS2 && (O = [7934216, 3479296, 3421236, 4013056, 14392, 8504, 3082297]), h.a.isBS3 && (O = [591492, 591492, 591492, 591492, 591492, 591492, 591492]);
                        var D = 14037563;
                        h.a.isBS2 && (D = 16706824), h.a.isBS3 && (D = 10531019);
                        var B = t.add.graphics({
                            x: a - P / 2,
                            y: L - A / 2
                        });
                        B.fillStyle(O[s], 1), B.lineStyle(4, D, .35), B.fillRect(0, 0, P, A), B.strokeRect(0, 0, P, A);
                        var R = t.add.bitmapText(a, i, h.a.fontNames.MENU, e.RANK_NAMES[s], 24 * y);
                        if (R.setOrigin(.5, .5), R.y = L + M, r.badgeNameBack = B, r.badgeNameTxt = R, s == e.CurrentLevel && !e.IsFullXp) {
                            var W = 2,
                                N = 100 * y,
                                C = 20 * y,
                                U = i + S.displayHeight / 2,
                                Y = 14037563;
                            h.a.isBS2 && (Y = 14488070), h.a.isBS3 && (Y = 7937188);
                            var K = t.add.graphics();
                            K.fillStyle(Y, 1), K.lineStyle(2, 15959087, 1), K.fillRect(a - N / 2 - W, U - C / 2 - W, N + 2 * W, C + 2 * W);
                            var G = t.add.graphics(),
                                H = 0,
                                z = t.add.bitmapText(a, i, h.a.lazyFontNames.RETENTION_XP, "", 18);
                            z.setOrigin(.5, .5), z.y = U + H;
                            var V = 0;
                            if (s >= 1 && (V = c.a.LEVEL_POINTS[s - 1]), G.updateXp = function(e) {
                                    var t = (e - V) / (c.a.LEVEL_POINTS[s] - V);
                                    G.fillStyle(14475273, 1), G.fillRect(a - N / 2, U - C / 2, N * t, C), z.text = e - V + "/" + (c.a.LEVEL_POINTS[s] - V)
                                }, G.updateXp(c.a.Experience), n) z.visible = !1, c.a.Experience - V == 0 ? K.visible = !1 : I && (I.visible = !1);
                            else {
                                var F = t.add.container(a, U);
                                K.x -= a, K.y -= U, z.x -= a, z.y -= U, G.x -= a, G.y -= U, F.add([K, G, z]), r.progressContainer = F, I && (I.visible = !1)
                            }
                            r.progressBack = K, r.progressBar = G, r.progressTxt = z
                        }
                        if (s == e.CurrentLevel) e.CurrentBadge = r, t.sys.events.once("shutdown", (function() {
                            e.CurrentBadge = null
                        }));
                        else if (h.a.isBS2 || h.a.isBS3) {
                            S.visible = !1;
                            var X = B.y;
                            B.y = i - 35 * y;
                            var j = X - B.y;
                            R.y -= j, I && (I.y = i + 10 * y)
                        }
                        if (n) {
                            if (c.a.Experience - V == 0) {
                                var q = t.add.tween({
                                    targets: [S, T],
                                    scale: 1.05 * y,
                                    duration: 330,
                                    loop: -1,
                                    yoyo: !0
                                });
                                q.timeScale = 1.5
                            }
                            S.setInteractive({
                                useHandCursor: !0
                            }).on("pointerup", (function() {
                                e.clickedBadge(t)
                            })), I && (I.visible = !1)
                        }
                        r.getBadgeDisplayElements = function(e) {
                            var t = [];
                            return r.arrow && t.push(r.arrow), r.badgeAura && r.badgeAura.forEach((function(e) {
                                t.push(e)
                            })), r.badgeStars && t.push(r.badgeStars), S && t.push(S), B && t.push(B), R && t.push(R), E && t.push(E), e && T && t.push(T), K && t.push(K), G && t.push(G), z && t.push(z), t
                        }, r.destroyBadge = function() {
                            for (var e = r.getBadgeDisplayElements(!0), t = e.length - 1; t >= 0; t--) e[t].destroy()
                        }, r.moveBadgeBy = function(e, t) {
                            r.getBadgeDisplayElements(!0).forEach((function(a) {
                                a.x += e, a.y += t
                            }))
                        };
                        var J = _.a.gameSettings.tasksCompleted.length - _.a.gameSettings.tasksCollected.length;
                        if (J > 0 && n) {
                            var Z = 13904693,
                                Q = 14475529,
                                $ = 4,
                                ee = 15,
                                te = -50 * y;
                            o && (te = -50 * y);
                            var ae = -25,
                                ie = 15,
                                se = -2,
                                ne = 1,
                                le = t.add.graphics();
                            le.fillStyle(Z, 1), le.lineStyle($, Q, 1), le.fillCircle(0, 0, ee), le.strokeCircle(0, 0, ee);
                            var oe = t.add.bitmapText(se, ne, h.a.lazyFontNames.RETENTION_XP, J, ie);
                            oe.setOrigin(.5, .5);
                            var re = t.add.container(S.x + te, S.y + ae);
                            re.add([le, oe]), t.add.tween({
                                targets: re,
                                scale: 1.21,
                                duration: 230,
                                loop: -1,
                                yoyo: !0
                            })
                        }
                        return r
                    }
                }, {
                    key: "updateCrntBadgeProgress",
                    value: function(t) {
                        null != e.CurrentBadge && e.CurrentBadge.progressBar.updateXp(t)
                    }
                }, {
                    key: "clickedBadge",
                    value: function(e) {
                        y.a.LogClick(y.a.CLICK_TYPE.TASKS), e.myTransition.transitionToggle(!1, "MyTasksScene")
                    }
                }, {
                    key: "CurrentLevel",
                    get: function() {
                        for (var e = c.a.Experience, t = c.a.LEVEL_POINTS.length - 2; t >= 0; t--)
                            if (e >= c.a.LEVEL_POINTS[t]) return t + 1;
                        return 0
                    }
                }, {
                    key: "IsFullXp",
                    get: function() {
                        return e.CurrentLevel == c.a._TASKS.length - 1 && c.a.Experience == c.a.LEVEL_POINTS[e.CurrentLevel] ? (d.a.log("Tasks completed. You are very cool! Would you like more tasks? Vote on our Discord"), !0) : (d.a.log("Not full xp.", e.CurrentLevel, "!=", c.a._TASKS.length - 1, "&&", c.a.Experience, "!=", c.a.LEVEL_POINTS[e.CurrentLevel]), !1)
                    }
                }, {
                    key: "PROFILE_PIC",
                    get: function() {
                        return h.a.isBS2 || h.a.isBS3 ? {
                            image: "retention/profile_pic.png",
                            spriteKey: h.a.lazySpriteKey
                        } : {
                            image: "profile_pic.png",
                            spriteKey: _.a.gameSettings.selectedSkinID
                        }
                    }
                }]), e
            }();
        r()(m, "RANK_NAMES", ["NEWBIE", "BRONZE", "SILVER", "GOLD", "DIAMOND", "LEGEND", "MASTER"]), r()(m, "_RANK_NAMES_BS2", ["FRESH", "BRONZE", "SILVER", "GOLD", "DIAMOND", "LEGEND", "MASTER"]), r()(m, "_RANK_NAMES_BS3", ["NEW PLAYER", "BRONZE", "SILVER", "GOLD", "DIAMOND", "EPIC", "MASTER"]), r()(m, "CurrentBadge", null)
    },
    242: function(e, t, a) {
        "use strict";

        function i() {}
        i.isHost = function(e) {
            return -1 != (window.location != window.parent.location ? document.referrer : document.location.href).indexOf(e)
        }, i.HOSTS = {
            REBUBBLED: "rebubbled",
            MINICLIP: "miniclip"
        }
    },
    243: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return v
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(30),
            c = a(23),
            m = (a(102), a(248), a(1)),
            u = a(0),
            g = a(173),
            v = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = r()(this, p()(t).call(this, e, a))).wallType = m.a.WALL.WALL_TYPE.BREAKABLE, i._itemDrop = a.itemDrop || null, i
                }
                return y()(t, e), l()(t, [{
                    key: "drawWall",
                    value: function() {
                        if (u.a.isBS2) {
                            this.mySprite = new c.a(this.gameScene, this.pos.x, this.pos.y, this.size.x, this.size.y, "walls/breakable.png", {
                                top: 6,
                                bottom: 6,
                                left: 6,
                                right: 6
                            }), this.mySprite.setDepthNinePatch(this.myRenderDepth)
                        } else u.a.isBS3 && (this.mySprite = this.gameScene.add.tileSprite(this.pos.x - this.sizeHalf.x, this.pos.y - this.sizeHalf.y, this.size.x, this.size.y, u.a.spriteKey, "walls/breakable.png"), this.mySprite.setDisplayOrigin(0, 0), this.makeDepthAndScale(this.mySprite));
                        this.showInvisibleWall(!1)
                    }
                }, {
                    key: "breakableGotShot",
                    value: function(e) {
                        if (this.pbActive = !1, null != this._itemDrop && this.gameScene.itemManager.SpawnItem_BS2(this._itemDrop, this.pos.x, this.pos.y, m.a.ITEM_SPAWN_REASON.WALL), u.a.isBS2) {
                            var t = this;
                            this.gameScene.tweens.add({
                                targets: this.mySprite.ninePatch,
                                alpha: 0,
                                duration: 150,
                                onComplete: function() {
                                    t.myOnDestroy()
                                }
                            })
                        } else if (u.a.isBS3) {
                            this.mySprite.visible = !1;
                            g.a.GetFragments(this)
                        }
                    }
                }]), t
            }(_.a)
    },
    244: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(19),
            p = a.n(h),
            d = a(7),
            y = a.n(d),
            _ = a(11),
            c = a.n(_),
            m = a(30),
            u = (a(15), a(134)),
            g = a(23),
            v = a(1),
            f = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (a = JSON.parse(JSON.stringify(a))).thisIsRightCavein ? (a.x = a.cavein_originalx + a.cavein_originalw / 2 - 5, a.w = 10) : (a.cavein_originalx = a.x, a.cavein_originalw = a.w, a.x = a.x - a.w / 2 + 5, a.w = 10), (i = r()(this, y()(t).call(this, e, a))).wallType = v.a.WALL.WALL_TYPE.CAVEIN_BS3, i._doSlide = !0, i._slideSpeedX = 10, i._slideEndX = a.cavein_originalx - 5 - a.cavein_space / 2, i._frozen = !1, i._rightCavein = a.thisIsRightCavein || !1, i._rightCavein && (i._slideSpeedX = -i._slideSpeedX, i._slideEndX = a.cavein_originalx + 5 + a.cavein_space / 2), i
                }
                return c()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        if (p()(y()(t.prototype), "myInit", this).call(this), this.isStatic = !1, !this._rightCavein) {
                            var e = JSON.parse(JSON.stringify(this._wallInfo));
                            e.thisIsRightCavein = !0, u.a.spawnWall(this.gameScene, e)
                        }
                        return this
                    }
                }, {
                    key: "drawWall",
                    value: function() {
                        this.mySprite = new g.a(this.gameScene, this.pos.x, this.pos.y, this.size.x, this.size.y, "walls/cavein_bs3.png", {
                            top: 0,
                            bottom: 0,
                            left: 0,
                            right: 0
                        }), this.mySprite.setDepthNinePatch(this.myRenderDepth), this.showInvisibleWall(!1)
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, a, i) {
                        if (this._doSlide && !this._frozen) {
                            this.pos.x += this._slideSpeedX * a;
                            var s = !1;
                            this._rightCavein ? this.pos.x < this._slideEndX && (s = !0) : this.pos.x > this._slideEndX && (s = !0), s && (this.pos.x = this._slideEndX, this._doSlide = !1, this.isStatic = !0)
                        }
                        p()(y()(t.prototype), "myFixedPostUpdate", this).call(this, e, a, i)
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        this.mySprite.ninePatch.x = this.pos.x, p()(y()(t.prototype), "myUpdate", this).call(this, e, a)
                    }
                }]), t
            }(m.a);
        t.a = f
    },
    245: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(19),
            p = a.n(h),
            d = a(7),
            y = a.n(d),
            _ = a(11),
            c = a.n(_),
            m = a(30),
            u = (a(15), a(23)),
            g = a(16),
            v = a(1),
            f = function(e) {
                function t(e, a) {
                    var i;
                    s()(this, t), (a = JSON.parse(JSON.stringify(a))).w = a.moving_width, a.h = 10;
                    var n = t.movingGetPosition(a, 0);
                    return a.x = a.moving_origin_x + n.x, a.y = a.moving_origin_y + n.y, (i = r()(this, y()(t).call(this, e, a))).wallType = v.a.WALL.WALL_TYPE.MOVING, i._currentMovingStep = 0, i._stepPositionCurrent = g.a.ZERO, i._stepPositionNext = g.a.ZERO, i._doSlide = !0, i._slideX = 0, i._slideY = 0, i._slideEndX = a.cavein_originalx - 5 - a.cavein_space / 2, i._frozen = !1, i
                }
                return c()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        return p()(y()(t.prototype), "myInit", this).call(this), this.isStatic = !1, this._stepPositionNext = t.movingGetPosition(this._wallInfo, 0), this._prepNextStep(), this
                    }
                }, {
                    key: "_prepNextStep",
                    value: function() {
                        this._stepPositionCurrent = new g.a(this._stepPositionNext.x, this._stepPositionNext.y), this._currentMovingStep++, this._stepPositionNext = t.movingGetPosition(this._wallInfo, this._currentMovingStep);
                        var e = 1,
                            a = 1;
                        if (this._wallInfo.moving_start_direct == t.DIRECTION.DIAG) {
                            var i = Math.abs(this._stepPositionNext.x - this._stepPositionCurrent.x),
                                s = Math.abs(this._stepPositionNext.y - this._stepPositionCurrent.y);
                            s < i ? (e = 1, a = s / i) : i < s && (e = i / s, a = 1)
                        }
                        this._stepPositionNext.x == this._stepPositionCurrent.x ? this._slideX = 0 : this._stepPositionNext.x < this._stepPositionCurrent.x ? this._slideX = -1 * this._wallInfo.moving_speed * e : this._stepPositionNext.x > this._stepPositionCurrent.x && (this._slideX = 1 * this._wallInfo.moving_speed * e), this._stepPositionNext.y == this._stepPositionCurrent.y ? this._slideY = 0 : this._stepPositionNext.y < this._stepPositionCurrent.y ? this._slideY = -1 * this._wallInfo.moving_speed * a : this._stepPositionNext.y > this._stepPositionCurrent.y && (this._slideY = 1 * this._wallInfo.moving_speed * a)
                    }
                }, {
                    key: "drawWall",
                    value: function() {
                        this.mySprite = new u.a(this.gameScene, this.pos.x, this.pos.y, this._wallInfo.moving_width, 10, "walls/basic.png", {
                            top: 7,
                            bottom: 7,
                            left: 7,
                            right: 7
                        }), this.mySprite.setDepthNinePatch(this.myRenderDepth), this.showInvisibleWall(!1)
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, a, i) {
                        if (this._doSlide && !this._frozen) {
                            this.pos.x += this._slideX * a, this.pos.y += this._slideY * a;
                            var s = !1;
                            (this._slideX > 0 && this.pos.x > this._wallInfo.moving_origin_x + this._stepPositionNext.x || this._slideX < 0 && this.pos.x < this._wallInfo.moving_origin_x + this._stepPositionNext.x) && (s = !0), (this._slideY > 0 && this.pos.y > this._wallInfo.moving_origin_y + this._stepPositionNext.y || this._slideY < 0 && this.pos.y < this._wallInfo.moving_origin_y + this._stepPositionNext.y) && (s = !0), s && (this.pos.x = this._wallInfo.moving_origin_x + this._stepPositionNext.x, this.pos.y = this._wallInfo.moving_origin_y + this._stepPositionNext.y, this._prepNextStep())
                        }
                        p()(y()(t.prototype), "myFixedPostUpdate", this).call(this, e, a, i)
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        this.mySprite.ninePatch.x = this.pos.x, this.mySprite.ninePatch.y = this.pos.y, this._spikeySprite && (this._spikeySprite.x = this.pos.x, this._spikeySprite.y = this.pos.y + this._wallInfo.h / 2), p()(y()(t.prototype), "myUpdate", this).call(this, e, a)
                    }
                }], [{
                    key: "movingGetPosition",
                    value: function(e, a) {
                        var i = t._movingGetPositionMarker(e, a),
                            s = -e.moving_origin_w / 2 + e.moving_width / 2,
                            n = -e.moving_origin_h / 2 + 5;
                        return "r" == i[1] && (s = e.moving_origin_w / 2 - e.moving_width / 2), "b" == i[0] && (n = e.moving_origin_h / 2 - 5), {
                            x: s,
                            y: n
                        }
                    }
                }, {
                    key: "_movingGetPositionMarker",
                    value: function(e, a) {
                        var i = [t.POSITION.TOP_LEFT, t.POSITION.TOP_RIGHT, t.POSITION.BOT_RIGHT, t.POSITION.BOT_LEFT],
                            s = [t.POSITION.TOP_LEFT, t.POSITION.BOT_LEFT, t.POSITION.BOT_RIGHT, t.POSITION.TOP_RIGHT];
                        return e.moving_start_direct == t.DIRECTION.CW ? (a += i.indexOf(e.moving_start_pos), i[a % 4]) : e.moving_start_direct == t.DIRECTION.CCW ? (a += s.indexOf(e.moving_start_pos), s[a % 4]) : e.moving_start_direct == t.DIRECTION.DIAG ? a % 2 == 0 ? e.moving_start_pos : {
                            tl: "br",
                            tr: "bl",
                            br: "tl",
                            bl: "tr"
                        } [e.moving_start_pos] : (console.error("Unknown starting direction:", e.moving_start_direct), null)
                    }
                }]), t
            }(m.a);
        f.DIRECTION = {
            CW: "cw",
            CCW: "ccw",
            DIAG: "diag"
        }, f.POSITION = {
            TOP_LEFT: "tl",
            TOP_RIGHT: "tr",
            BOT_LEFT: "bl",
            BOT_RIGHT: "br"
        }, t.a = f
    },
    246: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(19),
            p = a.n(h),
            d = a(7),
            y = a.n(d),
            _ = a(11),
            c = a.n(_),
            m = a(17),
            u = a.n(m),
            g = a(0),
            v = a(3),
            f = a(9),
            S = a(49),
            E = a(22),
            x = a(16),
            T = a(42),
            b = a(2),
            k = a(1),
            w = function(e) {
                function t(e, a) {
                    var i;
                    s()(this, t);
                    var n = new x.a(a.x, a.y),
                        l = new x.a(a.w, a.h),
                        o = new x.a(n.x - l.x / 2, n.y - l.y / 2 - t.OP),
                        h = new x.a(n.x + l.x / 2, n.y + l.y / 2);
                    return (i = r()(this, y()(t).call(this, e, E.a.LAYER.LADDER, E.a.LAYERS_NONE, o, h, {
                        isStatic: !0
                    }))).canUseLadder = [0, a.ladderP1, a.ladderP2], null == i.canUseLadder[1] && (i.canUseLadder[1] = !0), null == i.canUseLadder[2] && (i.canUseLadder[2] = !0), i._ladderSprites = [], i._ladder_sensitive_climb = 10, i._ladderTopY = i._p1.y, i._ladderBotY = i._p2.y - g.a.playerCollH / 2, i.slideTo = [null, null, null], i.climbingTweens = [], i._wallInfo = a, i
                }
                return c()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        this.goType = k.a.GO_TYPE.LADDER, this.myRenderDepth = v.a.RENDER_DEPTH.LADDER;
                        var e = "walls/ladder_top",
                            a = "walls/ladder_bot",
                            i = "walls/ladder_mid";
                        1 == this.canUseLadder[1] && 0 == this.canUseLadder[2] && (e += "_p1", a += "_p1", i += "_p1"), 0 == this.canUseLadder[1] && 1 == this.canUseLadder[2] && (e += "_p2", a += "_p2", i += "_p2"), e += ".png", a += ".png", i += ".png";
                        var s = new f.a(this.gameScene, this.pos.x, this._p1.y + 5, g.a.spriteKey, e, 1, this.myRenderDepth),
                            n = new f.a(this.gameScene, this.pos.x, this._p2.y - 5, g.a.spriteKey, a, 1, this.myRenderDepth);
                        this._stateSprites.push(s, n);
                        for (var l = null, o = s.y + 10 + t.OP; o < n.y; o += 10) l = new f.a(this.gameScene, this.pos.x, o, g.a.spriteKey, i, 1, this.myRenderDepth), this._stateSprites.push(l);
                        return s.y += t.OP, this
                    }
                }, {
                    key: "touchingLadder",
                    value: function(e) {
                        if (this.canUseLadder[e.playerId] && null == this.climbingTweens[e.playerId]) {
                            if (null == e.usingLadder && Math.abs(e.pos.x - this.pos.x) < 10)
                                if (e.myInput.up()) e.pos.y <= this._p2.y - e.sizeHalf.y && e.pos.y > this._p1.y && this._attachPlayer(e);
                                else if (e.myInput.down())
                                if (e.pos.y < this._p2.y - e.sizeHalf.y && e.pos.y > this._p1.y) this._attachPlayer(e);
                                else if (Math.abs(e.pos.y + e.sizeHalf.y - (this._p1.y + t.OP)) < .1) return void this._climbOffTop(e);
                            if (e.usingLadder == this) {
                                if (e.myInput.up()) e.vel.y = -e.ladderSpeed, this.slideTo[e.playerId] = null;
                                else if (e.myInput.down()) e.vel.y = e.ladderSpeed, this.slideTo[e.playerId] = null;
                                else if ((e.myInput.left() || e.myInput.right()) && null == this.slideTo[e.playerId])
                                    if (e.pos.y + 1 < this._ladderBotY) {
                                        this.slideTo[e.playerId] = null;
                                        for (var a = !1, i = e.pos.y + 1; i < this._ladderBotY; i++) {
                                            if (0 != (s = this.gameScene.phyEngine.simulateCollisions(e._testPBodyLadder, e.pos.x, i, [E.a.LAYER.WALL])).collisions.length || a || (a = !0), 0 != s.collisions.length && a) {
                                                this.slideTo[e.playerId] = i - 1;
                                                break
                                            }
                                        }
                                        a && null == this.slideTo[e.playerId] && (this.slideTo[e.playerId] = this._ladderBotY - 1)
                                    } else this._releasePlayer(e);
                                else e.vel.y = 0;
                                var s;
                                if (null != this.slideTo[e.playerId])
                                    if (e.vel.y = e.ladderSlideSpeed, e.pos.y >= this.slideTo[e.playerId]) return e.pos.y = this.slideTo[e.playerId], e.vel.y = 0, this.slideTo[e.playerId] = null, void((s = this.gameScene.phyEngine.simulateCollisions(e._testPBodyLadder, e.pos.x, Math.ceil(e.pos.y) + 1, [E.a.LAYER.WALL])).collisions.length > 0 && this._releasePlayer(e));
                                if (e.myInput.down() && e.pos.y + 1 > this._ladderBotY) return e.pos.y = this._ladderBotY, void this._releasePlayer(e);
                                if (e.myInput.up())
                                    if (e.pos.y <= this._ladderTopY)
                                        if (e.vel.y = 0, 0 == this.gameScene.phyEngine.simulateCollisions(e._testPBodyLadder, e.pos.x, this._ladderTopY - e.sizeHalf.y, [E.a.LAYER.WALL]).collisions.length)
                                            if ((s = this.gameScene.phyEngine.simulateCollisions(e._testPBodyLadder, e.pos.x, this._ladderTopY - e.sizeHalf.y + t.OP + 1, [E.a.LAYER.WALL])).collisions.length > 0 && Math.abs(s.collisions[0].pBody._p1.y - this._p1.y) < .1 + t.OP) return void this._climbOntoTop(e);
                                this._animatePlayer(e)
                            }
                        }
                    }
                }, {
                    key: "_attachPlayer",
                    value: function(e) {
                        e.pos.x = this.pos.x, e.vel.x = e.vel.y = 0, e.acc.y = 0, e.usingLadder = this, e.useGravity = !1
                    }
                }, {
                    key: "_releasePlayer",
                    value: function(e) {
                        e.usingLadder != this && b.a.error("Using not this ladder?!", this, e.usingLadder), e.usingLadder = null, e.useGravity = !0, e.vel.y = 0, this.slideTo[e.playerId] = null, e.playCharAnim(T.a.ANIMS.IDLE, !0)
                    }
                }, {
                    key: "_animatePlayer",
                    value: function(e) {
                        if (null != this.slideTo[e.playerId]) e.mySprite.anims.play("slide" + e._aniBS3FrameNameMod, !0);
                        else {
                            e.mySprite.anims.play("climb" + e._aniBS3FrameNameMod, !0);
                            var t = Math.floor((e.pos.y - (this._p1.y - this._ladder_sensitive_climb)) / 3 % e.mySprite.anims.getTotalFrames());
                            t = Math.abs(t), e.mySprite.anims.setCurrentFrame(e.mySprite.anims.currentAnim.frames[t])
                        }
                    }
                }, {
                    key: "_climbOntoTop",
                    value: function(e) {
                        e.mySprite.anims.play("climb_on" + e._aniBS3FrameNameMod, !0);
                        var a = this;
                        this.climbingTweens[e.playerId] = this.gameScene.tweens.add({
                            targets: e.pos,
                            y: this._p1.y - e.sizeHalf.y + t.OP,
                            duration: 400,
                            onComplete: function() {
                                delete a.climbingTweens[e.playerId], a._releasePlayer(e)
                            }
                        })
                    }
                }, {
                    key: "_climbOffTop",
                    value: function(e) {
                        e.mySprite.anims.playReverse("climb_on" + e._aniBS3FrameNameMod, !0), this._attachPlayer(e);
                        var t = this;
                        this.climbingTweens[e.playerId] = this.gameScene.tweens.add({
                            targets: e.pos,
                            y: this._p1.y,
                            duration: 400,
                            onComplete: function() {
                                delete t.climbingTweens[e.playerId]
                            }
                        })
                    }
                }, {
                    key: "myOnPause",
                    value: function(e) {
                        for (var a in p()(y()(t.prototype), "myOnPause", this).call(this, e), this.climbingTweens) e ? this.climbingTweens[a].pause() : this.climbingTweens[a].resume()
                    }
                }]), t
            }(S.a);
        u()(w, "OP", 1), t.a = w
    },
    247: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return m
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(17),
            r = a.n(o),
            h = a(0),
            p = a(18),
            d = a(3),
            y = a(21),
            _ = a(2),
            c = a(36),
            m = (a(14), function() {
                function e(t, a) {
                    s()(this, e), this.scene = t, this.callback = a, this.FRAME_RECT = new Phaser.Geom.Rectangle(20, 20, h.a.gameWidth - 40, h.a.gameHeight - 40), this.offsetX = 30, this.offsetY = 300, this._oldButtonGroup = c.a._activeScene, this._init()
                }
                return l()(e, [{
                    key: "_init",
                    value: function() {
                        this.bckBlack = this._disableWholeBackground(), this.bckColor = this._backgroundWindowColor();
                        var e = "Bubble Trouble";
                        h.a.isBS2 ? e = "Bubble Struggle 2" : h.a.isBS3 && (e = "Bubble Trouble 3");
                        var t = "You are leaving " + e + ". This is an external link.";
                        h.a.isBS3 && (t = t.toUpperCase()), this.infoMsg = this.scene.add.bitmapText(.5 * h.a.gameWidth, .45 * h.a.gameHeight, h.a.fontNames.MENU, t, 25), this.infoMsg.x -= this.infoMsg.width / 2, this.infoMsg.y -= this.infoMsg.height / 2;
                        var a = 6;
                        (h.a.isBS2 || h.a.isBS3) && (a = 0), this.proceedBtn = new y.a(this.scene, .5 * h.a.gameWidth, .55 * h.a.gameHeight, 140, 48, {
                            text: "PROCEED",
                            size: 36,
                            fixY: a
                        }, this._pressedButton.bind(this, !0), null, null, null, !0, "outsideLink"), this.cancelBtn = new y.a(this.scene, h.a.gameWidth - this.offsetX, h.a.gameHeight - this.offsetY, 40, 40, {
                            text: "X",
                            size: 24,
                            fixY: a
                        }, this._pressedButton.bind(this, !1), null, null, null, !1, "outsideLink"), d.a.mySpriteDepth(d.a.RENDER_DEPTH.GAME_POPUP, this.bckBlack), d.a.mySpriteDepth(d.a.RENDER_DEPTH.GAME_POPUP, this.bckColor), d.a.mySpriteDepth(d.a.RENDER_DEPTH.GAME_POPUP, this.infoMsg), this.proceedBtn.setDepthMyUIButton(d.a.RENDER_DEPTH.GAME_POPUP), this.cancelBtn.setDepthMyUIButton(d.a.RENDER_DEPTH.GAME_POPUP)
                    }
                }, {
                    key: "_disableWholeBackground",
                    value: function() {
                        var e = new Phaser.Geom.Rectangle(-1e3, -1e3, 3e3, 3e3),
                            t = this.scene.add.graphics();
                        return t.fillStyle(0, .85), t.fillRectShape(e), t.setInteractive({
                            hitArea: e,
                            hitAreaCallback: Phaser.Geom.Rectangle.Contains
                        }), t
                    }
                }, {
                    key: "_backgroundWindowColor",
                    value: function() {
                        var e = new Phaser.Geom.Rectangle(this.offsetX, this.offsetY, h.a.gameWidth - 2 * this.offsetX, h.a.gameHeight - 2 * this.offsetY),
                            t = this.scene.add.graphics();
                        return t.fillStyle(6513507, 1), t.fillRectShape(e), t
                    }
                }, {
                    key: "_pressedButton",
                    value: function(e) {
                        this.bckBlack.destroy(), this.bckColor.destroy(), this.infoMsg.destroy(), this.cancelBtn.destroyMyUIButton(), this.proceedBtn.destroyMyUIButton(), c.a._activeScene = this._oldButtonGroup, this.callback(e), e && p.a.isPoki && PokiSDK && !_.a.debugLog && PokiSDK.customEvent("game", "segment", {
                            segment: "discord-button-clicked"
                        })
                    }
                }]), e
            }());
        r()(m, "COL_WHITE", 16777215), r()(m, "COL_YELLOW", 14867459), r()(m, "COL_GREY", 9474192), r()(m, "COL_BLACK", 0), r()(m, "COL_RED", 16711680), r()(m, "COL_DARKEN", .4)
    },
    248: function(e, t, a) {
        "use strict";
        var i = a(79),
            s = a.n(i),
            n = a(5),
            l = a.n(n),
            o = a(6),
            r = a.n(o),
            h = (a(78), a(0)),
            p = a(25),
            d = a(10),
            y = a.n(d),
            _ = a(19),
            c = a.n(_),
            m = a(7),
            u = a.n(m),
            g = a(11),
            v = a.n(g),
            f = a(49),
            S = a(3),
            E = a(16),
            x = (a(73), a(22)),
            T = a(72),
            b = a(9),
            k = a(2),
            w = (a(30), a(8)),
            I = a(1),
            P = a(15),
            A = a(20),
            L = a(4),
            M = a(12),
            O = a(17),
            D = a.n(O),
            B = a(71),
            R = a(26),
            W = function(e) {
                function t() {
                    return l()(this, t), y()(this, u()(t).apply(this, arguments))
                }
                return v()(t, e), r()(t, [{
                    key: "myInit",
                    value: function() {
                        return this.modType = I.a.ITEM_MANAGER.MOD_TYPE.SLOW_TIME, this.MOD_TIME = 5, (h.a.isBS2 || h.a.isBS3) && (this.MOD_TIME = 10), this.modTime = this.MOD_TIME, k.a.log("ITM_SLOW", "slow initiated!"), this.gameScene.phyEngine._timeScale == C.SLOW_DOWNNN_SCALE || (this.gameScene.phyEngine._timeScale = t.SLOW_DOWN_SCALE), this._formatCountdownTime(this.modTime), this
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        c()(u()(t.prototype), "myUpdate", this).call(this, e, a), h.a.isBT || this._formatCountdownTime(this.modTime)
                    }
                }, {
                    key: "modAddExisting",
                    value: function() {
                        k.a.log("ITM_SLOW", "Addi ng more slow time.."), this.modTime += this.MOD_TIME, this._formatCountdownResetAlpha()
                    }
                }, {
                    key: "modExpired",
                    value: function() {
                        k.a.log("ITM_SLOW", "No more slow time!!"), this.gameScene.itemManager.allModifiers.hasOwnProperty(I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_SLOW) ? this.gameScene.phyEngine._timeScale = C.SLOW_DOWNNN_SCALE : this.gameScene.phyEngine._timeScale = 1
                    }
                }]), t
            }(B.a);
        D()(W, "SLOW_DOWN_SCALE", .5);
        var N = W,
            C = function(e) {
                function t() {
                    return l()(this, t), y()(this, u()(t).apply(this, arguments))
                }
                return v()(t, e), r()(t, [{
                    key: "myInit",
                    value: function(e) {
                        var t;
                        this.modType = e;
                        for (var a = 0; a <= R.a.ITEMS.length; a++)
                            if (R.a.ITEMS[a].modType == e) {
                                t = R.a.ITEMS[a];
                                break
                            } this.item = t, this.animationTween = null;
                        var i = R.a.getMaxLevelForItem(t),
                            s = t.upgradeVal[i];
                        return this.modTime = s, this.activateItem(), this._formatCountdownTime(this.modTime), null != this.infoTxt_desc && this.infoTxt_desc.destroy(), this._animateOutItemSprite(), P.a.playSound(this.gameScene, P.a.SND.RETENTION_UPGRD_ACTIVE), this
                    }
                }, {
                    key: "_animateOutItemSprite",
                    value: function() {
                        this.animationTween = this.gameScene.tweens.add({
                            targets: this.gameScene.upgradeItemSprite,
                            duration: 120,
                            alpha: 0,
                            yoyo: !0,
                            loop: -1
                        })
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        c()(u()(t.prototype), "myUpdate", this).call(this, e, a), h.a.isBT || this._formatCountdownTime(this.modTime)
                    }
                }, {
                    key: "activateItem",
                    value: function() {
                        M.a.TaskIncrement(this.gameScene, M.a.TASK_TYPE.USE_UPGRADE, 1, this.modType), this.modType == I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_SLOW ? this.gameScene.phyEngine._timeScale = t.SLOW_DOWNNN_SCALE : this.modType == I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_PHASE ? (this.gameScene.players[1] && (this.gameScene.players[1].mySprite.alpha = t.INVISIBLE_ALPHA), this.gameScene.players[2] && (this.gameScene.players[2].mySprite.alpha = t.INVISIBLE_ALPHA)) : this.modType == I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_LAST_BREATH ? this.gameScene.timebar._timebarTimeScale = t.FINAL_MOMENT_TIMESCALE : this.modType == I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_TANK ? (this.gameScene.players[1] && this.gameScene.players[1].playerShield.addShield(T.a.SHIELD_TYPES.TANK), this.gameScene.players[2] && this.gameScene.players[2].playerShield.addShield(T.a.SHIELD_TYPES.TANK), this.modTime = 0) : k.a.error("Unknown upgrade item picked up", modType)
                    }
                }, {
                    key: "modExpired",
                    value: function() {
                        k.a.log("upgradeitem", "Expired."), this.animationTween.stop(), this.gameScene.upgradeItemSprite.visible = !1, this.modType == I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_SLOW ? this.gameScene.itemManager.allModifiers.hasOwnProperty(I.a.ITEM_MANAGER.MOD_TYPE.SLOW_TIME) ? this.gameScene.phyEngine._timeScale = N.SLOW_DOWN_SCALE : this.gameScene.phyEngine._timeScale = 1 : this.modType == I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_PHASE ? (this.gameScene.players[1] && (this.gameScene.players[1].mySprite.alpha = 1), this.gameScene.players[2] && (this.gameScene.players[2].mySprite.alpha = 1)) : this.modType == I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_LAST_BREATH && (this.gameScene.timebar._timebarTimeScale = 1)
                    }
                }]), t
            }(B.a);
        D()(C, "SLOW_DOWNNN_SCALE", .35), D()(C, "INVISIBLE_ALPHA", .5), D()(C, "FINAL_MOMENT_TIMESCALE", .01);
        var U = function(e) {
                function t(e, a, i, s, n) {
                    var o;
                    l()(this, t), k.a.log("ITEM", "Getting item:" + s, a, i);
                    var r = t._getHalfSize(s),
                        p = new E.a(a - r.x, i - r.y),
                        d = new E.a(a + r.x, i + r.y);
                    return (o = y()(this, u()(t).call(this, e, x.a.LAYER.ITEM, x.a.LAYERS_ITEM, p, d, {
                        vel: new E.a(0, h.a.itemGrav)
                    }))).itemType = s, o.isPointsItem = !1, o._timeLeft = h.a.itemAlive, o._vanishSpeed = h.a.itemVanishSpeed, o._vanishTick = 0, o._landedWall = null, o._landedWallOld = null, o._spawnReason = n, o.myInit(), o
                }
                return v()(t, e), r()(t, [{
                    key: "myInit",
                    value: function() {
                        this.goType = I.a.GO_TYPE.ITEM, this.myRenderDepth = S.a.RENDER_DEPTH.GAME, this.mySprite = new b.a(this.gameScene, this.pos.x, this.pos.y, h.a.spriteKey, "items/" + this.itemType + ".png", 1, this.myRenderDepth), this.itemType != I.a.ITEM_TYPE.POINTS1 && this.itemType != I.a.ITEM_TYPE.POINTS2 && this.itemType != I.a.ITEM_TYPE.POINTS3 && this.itemType != I.a.ITEM_TYPE.POINTS4 && this.itemType != I.a.ITEM_TYPE.E_LIFE || (this.isPointsItem = !0), this._resetItemTime()
                    }
                }, {
                    key: "_resetItemTime",
                    value: function() {
                        this._timeLeft = h.a.itemAlive, this._timeLeft += R.a.getPassiveItemValue(I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_ITEMLIFE)
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, t) {
                        this.mySprite.x = this.pos.x, this.mySprite.y = this.pos.y, this.gameScene.isGamePaused || (null != this._landedWall && this._landedWall.wallType != I.a.WALL.WALL_TYPE.CONV_BELT ? (this._timeLeft -= t / 1e3, h.a.isBT ? this._timeLeft <= 0 && (this.mySprite.alpha -= t / 1e3 * this._vanishSpeed, this.mySprite.alpha <= .3 && this.myOnDestroy()) : this._timeLeft <= 0 ? this.myOnDestroy() : this._vanishTick < e && this._timeLeft <= this._vanishSpeed && (this._vanishTick = e + 100, 1 == this.mySprite.alpha ? this.mySprite.alpha = 0 : this.mySprite.alpha = 1)) : (this._resetItemTime(), this.mySprite.alpha = 1))
                    }
                }, {
                    key: "myFixedPreUpdate",
                    value: function(e, a, i) {
                        c()(u()(t.prototype), "myFixedPreUpdate", this).call(this, e, a, i), this._landedWall = null
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, a, i) {
                        c()(u()(t.prototype), "myFixedPostUpdate", this).call(this, e, a, i), this._landedWall != this._landedWallOld && (null == this._landedWall && (this.vel.y = h.a.itemGrav, this.vel.x = 0), this._landedWallOld = this._landedWall)
                    }
                }, {
                    key: "collideEdge",
                    value: function(e, t, a, i, s, n, l, o) {
                        if (o.goType == I.a.GO_TYPE.PLAYER) {
                            var r = o;
                            if (r.mySprite.alpha == C.INVISIBLE_ALPHA) return !0;
                            if (this._itemPickedUp(r), (h.a.isBS2 || h.a.isBS3) && w.a.currentMode == w.a.MODES.TWOP) {
                                var p = this.gameScene.players[2];
                                2 === r.playerId && (p = this.gameScene.players[1]);
                                var d = this.gameScene.phyEngine.simulateCollisions(p._testPBodyWall, p.pos.x, p.pos.y, [x.a.LAYER.ITEM]);
                                if (d.collisions.length > 0) {
                                    for (var y in d.collisions) d.collisions[y].pBody == this && this._itemPickedUp(p)
                                }
                            }
                            return this.myOnDestroy(), !0
                        }
                        o.goType == I.a.GO_TYPE.WALL && e == I.a.PHY.COL_EDGE.BOTTOM && (this._landedWall = o, o.wallType == I.a.WALL.WALL_TYPE.CONV_BELT ? this.vel.x = o.convBeltSpeed : this.vel.x = 0)
                    }
                }, {
                    key: "_itemPickedUp",
                    value: function(e) {
                        switch (M.a.TaskIncrement(this.gameScene, M.a.TASK_TYPE.COLLECT_ITEM, 1, this.itemType), M.a.TaskIncrement(this.gameScene, M.a.TASK_TYPE.COLLECT_ITEM_LVL, 1, w.a.currentLevel, this.itemType), this.itemType) {
                            case I.a.ITEM_TYPE.POINTS1:
                                var t = 100;
                                (h.a.isBS2 || h.a.isBS3) && (t = 500), this.gameScene.myGUI.addScore(t, e);
                                break;
                            case I.a.ITEM_TYPE.POINTS2:
                                t = 200;
                                (h.a.isBS2 || h.a.isBS3) && (t = 1e3), this.gameScene.myGUI.addScore(t, e);
                                break;
                            case I.a.ITEM_TYPE.POINTS3:
                                t = 300;
                                (h.a.isBS2 || h.a.isBS3) && (t = 1500), this.gameScene.myGUI.addScore(t, e);
                                break;
                            case I.a.ITEM_TYPE.POINTS4:
                                this.gameScene.myGUI.addScore(400, e);
                                break;
                            case I.a.ITEM_TYPE.W_SINGLE:
                                e.shotManager.switchWeapon(I.a.SHOT_TYPE.SINGLE);
                                break;
                            case I.a.ITEM_TYPE.W_HOOK:
                                e.shotManager.switchWeapon(I.a.SHOT_TYPE.HOOK);
                                break;
                            case I.a.ITEM_TYPE.W_MINE:
                                e.shotManager.switchWeapon(I.a.SHOT_TYPE.MINE);
                                break;
                            case I.a.ITEM_TYPE.W_LASER:
                                e.shotManager.switchWeapon(I.a.SHOT_TYPE.LASER);
                                break;
                            case I.a.ITEM_TYPE.E_LIFE:
                                P.a.playSound(this.gameScene, P.a.SND.ITEM_EXTRA_LIFE), this.gameScene.lives.addLife(e.playerId);
                                break;
                            case I.a.ITEM_TYPE.E_TIME:
                                P.a.playSound(this.gameScene, P.a.SND.ITEM_EXTRA_TIME);
                                var a = 10;
                                (h.a.isBS2 || h.a.isBS3) && (a = 6, w.a.isYouksPack() && (a = 10));
                                var i = R.a.getPassiveItemValue(I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_ETIME);
                                i > 0 && (a += i, M.a.TaskIncrement(this.gameScene, M.a.TASK_TYPE.USE_UPGRADE, 1, I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_ETIME)), this.gameScene.timebar.addTime(a);
                                break;
                            case I.a.ITEM_TYPE.S_PLAIN:
                                e.playerShield.addShield(T.a.SHIELD_TYPES.PLAIN);
                                break;
                            case I.a.ITEM_TYPE.S_TIME:
                                this.gameScene.itemManager.addMod(I.a.ITEM_MANAGER.MOD_TYPE.SLOW_TIME);
                                break;
                            case I.a.ITEM_TYPE.DYNAMITE:
                                this.gameScene.itemManager.addMod(I.a.ITEM_MANAGER.MOD_TYPE.DYNAMITE);
                                break;
                            case I.a.ITEM_TYPE.FREEZE:
                                this.gameScene.itemManager.addMod(I.a.ITEM_MANAGER.MOD_TYPE.FREEZE);
                                break;
                            case I.a.ITEM_TYPE.MEDAL:
                                this._spawnReason == I.a.ITEM_SPAWN_REASON.BALL && M.a.TaskIncrement(this.gameScene, M.a.TASK_TYPE.USE_UPGRADE, 1, I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_MEDAL), this.gameScene.itemManager.addMod(I.a.ITEM_MANAGER.MOD_TYPE.MEDAL);
                                break;
                            case I.a.ITEM_TYPE.S_INVI:
                                e.playerShield.addShield(T.a.SHIELD_TYPES.INVINCIBLE);
                                break;
                            case I.a.ITEM_TYPE.SPEED:
                                e.speedUpPlayer();
                                break;
                            case I.a.ITEM_TYPE.W_DOUBLE:
                                e.shotManager.switchWeapon(I.a.SHOT_TYPE.DOUBLE)
                        }
                        if (L.a.gameSettings.showPickedItemName && A.a.isLazyLoaded) {
                            var s = 1;
                            if (e.pos.x < h.a.gameWidth / 2 && (s = -1), e.vel.x < 0) s = -.5;
                            else if (e.vel.x > 0) s = .5;
                            var n = 1;
                            h.a.isBT && (n = 1.5);
                            var l = new b.a(this.gameScene, this.pos.x, this.pos.y, h.a.lazySpriteKey, "ui/itm_descr/" + this.itemType + ".png", n, S.a.RENDER_DEPTH.UNDER_GAME);
                            l.x -= l.width * s, l.alpha = .8, this.gameScene.add.tween({
                                targets: l,
                                duration: 450,
                                alpha: 0,
                                delay: 1100,
                                onComplete: function() {
                                    l.destroy()
                                }
                            })
                        }
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        this.gameScene.itemManager.removeItem(this), c()(u()(t.prototype), "myOnDestroy", this).call(this)
                    }
                }], [{
                    key: "_getHalfSize",
                    value: function(e) {
                        if (h.a.isBT) switch (e) {
                            case I.a.ITEM_TYPE.POINTS1:
                                return new E.a(10, 10);
                            case I.a.ITEM_TYPE.POINTS2:
                                return new E.a(13, 11.25);
                            case I.a.ITEM_TYPE.POINTS3:
                                return new E.a(12.25, 11);
                            case I.a.ITEM_TYPE.POINTS4:
                                return new E.a(13.25, 15.25);
                            case I.a.ITEM_TYPE.W_SINGLE:
                            case I.a.ITEM_TYPE.W_HOOK:
                            case I.a.ITEM_TYPE.W_MINE:
                                return new E.a(9, 14.75);
                            case I.a.ITEM_TYPE.W_LASER:
                                return new E.a(13.75, 10);
                            case I.a.ITEM_TYPE.E_LIFE:
                                return new E.a(9.5, 16.25);
                            case I.a.ITEM_TYPE.S_TIME:
                                return new E.a(13.75, 12.25);
                            case I.a.ITEM_TYPE.S_PLAIN:
                                return new E.a(10, 11);
                            case I.a.ITEM_TYPE.E_TIME:
                                return new E.a(11.25, 12.25)
                        } else if (h.a.isBS2) switch (e) {
                            case I.a.ITEM_TYPE.POINTS1:
                            case I.a.ITEM_TYPE.POINTS2:
                            case I.a.ITEM_TYPE.POINTS3:
                                return new E.a(11.5, 9);
                            case I.a.ITEM_TYPE.W_SINGLE:
                            case I.a.ITEM_TYPE.W_DOUBLE:
                            case I.a.ITEM_TYPE.W_HOOK:
                                return new E.a(8.25, 8.25);
                            case I.a.ITEM_TYPE.W_LASER:
                                return new E.a(9.75, 9.75);
                            case I.a.ITEM_TYPE.E_LIFE:
                            case I.a.ITEM_TYPE.S_TIME:
                            case I.a.ITEM_TYPE.S_PLAIN:
                            case I.a.ITEM_TYPE.E_TIME:
                            case I.a.ITEM_TYPE.DYNAMITE:
                            case I.a.ITEM_TYPE.FREEZE:
                            case I.a.ITEM_TYPE.MEDAL:
                            case I.a.ITEM_TYPE.S_INVI:
                            case I.a.ITEM_TYPE.SPEED:
                                return new E.a(10.75, 10.75)
                        } else if (h.a.isBS3) switch (e) {
                            case I.a.ITEM_TYPE.POINTS1:
                            case I.a.ITEM_TYPE.POINTS2:
                            case I.a.ITEM_TYPE.POINTS3:
                                return new E.a(4.5, 9);
                            case I.a.ITEM_TYPE.W_SINGLE:
                            case I.a.ITEM_TYPE.W_DOUBLE:
                            case I.a.ITEM_TYPE.W_HOOK:
                                return new E.a(4.5, 8.25);
                            case I.a.ITEM_TYPE.W_LASER:
                                return new E.a(4.5, 9.75);
                            case I.a.ITEM_TYPE.E_LIFE:
                            case I.a.ITEM_TYPE.S_TIME:
                            case I.a.ITEM_TYPE.S_PLAIN:
                            case I.a.ITEM_TYPE.E_TIME:
                            case I.a.ITEM_TYPE.DYNAMITE:
                            case I.a.ITEM_TYPE.FREEZE:
                            case I.a.ITEM_TYPE.MEDAL:
                            case I.a.ITEM_TYPE.S_INVI:
                            case I.a.ITEM_TYPE.SPEED:
                                return new E.a(4.5, 10.75)
                        }
                        k.a.error("Unknown item", e, "for game" + h.a.shortName)
                    }
                }]), t
            }(f.a),
            Y = a(53),
            K = (a(70), a(32)),
            G = function(e) {
                function t() {
                    return l()(this, t), y()(this, u()(t).apply(this, arguments))
                }
                return v()(t, e), r()(t, [{
                    key: "myInit",
                    value: function() {
                        this.modType = I.a.ITEM_MANAGER.MOD_TYPE.DYNAMITE, this._popTimeStep = .5, this._popTimeCounter = 0, this.infoTxt_desc = this.gameScene.add.bitmapText(h.a.gameWidth / 2, h.a.gameHeight / 2, h.a.fontNames.LVL_MSG, "BOOM!", 1), S.a.mySpriteDepth(S.a.RENDER_DEPTH.UNDER_GAME, this.infoTxt_desc), this.infoTxt_desc.blendMode = Phaser.BlendModes.COLOR_BURN, this.infoTxt_desc.setOrigin(.5, .5), this.infoTxt_desc.fontSize = 40, this.infoTxt_desc.alpha = 0;
                        var e = this;
                        return this.gameScene.tweens.add({
                            targets: this.infoTxt_desc,
                            fontSize: 125,
                            alpha: .85,
                            ease: "Back.easeInOut",
                            duration: 300,
                            hold: 500,
                            onComplete: function() {
                                e.gameScene.tweens.add({
                                    targets: e.infoTxt_desc,
                                    fontSize: 40,
                                    alpha: 0,
                                    ease: "Back.easeInOut",
                                    duration: 1e3
                                })
                            }
                        }), this
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, t) {
                        if (!this.gameScene.isGamePaused && (this._popTimeCounter += t / 1e3, this._popTimeCounter >= this._popTimeStep)) {
                            this._popTimeCounter -= this._popTimeStep;
                            for (var a = !1, i = [], n = 0, l = Object.entries(this.gameScene.ballManager.activeBalls); n < l.length; n++) {
                                var o = s()(l[n], 2);
                                o[0];
                                o[1].forEach((function(e) {
                                    i.push(e)
                                }))
                            }
                            i.forEach((function(e) {
                                e._currentState == K.a.EVENT_STATE.ACTIVE && e.ballId > 1 && !e._isMetal && (e.popBall({
                                    reason: I.a.POP_REASON.DYNAMITE
                                }), a = !0)
                            })), a || this._removeMod()
                        }
                    }
                }]), t
            }(B.a),
            H = G,
            z = a(172),
            V = function(e) {
                function t() {
                    return l()(this, t), y()(this, u()(t).apply(this, arguments))
                }
                return v()(t, e), r()(t, [{
                    key: "myInit",
                    value: function() {
                        this.modType = I.a.ITEM_MANAGER.MOD_TYPE.MEDAL, this._popTimeStep = .5, this._popTimeCounter = 0, this.gameScene.timebar.timebarStopped = !0, this.infoTxt_desc = this.gameScene.add.bitmapText(h.a.gameWidth / 2, 150, h.a.fontNames.LVL_MSG, "WIN", 1), S.a.mySpriteDepth(S.a.RENDER_DEPTH.UNDER_GAME, this.infoTxt_desc), this.infoTxt_desc.blendMode = Phaser.BlendModes.ADD, this.infoTxt_desc.setOrigin(.5, .5), this.infoTxt_desc.fontSize = 40, this.infoTxt_desc.alpha = 0;
                        var e = this;
                        return this.gameScene.tweens.add({
                            targets: this.infoTxt_desc,
                            fontSize: 125,
                            alpha: .85,
                            ease: "Back.easeInOut",
                            duration: 300,
                            hold: 500,
                            onComplete: function() {
                                e.gameScene.tweens.add({
                                    targets: e.infoTxt_desc,
                                    fontSize: 110,
                                    alpha: 0,
                                    ease: "Back.easeInOut",
                                    duration: 1e3
                                })
                            }
                        }), this._checkIfNoBubbles(), this
                    }
                }, {
                    key: "_checkIfNoBubbles",
                    value: function() {
                        this.gameScene.ballManager._areAllcolor_popped() && this.gameScene.ballManager._allBubblesArePopped()
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, t) {
                        if (!this.gameScene.isGamePaused && (this._popTimeCounter += t / 1e3, this._popTimeCounter >= this._popTimeStep)) {
                            this._popTimeCounter -= this._popTimeStep;
                            for (var a = !1, i = [], n = 0, l = Object.entries(this.gameScene.ballManager.activeBalls); n < l.length; n++) {
                                var o = s()(l[n], 2);
                                o[0];
                                o[1].forEach((function(e) {
                                    i.push(e)
                                }))
                            }
                            i.forEach((function(e) {
                                e._currentState == K.a.EVENT_STATE.ACTIVE && (e._isMetal || e._isWarp || (e.popBall({
                                    reason: I.a.POP_REASON.MEDAL
                                }), a = !0))
                            })), a || this._removeMod()
                        }
                    }
                }]), t
            }(B.a),
            F = V,
            X = function() {
                function e(t, a) {
                    l()(this, e), this.gameScene = t, this.allItems = [], this.allModifiers = {}, this._bt1_possibleItems = [I.a.ITEM_TYPE.W_SINGLE, I.a.ITEM_TYPE.POINTS1, I.a.ITEM_TYPE.W_HOOK, I.a.ITEM_TYPE.POINTS2, I.a.ITEM_TYPE.E_TIME, I.a.ITEM_TYPE.W_LASER, I.a.ITEM_TYPE.POINTS3, I.a.ITEM_TYPE.S_PLAIN, I.a.ITEM_TYPE.W_MINE, I.a.ITEM_TYPE.POINTS4, I.a.ITEM_TYPE.E_LIFE, I.a.ITEM_TYPE.S_TIME], this._bt1_chances = [6, 7, 7, 7, 6, 6, 6, 5, 7, 5, 2, 3], this._bt1_levelItems = a.items, this._bt1_probability = a.item_prob, this._bs2_calculatedDrops = []
                }
                return r()(e, [{
                    key: "popChecksForItem",
                    value: function(e, t) {
                        h.a.isBT ? this._calcDropProbabilityBT(e, t) : this._getItemBS2(e, t)
                    }
                }, {
                    key: "removeItem",
                    value: function(e) {
                        for (var t = 0; t < this.allItems.length; t++)
                            if (this.allItems[t] === e) {
                                this.allItems.splice(t, 1);
                                break
                            }
                    }
                }, {
                    key: "_calcDropProbabilityBT",
                    value: function(e, t) {
                        if (this._bt1_levelItems.includes(!0) && !(p.b(this._bt1_probability) > 0)) {
                            var a = -1;
                            do {
                                var i = p.b(this._bt1_possibleItems.length);
                                this._bt1_chances[i] >= 10 - p.b(10) + 1 && !0 === this._bt1_levelItems[i] && (a = i)
                            } while (-1 === a);
                            if (this._bt1_possibleItems[a] == I.a.ITEM_TYPE.E_LIFE) {
                                if (!0 === Y.a.levelSpawnedLife[w.a.currentLevel]) return;
                                Y.a.levelSpawnedLife[w.a.currentLevel] = !0
                            }
                            var s = new U(this.gameScene, e, t, this._bt1_possibleItems[a], I.a.ITEM_SPAWN_REASON.BALL);
                            this.allItems.push(s)
                        }
                    }
                }, {
                    key: "_prepareDropBS2",
                    value: function(e) {
                        this._bs2_calculatedDrops = [];
                        for (var t = {
                                2: [0, 0, 1, 3, 7, 15],
                                4: [0, 0, 1, 5, 21, 85]
                            }, a = 0, i = 0, n = Object.entries(this.gameScene.ballManager.activeBalls); i < n.length; i++) {
                            var l = s()(n[i], 2);
                            l[0];
                            l[1].forEach((function(e) {
                                a += t[e._splitWay][e.ballId]
                            }))
                        }
                        var o = [I.a.ITEM_TYPE.NONE],
                            r = {};
                        for (var h in e.items) o.push(h), 0 === e.items[h] ? r[h] = 9999 : r[h] = e.items[h];

                        function d(e, t) {
                            return Math.round(Math.random() * (t - e)) + e
                        }
                        for (var y = 1; y <= a; y++) {
                            var _ = 10 * R.a.getPassiveItemValue(I.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_MEDAL);
                            if (_ > 0)
                                if (p.b(1e3) <= _) {
                                    k.a.log("MEDAL BONUS!!."), this._bs2_calculatedDrops.push(I.a.ITEM_TYPE.MEDAL);
                                    continue
                                } if (d(1, e.item_prob) == e.item_prob) {
                                for (var c = !0, m = d(1, o.length - 1), u = m; u <= m + o.length - 2; u++) {
                                    if (r[h = o[u % (o.length - 1) + 1]] > 0) {
                                        this._bs2_calculatedDrops.push(h), r[h]--, c = !1, 0 == r[h] && delete r[h];
                                        break
                                    }
                                }
                                1 == c && this._bs2_calculatedDrops.push(I.a.ITEM_TYPE.NONE)
                            } else this._bs2_calculatedDrops.push(I.a.ITEM_TYPE.NONE)
                        }! function(e) {
                            for (var t = e.length - 1; t > 0; t--) {
                                var a = Math.floor(Math.random() * (t + 1)),
                                    i = e[t];
                                e[t] = e[a], e[a] = i
                            }
                        }(this._bs2_calculatedDrops), k.a.log("drop options:", this._bs2_calculatedDrops, "dropTimes:" + a, "validItems", o, "itemsLeft:", r)
                    }
                }, {
                    key: "_getItemBS2",
                    value: function(e, t) {
                        var a = this._bs2_calculatedDrops.pop();
                        null != a && a != I.a.ITEM_TYPE.NONE && this.SpawnItem_BS2(a, e, t, I.a.ITEM_SPAWN_REASON.BALL)
                    }
                }, {
                    key: "SpawnItem_BS2",
                    value: function(e, t, a, i) {
                        if (e != I.a.ITEM_TYPE.NONE) {
                            var s = new U(this.gameScene, t, a, e, i);
                            this.allItems.push(s)
                        }
                    }
                }, {
                    key: "addMod",
                    value: function(e) {
                        if (this.allModifiers.hasOwnProperty(e)) return this.allModifiers[e].modAddExisting(), this.allModifiers[e];
                        k.a.log("Adding mod", e);
                        var t = [];
                        for (var a in I.a.ITEM_MANAGER.MOD_TYPE) - 1 != a.search("UPGRADE_") && t.push(I.a.ITEM_MANAGER.MOD_TYPE[a]);
                        var i = null;
                        return e == I.a.ITEM_MANAGER.MOD_TYPE.SLOW_TIME ? i = new N(this.gameScene).myInit() : e == I.a.ITEM_MANAGER.MOD_TYPE.DYNAMITE ? i = new H(this.gameScene).myInit() : e == I.a.ITEM_MANAGER.MOD_TYPE.FREEZE ? i = new z.a(this.gameScene).myInit() : e == I.a.ITEM_MANAGER.MOD_TYPE.MEDAL ? i = new F(this.gameScene).myInit() : t.includes(e) ? i = new C(this.gameScene).myInit(e) : k.a.error("Trying to init unknown mod:" + e), this.allModifiers[e] = i, i
                    }
                }, {
                    key: "removeMod",
                    value: function(e) {
                        delete this.allModifiers[e]
                    }
                }]), e
            }();
        t.a = X
    },
    249: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(102),
            r = a(10),
            h = a.n(r),
            p = a(19),
            d = a.n(p),
            y = a(7),
            _ = a.n(y),
            c = a(11),
            m = a.n(c),
            u = a(16),
            g = a(0),
            v = a(15),
            f = a(9),
            S = a(1),
            E = function(e) {
                function t(e) {
                    var a;
                    return s()(this, t), (a = h()(this, _()(t).call(this, e)))._singleShotWidth = 8, (g.a.isBS2 || g.a.isBS3) && (a._singleShotWidth = 5), a
                }
                return m()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        d()(_()(t.prototype), "myInit", this).call(this), this.shotType = S.a.SHOT_TYPE.SINGLE, this.shotOrigin = new u.a(this.player.pos.x, this.player.pos.y + this.player.sizeHalf.y), this.pos = this.player.pos.copy(), this._pBodyResize(new u.a(this._singleShotWidth, this.player.size.y)), this.vel.y = -16;
                        var e = "shots/single_spiral.png";
                        return 2 == this.player.playerId && (e = "shots/single_spiral_p2.png"), (g.a.isBS2 || g.a.isBS3) && (e = "shots/single_frm1.png", 2 == this.player.playerId && (e = "shots/single_frm1_p2.png")), this.mySprite = new f.a(this.gameScene, this.pos.x, this.pos.y, g.a.spriteKey, e, 1, this.myRenderDepth), this.mySprite.setOrigin(.5, 0), (g.a.isBS2 || g.a.isBS3) && (this.mySprite.anims.play("singleShot"), 2 == this.player.playerId && this.mySprite.anims.play("singleShot_p2")), this.mySound = v.a.playSound(this.gameScene, v.a.SND.SHOT_SINGLE), this.myUpdate(), this
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, t) {
                        this._pBodyResize(new u.a(this.size.x, this.shotOrigin.y - this.pos.y + this.sizeHalf.y))
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, t) {
                        this.mySprite.x = this.pos.x, this.mySprite.y = this.pos.y - this.sizeHalf.y, this.mySprite.setCrop(0, 0, this.mySprite.width, this.shotOrigin.y - this.pos.y + this.sizeHalf.y)
                    }
                }, {
                    key: "myOnPause",
                    value: function(e) {
                        d()(_()(t.prototype), "myOnPause", this).call(this, e), e ? this.mySprite.anims.pause() : this.mySprite.anims.resume()
                    }
                }]), t
            }(o.a),
            x = (a(73), a(49)),
            T = function(e) {
                function t(e) {
                    var a;
                    return s()(this, t), (a = h()(this, _()(t).call(this, e))).isHooked = !1, a
                }
                return m()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        return d()(_()(t.prototype), "myInit", this).call(this), (g.a.isBS2 || g.a.isBS3) && (this.mySprite.anims.stop(), this.mySprite.setFrame("shots/hook_in_air.png"), 2 == this.player.playerId && this.mySprite.setFrame("shots/hook_in_air_p2.png"), null != this.mySound && this.mySound.stop(), this.mySound = v.a.playSound(this.gameScene, v.a.SND.HOOK_FLYING)), this
                    }
                }, {
                    key: "collideEdge",
                    value: function(e, a, i, s, n, l, o, r) {
                        return !(r.goType != S.a.GO_TYPE.WALL || !this.playerShotLadderWall(r)) || (e == S.a.PHY.COL_EDGE.TOP && r.goType == S.a.GO_TYPE.WALL && r.wallType != S.a.WALL.WALL_TYPE.BREAKABLE ? 0 == r.isStatic ? (this.myOnDestroy(), !0) : (this.shotType = S.a.SHOT_TYPE.HOOK, v.a.playSound(this.gameScene, v.a.SND.HOOK_ATTACHED), this.pos.y = this.shotOrigin.y - (this.shotOrigin.y - r._p2.y) / 2, this.vel.y = 0, this.mySprite.setFrame("shots/hook.png"), 2 == this.player.playerId && this.mySprite.setFrame("shots/hook_p2.png"), this.makeDepthAndScale(this.mySprite), this._pBodyResize(new u.a(this.size.x, this.shotOrigin.y - r._p2.y)), this.myFixedPostUpdate(), this.myUpdate(), this.isHooked = !0, !0) : d()(_()(t.prototype), "collideEdge", this).call(this, e, a, i, s, n, l, o, r))
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, a, i) {
                        this.isHooked || d()(_()(t.prototype), "myFixedPostUpdate", this).call(this, e, a, i)
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        this.isHooked || d()(_()(t.prototype), "myUpdate", this).call(this)
                    }
                }]), t
            }(E),
            b = a(3),
            k = a(25),
            w = function(e) {
                function t(e) {
                    var a;
                    return s()(this, t), (a = h()(this, _()(t).call(this, e))).laserTrail1 = null, a.laserTrail2 = null, a.laserTrail1Offset = null, a.laserTrail2Offset = null, a
                }
                return m()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        d()(_()(t.prototype), "myInit", this).call(this), this.shotType = S.a.SHOT_TYPE.LASER, this.pos = this.player.pos.copy(), this.pos.y = this.player._p1.y + 10;
                        var e = "shots/laser.png";
                        if (g.a.isBT || g.a.isBS2) 2 == this.player.playerId && (e = "shots/laser_p2.png");
                        else if (g.a.isBS3) {
                            e = "shots/laser/star_" + (k.b(7) + 1) + ".png"
                        }
                        if (this.mySprite = new f.a(this.gameScene, this.pos.x, this.pos.y, g.a.spriteKey, e, 1, this.myRenderDepth), this.mySprite.setOrigin(.5, 0), g.a.isBS3) {
                            var a = "shots/laser/star_" + (k.b(7) + 1) + ".png";
                            this.laserTrail1 = new f.a(this.gameScene, this.pos.x, this.pos.y, g.a.spriteKey, a, 1, this.myRenderDepth), this.laserTrail1.scale = .6, this.laserTrail1.angle = k.a(0, 360), this.laserTrail1Offset = new u.a(k.a(-4, 4), 24);
                            var i = "shots/laser/star_" + (k.b(7) + 1) + ".png";
                            this.laserTrail2 = new f.a(this.gameScene, this.pos.x, this.pos.y, g.a.spriteKey, i, 1, this.myRenderDepth), this.laserTrail2.scale = .45, this.laserTrail2.angle = k.a(0, 360), this.laserTrail2Offset = new u.a(k.a(-4, 4), 34)
                        }
                        var s = this.mySprite.displayHeight,
                            n = this.mySprite.displayWidth;
                        if (g.a.isBS3 && (s = 20, n = 20), this._pBodyResize(new u.a(s, n)), g.a.isBS3 ? this.mySound = v.a.playRandom(this.gameScene, [v.a.SND.SHOOT_LASER1, v.a.SND.SHOOT_LASER2, v.a.SND.SHOOT_LASER3]) : this.mySound = v.a.playSound(this.gameScene, v.a.SND.SHOT_LASER), g.a.isBT) this.vel.y = -20, this.acc.y = -14;
                        else if (g.a.isBS2) {
                            if (this.vel.y = -60, Math.random() < .5) {
                                var l = new f.a(this.gameScene, this.player.pos.x, this.player.pos.y, g.a.spriteKey, "shots/laser_leaf/leaf1.png", 1, b.a.RENDER_DEPTH.UNDER_GAME);
                                this.player._leafLaserNum++, this.player._leafLaserNum % 2 == 0 && (l.flipX = !0), l.anims.play("laser_leaf"), l.once(Phaser.Animations.Events.SPRITE_ANIMATION_COMPLETE, (function() {
                                    l.destroy()
                                }))
                            }
                        } else if (g.a.isBS3) {
                            this.vel.y = -60;
                            for (var o = 1; o <= 3; o++) {
                                var r = Math.random() * Math.PI * 2,
                                    h = 25 * Math.cos(r),
                                    p = 25 * Math.sin(r),
                                    y = new f.a(this.gameScene, this.player.pos.x, this.player.pos.y - g.a.playerCollH / 2, g.a.spriteKey, "shots/laser/star_" + (k.b(7) + 1) + ".png", 1, b.a.RENDER_DEPTH.UNDER_GAME);
                                y.scale = .75, this.gameScene.add.tween({
                                    duration: 140,
                                    targets: y,
                                    x: this.player.pos.x + h,
                                    y: this.player.pos.y + p - g.a.playerCollH / 2,
                                    scale: .5,
                                    angle: k.a(-720, 720),
                                    onComplete: function() {
                                        this.destroy()
                                    },
                                    onCompleteScope: y
                                })
                            }
                        }
                        return this.myUpdate(), this
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, t) {
                        if (g.a.isBT) {
                            var a = this.size.y - t * this.vel.y / 1.5,
                                i = new u.a(this.size.x, a);
                            this._pBodyResize(i)
                        }
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, t) {
                        g.a.isBT ? (this.mySprite.x = this.pos.x, this.mySprite.y = this.pos.y - this.sizeHalf.y, this.mySprite.displayHeight = -this.vel.y / 3) : g.a.isBS2 ? (this.mySprite.x = this.pos.x, this.mySprite.y = this.pos.y) : g.a.isBS3 && (this.mySprite.x = this.pos.x, this.mySprite.y = this.pos.y, this.laserTrail1.x = this.pos.x + this.laserTrail1Offset.x, this.laserTrail1.y = this.pos.y + this.laserTrail1Offset.y, this.laserTrail2.x = this.pos.x + this.laserTrail2Offset.x, this.laserTrail2.y = this.pos.y + this.laserTrail2Offset.y)
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        g.a.isBS3 && (this.laserTrail1.destroy(), this.laserTrail2.destroy()), d()(_()(t.prototype), "myOnDestroy", this).call(this)
                    }
                }]), t
            }(o.a),
            I = a(22),
            P = function(e) {
                function t(e) {
                    var a;
                    s()(this, t), void 0 === e && console.error("Cant create Shot without all parameters. Something is undefined." + e);
                    var i = e.player.pos,
                        n = new u.a(i.x - 5, i.y + 12),
                        l = new u.a(i.x + 5, i.y + 17);
                    return (a = h()(this, _()(t).call(this, e.gameScene, I.a.LAYER.ITEM, I.a.LAYERS_ITEM, n, l))).shotManager = e, a.player = e.player, a._mineCanShoot = !1, a
                }
                return m()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        return v.a.playSound(this.gameScene, v.a.SND.MINE_DIGIN), this.myRenderDepth = b.a.RENDER_DEPTH.UNDER_GAME, this.mySprite = new f.a(this.gameScene, this.player.pos.x, this.player.pos.y + this.player.sizeHalf.y, g.a.spriteKey, "shots/mine_ani/mine_idle.png"), this.mySprite.anims.play("mine_digin"), this.mySprite.on("animationcomplete", this.mineAnimFinished, this), this.makeDepthAndScale(this.mySprite), this
                    }
                }, {
                    key: "mineAnimFinished",
                    value: function(e, t) {
                        this._mineCanShoot = !0, this.mySprite.setFrame("shots/mine_ani/mine_idle.png")
                    }
                }, {
                    key: "mineCanShoot",
                    value: function() {
                        return this._mineCanShoot
                    }
                }, {
                    key: "removeMineCase",
                    value: function() {
                        var e = this;
                        this._mineCanShoot = !1, this.gameScene.add.tween({
                            targets: this.mySprite,
                            alpha: 0,
                            duration: 500,
                            ease: "Power2"
                        }), this.gameScene.add.tween({
                            targets: this.mySprite,
                            y: this.mySprite.y + 3,
                            duration: 500,
                            ease: "Power2",
                            onCompleteScope: this,
                            onComplete: function() {
                                return e.myOnDestroy()
                            }
                        })
                    }
                }, {
                    key: "collideEdge",
                    value: function(e, t, a, i, s, n, l, o) {
                        if (o.goType == S.a.GO_TYPE.PLAYER) return o != this.shotManager.player || (!this.mineCanShoot() || (this.shotManager.player.myInput.fire() && (this.shotManager.paralizePlayer(200), this.myOnDestroy()), !0))
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        d()(_()(t.prototype), "myOnDestroy", this).call(this), this.shotManager.droppedMine == this && (this.shotManager.droppedMine = null)
                    }
                }]), t
            }(x.a),
            A = function(e) {
                function t() {
                    return s()(this, t), h()(this, _()(t).apply(this, arguments))
                }
                return m()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        d()(_()(t.prototype), "myInit", this).call(this), this.shotType = S.a.SHOT_TYPE.MINE, this.shotOrigin = new u.a(this.shotManager.droppedMine.pos.x, this.shotManager.droppedMine.pos.y), this.pos = this.shotManager.droppedMine.pos.copy(), this._pBodyResize(new u.a(4, 2)), this.vel.y = -42;
                        var e = "shots/mine_shot.png";
                        return 2 == this.player.playerId && (e = "shots/mine_shot_p2.png"), this.mySprite = this.gameScene.add.tileSprite(this.pos.x, this.pos.y, 0, 0, g.a.spriteKey, e), this.mySprite.setOrigin(.5, 0), this.makeDepthAndScale(this.mySprite), this.mySound = v.a.playSound(this.gameScene, v.a.SND.MINE_SHOT), this.myUpdate(), this
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, t) {
                        var a = this.shotOrigin.y - this.pos.y + this.sizeHalf.y;
                        a > this.mySprite.displayHeight && (a = this.mySprite.displayHeight), this._pBodyResize(new u.a(4, a))
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, t) {
                        this.mySprite.x = this.pos.x, this.mySprite.y = this.pos.y - this.sizeHalf.y, this.mySprite.setCrop(0, 0, this.mySprite.width, this.shotOrigin.y - this.pos.y + this.sizeHalf.y)
                    }
                }]), t
            }(o.a),
            L = A,
            M = (a(42), a(2)),
            O = a(12),
            D = a(8),
            B = function() {
                function e(t) {
                    s()(this, e), this.gameScene = t.gameScene, this.player = t, this._activeShotType = S.a.SHOT_TYPE.SINGLE, this._activeShots = [], this.droppedMine = null, this.cantShootTimer = 0, this.switchWeaponTween = null, this.accuracyBonus = !0
                }
                return l()(e, [{
                    key: "playerFired",
                    value: function(e) {
                        if (!(this.player.paralizedUntil > e || this.cantShootTimer > e))
                            if (this._activeShotType == S.a.SHOT_TYPE.SINGLE || this._activeShotType == S.a.SHOT_TYPE.DOUBLE || this._activeShotType == S.a.SHOT_TYPE.HOOK) {
                                if (this._activeShotType == S.a.SHOT_TYPE.SINGLE && this._shotsTypeActive(S.a.SHOT_TYPE.SINGLE) >= 1) return;
                                if (this._activeShotType == S.a.SHOT_TYPE.HOOK && this._shotsTypeActive(S.a.SHOT_TYPE.SINGLE) >= 1) return;
                                if (this._activeShotType == S.a.SHOT_TYPE.DOUBLE && this._shotsTypeActive(S.a.SHOT_TYPE.SINGLE) >= 2) return;
                                if (this._activeShotType == S.a.SHOT_TYPE.HOOK)
                                    for (var t = 0; t < this._activeShots.length; t++)
                                        if (this._activeShots[t].shotType == S.a.SHOT_TYPE.HOOK && this._activeShots[t].isHooked) {
                                            this._activeShots[t].myOnDestroy();
                                            break
                                        } this.addActiveShot()
                            } else if (this._activeShotType == S.a.SHOT_TYPE.LASER) {
                            if (g.a.isBT && this._shotsTypeActive(S.a.SHOT_TYPE.LASER) >= 1) return;
                            this.addActiveShot()
                        } else if (this._activeShotType == S.a.SHOT_TYPE.MINE)
                            if (null == this.droppedMine) this.droppedMine = new P(this).myInit();
                            else {
                                if (this._shotsTypeActive(S.a.SHOT_TYPE.MINE) >= 1) return;
                                if (!this.droppedMine.mineCanShoot()) return;
                                this.addActiveShot()
                            }
                    }
                }, {
                    key: "switchWeapon",
                    value: function(e) {
                        if (M.a.log("ShotManager", "Switching weapon to:", e), this._activeShotType != e && (this._activeShotType = e, g.a.isBS2 || g.a.isBS3)) {
                            this.gameScene.myGUI.activeWeapon[this.player.playerId].setFrame("ui/ingame/interface_" + this._activeShotType + ".png"), this.gameScene.myGUI.activeWeaponSwitch[this.player.playerId].alpha = .5, null != this.switchWeaponTween && this.switchWeaponTween.stop();
                            var t = this;
                            this.switchWeaponTween = this.gameScene.add.tween({
                                targets: this.gameScene.myGUI.activeWeaponSwitch[this.player.playerId],
                                alpha: .9,
                                ease: "Elastic",
                                duration: 150,
                                onComplete: function(e) {
                                    t.switchWeaponTween = t.gameScene.add.tween({
                                        targets: t.gameScene.myGUI.activeWeaponSwitch[t.player.playerId],
                                        alpha: 0,
                                        duration: 450
                                    })
                                }
                            })
                        }
                    }
                }, {
                    key: "removeShot",
                    value: function(e) {
                        for (var t = 0; t < this._activeShots.length; t++)
                            if (this._activeShots[t] === e) {
                                this._activeShots.splice(t, 1);
                                break
                            }
                    }
                }, {
                    key: "addActiveShot",
                    value: function() {
                        O.a.TaskIncrement(this.gameScene, O.a.TASK_TYPE.SHOT_WEAPON, 1, this._activeShotType), O.a.TaskIncrementDontNotify(this.gameScene, O.a.TASK_TYPE.SHOT_ANY_WEAPON_ON_LVL, 1, D.a.currentLevel), this._activeShotType == S.a.SHOT_TYPE.SINGLE || this._activeShotType == S.a.SHOT_TYPE.DOUBLE ? this._activeShots.push(new E(this).myInit()) : this._activeShotType == S.a.SHOT_TYPE.HOOK ? this._activeShots.push(new T(this).myInit()) : this._activeShotType == S.a.SHOT_TYPE.LASER ? this._activeShots.push(new w(this).myInit()) : this._activeShotType == S.a.SHOT_TYPE.MINE && this._activeShots.push(new L(this).myInit()), this.paralizePlayer(), null != this.droppedMine && this._activeShotType != S.a.SHOT_TYPE.MINE && this.droppedMine.removeMineCase()
                    }
                }, {
                    key: "paralizePlayer",
                    value: function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                            t = e,
                            a = 0;
                        g.a.isBT && 0 === e ? (this._activeShotType == S.a.SHOT_TYPE.SINGLE && (t = 110), this._activeShotType == S.a.SHOT_TYPE.HOOK && (t = 110), this._activeShotType == S.a.SHOT_TYPE.LASER && (t = 70), this._activeShotType == S.a.SHOT_TYPE.MINE && (t = 0)) : (g.a.isBS2 || g.a.isBS3) && 0 == e && (a = 150, this._activeShotType == S.a.SHOT_TYPE.SINGLE && (t = 75), this._activeShotType == S.a.SHOT_TYPE.DOUBLE && (t = 75), this._activeShotType == S.a.SHOT_TYPE.HOOK && (t = 75), this._activeShotType == S.a.SHOT_TYPE.LASER && (t = 75)), this.player.paralizedUntil = this.gameScene.gameTime + t, this.cantShootTimer = this.gameScene.gameTime + a
                    }
                }, {
                    key: "_shotsTypeActive",
                    value: function(e) {
                        for (var t = 0, a = 0; a < this._activeShots.length; a++) this._activeShots[a].shotType == e && t++;
                        return t
                    }
                }]), e
            }();
        t.a = B
    },
    25: function(e, t, a) {
        "use strict";

        function i(e) {
            return Math.floor(Math.random() * Math.floor(e))
        }

        function s(e, t) {
            return e + Math.random() * (t - e)
        }
        a.d(t, "b", (function() {
            return i
        })), a.d(t, "a", (function() {
            return s
        }))
    },
    250: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(0),
            c = a(18),
            m = a(103),
            u = a(37),
            g = a(135),
            v = a(2),
            f = a(31),
            S = a(14),
            E = a(4),
            x = a(136),
            T = (a(82), a(104)),
            b = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "initialize",
                    value: function(t) {
                        if (v.a.log("REMOTE", "Initializing RemoteSettings"), v.a.forceRSOff) return v.a.error("REMOTE", "Remote Settings are off for debugging"), void t.remoteSettingsCallStart();
                        if (!c.a.isCordova && 0 == v.a.forceNewsOn) return v.a.log("REMOTE", "Close RS. Not active on this platform:" + c.a.myTarget), void t.remoteSettingsCallStart();
                        t.time.delayedCall(5e3, (function() {
                            v.a.log("REMOTE", "Timer for remotesettings passed, continue game if not already?"), t.remoteSettingsCallStart()
                        }));
                        var a = new XMLHttpRequest;
                        a.open("POST", f.a.GAME_SUPERVISOR, !0), a.onerror = function(e) {
                            v.a.log("REMOTE", "RS error?!"), v.a.log("REMOTE", e)
                        }, a.onload = function() {
                            v.a.log("REMOTE", "Received data", this.response);
                            try {
                                var a = JSON.parse(this.response);
                                if (v.a.forceNewsOn && (v.a.error("REMOTE", "DEBUGGER. Forcing news."), a = JSON.parse(v.a.forceNewsOnJSON)), e.loaded = a, v.a.log("REMOTE", "My ads server:", u.a.adServer), a.hasOwnProperty("breakBetweenAds") && (u.a.adServer._breakBetweenAds = a.breakBetweenAds), a.hasOwnProperty("noAdsBeforeLevel") && (u.a.adServer._noAdsBeforeLevel = a.noAdsBeforeLevel), a.hasOwnProperty("fillerAdFrequency") && (T.a._fillerAdFrequency = a.fillerAdFrequency), a.hasOwnProperty("news")) return v.a.log("REMOTE", "RS got news", a.news, t), void(x.a.newsObj = new x.a(a.news, t))
                            } catch (e) {
                                v.a.error("REMOTE", "Can't decode server JSON.", this.response, e)
                            }
                            t.remoteSettingsCallStart()
                        }, E.a.gameSettings.hasOwnProperty("cohort") || (E.a.gameSettings.cohort = Math.floor(10 * Math.random()) + 1, E.a.saveUserSettings());
                        var i = {
                            game: _.a.shortName,
                            version: _.a.gameVersion,
                            platform: c.a.myTarget,
                            mobile: S.a.isMobile,
                            ios: S.a.isIOS,
                            android: S.a.isAndroid,
                            cohort: E.a.gameSettings.cohort
                        };
                        v.a.log("REMOTE", "request sent", i, JSON.stringify(i)), a.send(JSON.stringify(i))
                    }
                }]), e
            }();
        b.loaded = {};
        var k = b,
            w = a(58),
            I = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "OverrideDefault",
                    value: function(t, a, i, s) {
                        var n = null;
                        if (this.checkKey(t)) {
                            if (n = this.create(t, a), Array.isArray(i))
                                for (var l = 1 === i.length, o = 0; o < n.source.length; o++) {
                                    var r = l ? i[0] : i[o];
                                    e.MyJSONArray(n, o, r)
                                } else e.MyJSONArray(n, 0, i);
                            s && n.setDataSource(s), this.emit("addtexture", t, n)
                        }
                        return n
                    }
                }, {
                    key: "MyJSONArray",
                    value: function(t, a, i) {
                        if (v.a.warn("Using custom MyJSONArray to decode TexturePacker", t, a, i), i.frames || i.textures) {
                            var s = t.source[a];
                            t.add("__BASE", a, 0, 0, s.width, s.height);
                            for (var n, l = Array.isArray(i.textures) ? i.textures[a].frames : i.frames, o = 0; o < l.length; o++) {
                                var r = l[o];
                                null == (n = t.add(r.f, a, r.x, r.y, r.w, r.h)) && v.a.error("Erro parsing JSON from TexturePacker. Make sure to parse for BT (save in IDE)."), n.setTrim(r.l, r.r, r.v, r.z, r.b, r.g), r.m && (n.customPivot = !0, n.pivotX = r.m, n.pivotY = r.n), n.customData = e.Clone(r)
                            }
                            for (var h in i) "frames" !== h && (Array.isArray(i[h]) ? t.customData[h] = i[h].slice(0) : t.customData[h] = i[h]);
                            return t
                        }
                        v.a.warn("Invalid Texture Atlas JSON Array")
                    }
                }, {
                    key: "Clone",
                    value: function(e) {
                        var t = {};
                        for (var a in e) Array.isArray(e[a]) ? t[a] = e[a].slice(0) : t[a] = e[a];
                        return t
                    }
                }]), e
            }(),
            P = a(29),
            A = a(75),
            L = function(e) {
                function t() {
                    return s()(this, t), r()(this, p()(t).call(this, {
                        key: "BootScene"
                    }))
                }
                return y()(t, e), l()(t, [{
                    key: "preload",
                    value: function() {
                        v.a.printDebuggerOptions(), v.a.log("Preloading bootscene.."), E.a.loadUserSettings(), v.a.log("MyStorageUtils inited."), v.a.resetSkins && (E.a.gameSettings.selectedSkinID = "", E.a.gameSettings.skinsNewViewed = [], E.a.gameSettings.skinsUnlocked = [], E.a.gameSettings.skinsUnlockedUsed = []), this.textures.addAtlasJSONArray = I.OverrideDefault, this.load.on("progress", (function(e) {
                            c.a.isFacebook && FBInstant.setLoadingProgress(100 * e)
                        })), this.cameras.main.transparent = !1, this.cameras.main.backgroundColor = Phaser.Display.Color.HexStringToColor("#ff5b01"), _.a.loaderBeforeGameStarts(this), A.a.init(this)
                    }
                }, {
                    key: "create",
                    value: function() {
                        var e = this;
                        v.a.log("Bootscene starting.."), _.a.animations.forEach((function(t) {
                            e.anims.create(t)
                        }));
                        var t = this.add.bitmapText(_.a.gameWidth / 2, .82 * _.a.gameHeight, _.a.fontNames.MENU, "Loading...", 30);
                        if (t.setOrigin(0, .5), this.time.addEvent({
                                delay: 400,
                                callback: function() {
                                    t.text += "."
                                },
                                callbackScope: this,
                                loop: !0
                            }), this.load.maxParallelDownloads = 128, this.game.sound.pauseOnBlur = !1, c.a.isFacebook) {
                            var a = this;
                            FBInstant.startGameAsync().then((function() {
                                v.a.log("FB", "FBInstant.startGameAsync called"), a._loadFacebookStorage()
                            }))
                        } else this.gameIsLoaded()
                    }
                }, {
                    key: "_loadFacebookStorage",
                    value: function() {
                        v.a.always("FB", "Loading FBstorage..."), this.add.bitmapText(_.a.gameWidth / 2, _.a.gameHeight / 2, _.a.fontNames.MENU, "LOADING SAVE DATA...", 55).setOrigin(.5, .5), m.a.load(this.gameIsLoaded.bind(this))
                    }
                }, {
                    key: "gameIsLoaded",
                    value: function() {
                        S.a.initialize(this.game), P.a.Init(), c.a.isPoki && PokiSDK.gameLoadingFinished(), v.a.log("Starting game.");
                        var e = window.location != window.parent.location ? document.referrer : document.location.href;
                        v.a.log("Host:" + window.location.hostname + ", url:" + e), k.initialize(this), v.a.log("MyRemoteSettings inited."), u.a.initialize(this), v.a.log("Ads inited."), g.a.initialize(this), v.a.log("Leaderboard inited."), w.a.initializeStore(), this.input.keyboard.addCapture("LEFT,RIGHT,UP,DOWN,SPACE")
                    }
                }, {
                    key: "remoteSettingsCallStart",
                    value: function() {
                        if (v.a.log("--- remoteSettingsCallStart - game started ---"), this.time.clearPendingEvents(), c.a.isCordova || v.a.loadLazyImmediate) {
                            v.a.log("Avoiding loading TitleScene - waiting for LazyLoadScene to load TitleScene..."), this.scene.run("LazyloadScene", {
                                continueToTitleScene: function() {
                                    v.a.log("LazyLoad", "called function `continueToTitleScene()`..."), this.scene.start("TitleScene")
                                }.bind(this)
                            })
                        } else v.a.log("Loading TitleScene - LazyloadScene is loading in the background..."), this.scene.run("LazyloadScene"), this.scene.start("TitleScene")
                    }
                }]), t
            }(Phaser.Scene);
        t.a = L
    },
    26: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return g
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(17),
            r = a.n(o),
            h = a(0),
            p = a(21),
            d = a(1),
            y = a(2),
            _ = a(8),
            c = a(29),
            m = a(4),
            u = a(24),
            g = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "init",
                    value: function() {
                        h.a.isBS2 ? e.ITEMS = e._ITEMS_BS2 : h.a.isBS3 && (e.ITEMS = e._ITEMS_BS3);
                        for (var t = 0; t < e.ITEMS.length; t++) {
                            null == m.a.gameSettings.levelPointsDistributed[t] && (m.a.gameSettings.levelPointsDistributed[t] = []);
                            var a = e.ITEMS[t],
                                i = a.upgradePrice.length;
                            a.upgradeVal.length == i && a.upgradePrice.length == i || y.a.error("MyUpgrades", "Item values not set up correctly.", a.upgradePrice.length, a.upgradeVal.length, a.rankReq.length), m.a.gameSettings.levelPointsDistributed[t].length != i && (y.a.warn("MyUpgrades", "Upgrade levels slots doesn't match gamesettings saved value. Resetting", JSON.stringify(m.a.gameSettings.levelPointsDistributed[t]), ", should be:", i), m.a.gameSettings.levelPointsDistributed[t] = []);
                            for (var s = 0; s < e.ITEMS[t].upgradePrice.length; s++) null == m.a.gameSettings.levelPointsDistributed[t][s] && (m.a.gameSettings.levelPointsDistributed[t][s] = 0)
                        }
                        y.a.log("UPGRADES", "Started with items:", e.ITEMS)
                    }
                }, {
                    key: "renderButton",
                    value: function(t, a, i, s) {
                        if (!(e.LevelPoints < 1)) {
                            var n = 80 * s,
                                l = 80 * s;
                            new p.a(t, a, i, n, l, {
                                icon: "retention/upgrade_btn.png",
                                iconSpriteKey: h.a.lazySpriteKey
                            }, e.clickedOpenUpgrades.bind(t, t)).myIcon.setScale(s);
                            var o = e.UndistributedLevelPoints;
                            if (o > 0) {
                                var r = 13904693;
                                h.a.isBS3 && (r = 458987);
                                var d = -n / 2,
                                    y = -l / 2,
                                    _ = t.add.graphics();
                                _.fillStyle(r, 1), _.lineStyle(4, 14475529, 1), _.fillCircle(0, 0, 15), _.strokeCircle(0, 0, 15);
                                var c = t.add.bitmapText(-2, 1, h.a.lazyFontNames.RETENTION_XP, e.UndistributedLevelPoints, 15);
                                c.setOrigin(.5, .5);
                                var g = t.add.container(a + d, i + y);
                                g.add([_, c]);
                                var v = !1;
                                e: for (var f = 0; f < e.ITEMS.length; f++)
                                    for (var S = 0; S < e.ITEMS[f].upgradePrice.length; S++) {
                                        var E = e.ITEMS[f].rankReq[S],
                                            x = e.ITEMS[f].upgradePrice[S];
                                        if (u.a.CurrentLevel >= E && o >= x) {
                                            if (0 == m.a.gameSettings.levelPointsDistributed[f][S]) {
                                                v = !0;
                                                break e
                                            }
                                        } else if (u.a.CurrentLevel < E) break
                                    }
                                v && t.add.tween({
                                    targets: g,
                                    scale: 1.21,
                                    duration: 230,
                                    loop: -1,
                                    yoyo: !0
                                })
                            }
                        }
                    }
                }, {
                    key: "clickedOpenUpgrades",
                    value: function(e) {
                        c.a.LogClick(c.a.CLICK_TYPE.UPGRADES), e.myTransition.transitionToggle(!1, "MyUpgradesScene")
                    }
                }, {
                    key: "getMaxLevelForItem",
                    value: function(t) {
                        for (var a = 0; a < e.ITEMS.length; a++)
                            if (e.ITEMS[a].modType == t.modType)
                                for (var i = 0; i < m.a.gameSettings.levelPointsDistributed[a].length; i++) {
                                    if (0 == i && 0 == m.a.gameSettings.levelPointsDistributed[a][i]) return -1;
                                    if (0 == m.a.gameSettings.levelPointsDistributed[a][i]) return i - 1;
                                    if (i == m.a.gameSettings.levelPointsDistributed[a].length - 1) return i
                                }
                        return -1
                    }
                }, {
                    key: "parseActivationTime",
                    value: function(e, t) {
                        return y.a.upgradeItemTime ? .97 * t.timebar.timeInitial : e.activationTime.toFixed ? t.timebar.timeInitial * e.activationTime : e.activationTime.split("s")[0]
                    }
                }, {
                    key: "getPassiveItemValue",
                    value: function(t) {
                        if (0 == e.isUpgradeOK()) return 0;
                        for (var a = 0; a < e.ITEMS.length; a++)
                            if (e.ITEMS[a].modType == t) {
                                var i = e.getMaxLevelForItem(e.ITEMS[a]);
                                return -1 == i ? 0 : e.ITEMS[a].upgradeVal[i]
                            } return 0
                    }
                }, {
                    key: "isUpgradeOK",
                    value: function() {
                        return (null == m.a.gameSettings.levelEditor || null == m.a.gameSettings.levelEditor.lastLevelEdited) && null == _.a.customPack
                    }
                }, {
                    key: "LevelPoints",
                    get: function() {
                        for (var t = m.a.gameSettings.maxLevelUnlocked[_.a.MODES.SINGLE], a = 0, i = 0; i < e.ITEMS.length; i++)
                            for (var s = 0; s < e.ITEMS[i].upgradePrice.length; s++) a += e.ITEMS[i].upgradePrice[s];
                        return t <= a ? t : a
                    }
                }, {
                    key: "UndistributedLevelPoints",
                    get: function() {
                        for (var t = 0, a = 0; a < m.a.gameSettings.levelPointsDistributed.length; a++)
                            for (var i = 0; i < m.a.gameSettings.levelPointsDistributed[a].length; i++) t += m.a.gameSettings.levelPointsDistributed[a][i];
                        return e.LevelPoints - t
                    }
                }]), e
            }();
        r()(g, "ITEMS", [{
            modType: d.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_SLOW,
            title: "Super slow",
            description: "Slows down bubbles\nDoesn't stack with slow-motion bonus",
            activationTime: .5,
            activationDescr: "Activates when LEVEL TIME reaches it.",
            passive: !1,
            upgradePrice: [4, 3, 3, 3, 1],
            upgradeVal: [3, 3.5, 4, 5, 6],
            rankReq: [1, 2, 4, 5, 6],
            upgradeUnits: "seconds",
            icon: "retention/item_slomo.png"
        }, {
            modType: d.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_PHASE,
            title: "Phase",
            description: "Bubbles can't hurt you. You can't pick up bonuses.",
            activationTime: .5,
            activationDescr: "Activates when LEVEL TIME reaches it.",
            passive: !1,
            upgradePrice: [3, 1, 1],
            upgradeVal: [3, 5, 7],
            rankReq: [2, 5, 6],
            upgradeUnits: "seconds",
            icon: "retention/item_invisible.png"
        }, {
            modType: d.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_LAST_BREATH,
            title: "Last breath",
            description: "If timer runs out, this upgrade will help. Grants additional few seconds of time.",
            activationTime: .035,
            activationDescr: "Activates if you run out of time.",
            passive: !1,
            upgradePrice: [2, 1],
            upgradeVal: [4, 7],
            rankReq: [3, 6],
            upgradeUnits: "seconds",
            icon: "retention/item_finalmoment.png"
        }]), r()(g, "_ITEMS_BS2", [{
            modType: d.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_ETIME,
            title: "EXTRA TIME+",
            description: "extra seconds for the EXTRA TIME BONUS",
            activationTime: .035,
            activationDescr: "",
            passive: !0,
            upgradePrice: [4, 3, 2, 2, 1],
            upgradeVal: [.5, 1, 1.5, 2, 2.5],
            rankReq: [1, 2, 4, 5, 6],
            upgradeUnits: "SEC",
            icon: "retention/item_etime.png"
        }, {
            modType: d.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_FREEZE,
            title: "FREEZE+",
            description: "extra seconds for FREEZE BONUS.",
            activationTime: .035,
            activationDescr: "",
            passive: !0,
            upgradePrice: [3, 3, 3],
            upgradeVal: [.35, .65, 1],
            rankReq: [2, 5, 6],
            upgradeUnits: "SEC",
            icon: "retention/item_freeze.png"
        }, {
            modType: d.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_ITEMLIFE,
            title: "Increased BONUS DROP life",
            description: "More time to pick up BONUS drops",
            activationTime: .5,
            activationDescr: "",
            passive: !0,
            upgradePrice: [2, 2, 2, 2],
            upgradeVal: [.5, 1, 1.5, 2],
            rankReq: [3, 4, 5, 6],
            upgradeUnits: "SEC",
            icon: "retention/item_itemlife.png"
        }, {
            modType: d.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_TANK,
            title: "Spikey shield",
            description: "You hurt bubbles!",
            activationTime: .5,
            activationDescr: "Activates when LEVEL TIME reaches it.",
            passive: !1,
            upgradePrice: [3, 3, 3],
            upgradeVal: [8, 8.5, 9],
            rankReq: [4, 5, 6],
            upgradeUnits: "SEC",
            icon: "retention/item_tank.png"
        }, {
            modType: d.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_MEDAL,
            title: "BONUS MEDAL chance",
            description: "When bubble pops, chance for a BONUS MEDAL drop",
            activationTime: .035,
            activationDescr: "",
            passive: !0,
            upgradePrice: [4, 4, 4],
            upgradeVal: [.1, .2, .3],
            rankReq: [4, 5, 6],
            upgradeUnits: "%",
            icon: "retention/item_medal.png"
        }]), r()(g, "_ITEMS_BS3", [{
            modType: d.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_FREEZE,
            title: "FREEZE+",
            description: "extra seconds for FREEZE BONUS.",
            activationTime: .035,
            activationDescr: "",
            passive: !0,
            upgradePrice: [4, 3, 3, 2, 2],
            upgradeVal: [.2, .4, .6, .8, 1],
            rankReq: [1, 2, 4, 5, 6],
            upgradeUnits: "SEC",
            icon: "retention/item_freeze.png"
        }, {
            modType: d.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_TANK,
            title: "INVINCIBLE SHIELD+",
            description: "INVINCIBLE SHIELD hurts bubbles! And extra seconds",
            activationTime: .5,
            activationDescr: "",
            passive: !0,
            upgradePrice: [3, 3, 3],
            upgradeVal: [.5, 1, 1.5],
            rankReq: [2, 5, 6],
            upgradeUnits: "SEC",
            icon: "retention/item_tank.png"
        }, {
            modType: d.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_LAST_BREATH,
            title: "LAST BREATH",
            description: "Grants a few more seconds, when time runs out.",
            activationTime: .035,
            activationDescr: "Activates when LEVEL TIME drops to 0",
            passive: !1,
            upgradePrice: [3, 3, 3, 3],
            upgradeVal: [4, 5, 6, 7],
            rankReq: [3, 4, 5, 6],
            upgradeUnits: "SEC",
            icon: "retention/item_last_breath.png"
        }, {
            modType: d.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_MEDAL,
            title: "BONUS MEDAL chance",
            description: "When bubble pops, chance for a BONUS MEDAL drop",
            activationTime: .035,
            activationDescr: "",
            passive: !0,
            upgradePrice: [4, 4, 4],
            upgradeVal: [.1, .2, .3],
            rankReq: [4, 5, 6],
            upgradeUnits: "%",
            icon: "retention/item_medal.png"
        }])
    },
    28: function(e, t, a) {
        "use strict";
        t.a = {
            BT1: {
                MAINMENU_START1: "1 PLAYER",
                MAINMENU_START2: "2 PLAYERS",
                MAINMENU_SETTINGS: "SETTINGS",
                MAINMENU_SCORES: "SCORES",
                MAINMENU_QUIT: "QUIT",
                MAINMENU_HELP: "HELP",
                MAINMENU_BRAG: "BRAG",
                SETTINGS_PL1: "PLAYER 1",
                SETTINGS_PL2: "PLAYER 2",
                SETTINGS_BACK: "BACK",
                GAMEOVER_MENU: "MENU",
                PAUSE_BACK: "BACK TO GAME",
                PAUSE_QUIT: "QUIT GAME",
                GAME_COMPLETED: "FINISH",
                REMOVE_ADS: "REMOVE ADS",
                RESTORE_IAP: "RESTORE PURCHASE",
                REVIVE: "REVIVE",
                RESET: "RESET",
                SHARE: "SHARE"
            },
            BS2: {
                MAINMENU_START1: "SINGLE PLAYER",
                MAINMENU_STAYING1: "STAYING ALIVE",
                MAINMENU_START2: "TWO PLAYERS",
                MAINMENU_SETTINGS: "CONTROLS",
                MAINMENU_HELP: "HELP",
                MAINMENU_SCORES: "HIGHSCORES",
                MAINMENU_EDITOR: "LEVEL EDITOR",
                MAINMENU_QUIT: "QUIT",
                MAINMENU_MORELVLS: "MORE LEVELS!",
                MAINMENU_BRAG: "BRAG",
                MENU_BACK: "MENU",
                RESTORE_IAP: "RESTORE PURCHASE",
                EDITOR_NEW_PACK: "CREATE PACK",
                EDITOR_LVLS_MY: "MY LEVELS",
                EDITOR_LVLS_1P: "1P LEVELS",
                EDITOR_LVLS_2P: "2P LEVELS",
                EDITOR_LVLS_IMPORT: "IMPORT",
                EDITOR_BACK: "BACK",
                EDITOR_PACKNAME: "SET PACK NAME",
                CUSTOM_BT25: "MISSION IMPOSSIBLE",
                CUSTOM_MASTERQ: "MASTER QUEST",
                CUSTOM_FEW_MOREDYZ: "FEW MORE DAYZ",
                CUSTOM_BS1_IN_BS2: "BS1 in BS2",
                CUSTOM_BS2_TEAM: "BS2 Teamwork",
                CUSTOM_45_EXPANSION: "45 Expansion",
                CUSTOM_SECOND_TIME: "Second Time",
                CUSTOM_EXPERT_ADV: "Expert Adventures",
                CUSTOM_IMPOSSIBLE_Q: "IMPOSSIBLE QUEST",
                CUSTOM_EMPTY: "- LOAD PACK -"
            },
            BS3: {
                MAINMENU_START1: "SINGLE PLAYER",
                MAINMENU_START2: "TWO PLAYERS",
                MAINMENU_SETTINGS: "CONTROLS",
                MAINMENU_HELP: "HELP",
                MAINMENU_SCORES: "HIGHSCORES",
                MAINMENU_QUIT: "QUIT",
                MAINMENU_BRAG: "BRAG",
                MENU_BACK: "MENU",
                RESTORE_IAP: "RESTORE PURCHASE"
            }
        }
    },
    29: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return m
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(17),
            r = a.n(o),
            h = a(18),
            p = a(2),
            d = a(0),
            y = (a(42), a(8)),
            _ = a(4),
            c = a(24),
            m = (a(14), function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "Init",
                    value: function() {
                        if (p.a.log("MyAnalytics", "Initializing MyAnalytics... Available: ", e._isAvailablePlatform()), e._isAvailablePlatform()) {
                            var t = e.GAME_INFO_WEB;
                            h.a.myTarget == h.a.TARGETS.CORDOVA && (t = "iOS" == device.platform ? e.GAME_INFO_MOBILE_IOS : e.GAME_INFO_MOBILE_ANDROID), p.a.debugLog && (t = e.GAME_INFO_DEBUG), window.GameAnalytics = window.GameAnalytics || function() {
                                (GameAnalytics.q = GameAnalytics.q || []).push(arguments)
                            }, p.a.debugLog && p.a.logAnalytics && (p.a.log("MyAnalytics", "Keys:", t), GameAnalytics("setEnabledInfoLog", !0)), GameAnalytics("initialize", t[d.a.shortName].key, t[d.a.shortName].secret)
                        }
                    }
                }, {
                    key: "LoadSDK",
                    value: function(t) {
                        if (e._isAvailablePlatform()) {
                            var a = "./assets/libs/gameanalytics.min.js";
                            p.a.debugLog && (a = "./assets/libs/gameanalytics.debug.js"), t.load.script("gameanalytics", a)
                        }
                    }
                }, {
                    key: "LogProgression",
                    value: function(t, a) {
                        if (e._isAvailablePlatform() && !a) {
                            var i = e.__getPackName();
                            if (null != i) {
                                var s = "mode_" + y.a.currentMode,
                                    n = "lvl_" + y.a.currentLevel;
                                p.a.log("MyAnalytics", "LogProgression", t, i, s, n), GameAnalytics("addProgressionEvent", t, i, s, n)
                            }
                        }
                    }
                }, {
                    key: "LogDeath",
                    value: function(t, a) {
                        if (e._isAvailablePlatform() && !t) {
                            var i = e.__getPackName();
                            if (null != i) {
                                var s = "mode_" + y.a.currentMode,
                                    n = "lvl_" + y.a.currentLevel;
                                GameAnalytics("addDesignEvent", "FAIL:" + i + ":" + s + ":" + n + ":" + a)
                            }
                        }
                    }
                }, {
                    key: "LogTaskCompleted",
                    value: function(t) {
                        if (e._isAvailablePlatform()) {
                            var a = c.a.CurrentLevel;
                            GameAnalytics("addDesignEvent", "TASK:Rank_" + a + ":" + t.uid)
                        }
                    }
                }, {
                    key: "LogRankUpgrade",
                    value: function() {
                        if (e._isAvailablePlatform()) {
                            var t = c.a.CurrentLevel;
                            GameAnalytics("addDesignEvent", "RANK:Rank_" + t)
                        }
                    }
                }, {
                    key: "LogClick",
                    value: function(t) {
                        e._isAvailablePlatform() && (_.a.gameSettings.loggedClicks.includes(t) || (_.a.gameSettings.loggedClicks.push(t), _.a.saveUserSettings(), GameAnalytics("addDesignEvent", "CLICK:" + t)))
                    }
                }, {
                    key: "__getPackName",
                    value: function() {
                        return null != y.a.customPack ? e._TRACK_PACKS.includes(y.a.customPack.packName) ? "pack_" + y.a.customPack.packName.replace(/ /g, "_") : null : "pack_" + e.__GAME_PACK_NAME
                    }
                }, {
                    key: "_isAvailablePlatform",
                    value: function() {
                        return h.a.myTarget == h.a.TARGETS.POKI || h.a.myTarget == h.a.TARGETS.CORDOVA
                    }
                }]), e
            }());
        r()(m, "__GAME_PACK_NAME", "_builtin_"), r()(m, "GAME_INFO_DEBUG", {
            bt1: {
                key: "09c1297ae5fa769e6f3f18c016110d5d",
                secret: "81b3ee53fe0f9cf851df4efe03dd3f6f0073a448"
            },
            bs2: {
                key: "09c1297ae5fa769e6f3f18c016110d5d",
                secret: "81b3ee53fe0f9cf851df4efe03dd3f6f0073a448"
            },
            bs3: {
                key: "09c1297ae5fa769e6f3f18c016110d5d",
                secret: "81b3ee53fe0f9cf851df4efe03dd3f6f0073a448"
            }
        }), r()(m, "GAME_INFO_WEB", {
            bt1: {
                key: "cd8ac4e764a34e0ad7593e0fdacba2a2",
                secret: "76ae49157cb7bdb82dafe38e025b62debae4e81b"
            },
            bs2: {
                key: "2d73b415de03fe77ee92dce92118da68",
                secret: "176f25b266ac7ace3ebcd253d483def4dbbddacf"
            },
            bs3: {
                key: "c096f38a4039462cebdffecf5f15b9c8",
                secret: "ef4c670bff5d3f2d9ca8b36fb8768e5e85beb08b"
            }
        }), r()(m, "GAME_INFO_MOBILE_ANDROID", {
            bt1: {
                key: "13b6cd302d4402a1b83cca9dad7ae9d0",
                secret: "51ffd4cbf583e46b9b78bcb8eb21790a801d7cd2"
            },
            bs2: {
                key: "16016d089977cb31c37ff1ba63a7b1b1",
                secret: "f7c0fda3d5e7a0df51dc898b2f0d4aeecf47f32b"
            },
            bs3: {
                key: "cb5073e5ab12201059597f33776e02df",
                secret: "64da46a3c7e47c0f7ffcec75ccd1a33d6b830bb1"
            }
        }), r()(m, "GAME_INFO_MOBILE_IOS", {
            bt1: {
                key: "884cc39f436c7f83b664a8cc8c8a6033",
                secret: "9e5a2d97ea7741b9f9cb3b6f7845e7ac61e1154b"
            },
            bs2: {
                key: "c4c4528650937143140d127b3b9bebde",
                secret: "241e2be76296b014fec392b5ce9a9b7347a3f38a"
            },
            bs3: {
                key: "5fd7f124e9160e6226690d1ffdfada5f",
                secret: "c3098265831eab6238f92950dd2e59a013cbe52d"
            }
        }), r()(m, "_TRACK_PACKS", ["45 Expansion", "BS1 in BS2", "BS2 Teamwork", "few more days", "Master Quest", "Mission impossible", "Second Time", "Expert Adventures", "Impossible Quest"]), r()(m, "EVENT", {
            PROGRESSION: {
                START: "Start",
                FAIL: "Fail",
                COMPLETE: "Complete"
            }
        }), r()(m, "CLICK_TYPE", {
            DISCORD: "discord",
            HELP: "help",
            SETTINGS: "settings",
            EDITOR: "editor",
            EDITOR_PLAY: "editor_play",
            UPGRADES: "upgrades",
            MYSKINS: "myskins",
            TASKS: "tasks",
            MORE_LVLS: "more_lvls",
            PACK_LOADED: "pack_loaded",
            SHARE_ALL: "share_all",
            SHARE_RANK: "share_rank",
            SHARE_LEVEL: "share_level"
        })
    },
    3: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = (a(0), a(32)),
            r = a(1),
            h = a(2),
            p = function() {
                function e(t) {
                    s()(this, e), this.gameScene = t, this.goType = r.a.GO_TYPE.NONE, this.myRenderDepth = e.RENDER_DEPTH.UNIMPORTANT, this.mySprite = null, this.mySound = null, this._didPauseSound = !1, this._stateSprites = [], this._stateData = null, this._currentState = o.a.EVENT_STATE.ACTIVE, this._createMyGameObject()
                }
                return l()(e, [{
                    key: "_createMyGameObject",
                    value: function() {
                        e._allGameObjects.push(this)
                    }
                }, {
                    key: "myInit",
                    value: function() {}
                }, {
                    key: "myPreUpdate",
                    value: function(e, t) {}
                }, {
                    key: "myUpdate",
                    value: function(e, t) {}
                }, {
                    key: "myOnPause",
                    value: function(e) {
                        null != this.mySound && (e && this.mySound.isPlaying ? (this.mySound.pause(), this._didPauseSound = !0) : this._didPauseSound && (this._didPauseSound = !1, this.mySound.play()))
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        null != this.mySprite && this.mySprite.destroy(), null != this.mySound && this.mySound.stop();
                        for (var t = 0; t < e._allGameObjects.length; t++)
                            if (e._allGameObjects[t] === this) {
                                e._allGameObjects.splice(t, 1);
                                break
                            }
                    }
                }, {
                    key: "onReceiveMyEvent",
                    value: function(e, t) {}
                }, {
                    key: "_onReceiveMyState",
                    value: function(e, t) {
                        var a = this;
                        if (e == this._stateData.stateEvtType && t == this._stateData.stateEvtInfo)
                            if (this._stateData.stateStart == o.a.EVENT_STATE.INACTIVE && 0 == this.pbActive) this.gameScene.add.tween({
                                targets: this._stateSprites,
                                alpha: 1,
                                duration: 350,
                                onComplete: function() {
                                    for (var e in a.pbActive = !0, a._currentState = o.a.EVENT_STATE.ACTIVE, a.gameScene.itemManager.allModifiers)
                                        if (e == r.a.ITEM_MANAGER.MOD_TYPE.FREEZE) {
                                            a.goType == r.a.GO_TYPE.BALL ? (a.mySprite.alpha = .5, a.isStatic = !0) : a.goType != r.a.GO_TYPE.WALL || a._wallInfo.t != r.a.WALL.WALL_TYPE.CAVEIN_BS3 && a._wallInfo.t != r.a.WALL.WALL_TYPE.MOVING || (a._frozen = !0);
                                            break
                                        } a._onStateChanged(a._currentState)
                                }
                            });
                            else if (this._stateData.stateStart == o.a.EVENT_STATE.ACTIVE && 1 == this.pbActive) {
                            this.pbActive = !1, this._currentState = o.a.EVENT_STATE.INACTIVE;
                            var i = this;
                            this.gameScene.add.tween({
                                targets: this._stateSprites,
                                alpha: 0,
                                duration: 350,
                                onComplete: function() {
                                    i._onStateChanged(i._currentState), i.goType == r.a.GO_TYPE.BALL && i.gameScene.ballManager.removeBall(i)
                                }
                            })
                        }
                    }
                }, {
                    key: "_onStateChanged",
                    value: function(e) {}
                }, {
                    key: "_initializeStateEvent",
                    value: function() {
                        null != this._ballInfo && null != this._ballInfo.stateData ? (this._stateData = this._ballInfo.stateData, null != this.mySprite && this._stateSprites.push(this.mySprite)) : null != this._wallInfo && null != this._wallInfo.stateData && (this._stateData = this._wallInfo.stateData, null != this.mySprite && (null != this.mySprite.ninePatch ? this._stateSprites.push(this.mySprite.ninePatch) : this._stateSprites.push(this.mySprite)), null != this._spikeySprite && this._stateSprites.push(this._spikeySprite)), null != this._stateData && (this.gameScene.myEventManager.registerForState(this, this._stateData), this._stateData.stateStart == o.a.EVENT_STATE.INACTIVE && (this._stateSprites.forEach((function(e) {
                            return e.alpha = 0
                        })), this.pbActive = !1, this._currentState = o.a.EVENT_STATE.INACTIVE, this._onStateChanged(this._currentState)))
                    }
                }, {
                    key: "makeDepthAndScale",
                    value: function(t) {
                        var a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                        e.mySpriteScale(t, a), e.mySpriteDepth(this.myRenderDepth, t)
                    }
                }], [{
                    key: "mySpriteScale",
                    value: function(e, t) {
                        e.scale = t
                    }
                }, {
                    key: "mySpriteDepth",
                    value: function(t, a) {
                        null == e._depths[t] && e.myInitialize(), e._depths[t]++, e._depths[t] > 999 && (e._depths[t] = 0);
                        var i = e._depths[t];
                        switch (t) {
                            case e.RENDER_DEPTH.UNDER_GAME:
                                return a.setDepth(i + 3e3);
                            case e.RENDER_DEPTH.GAME:
                                return a.setDepth(i + 8e3);
                            case e.RENDER_DEPTH.LADDER:
                                return a.setDepth(i + 9e3);
                            case e.RENDER_DEPTH.PLAYER:
                                return a.setDepth(i + 1e4);
                            case e.RENDER_DEPTH.OVER_GAME:
                                return a.setDepth(i + 12e3);
                            case e.RENDER_DEPTH.BALL:
                                return a.setDepth(i + 14e3);
                            case e.RENDER_DEPTH.UIBACK:
                                return a.setDepth(i + 15e3);
                            case e.RENDER_DEPTH.UI:
                                return a.setDepth(i + 17e3);
                            case e.RENDER_DEPTH.UI_DROPDOWN:
                                return a.setDepth(i + 18e3);
                            case e.RENDER_DEPTH.UIOVER:
                                return a.setDepth(i + 19e3);
                            case e.RENDER_DEPTH.PAUSE_MENU:
                                return a.setDepth(i + 25e3);
                            case e.RENDER_DEPTH.TUTORIAL_POPUP:
                                return a.setDepth(i + 29e3);
                            case e.RENDER_DEPTH.CONTINUE_MENU:
                                return a.setDepth(i + 3e4);
                            case e.RENDER_DEPTH.GAME_POPUP:
                                return a.setDepth(i + 31e3);
                            case e.RENDER_DEPTH.TRANSITION:
                                return a.setDepth(i + 32e3);
                            case e.RENDER_DEPTH.FILLER_AD:
                                return a.setDepth(i + 34e3);
                            case e.RENDER_DEPTH.PHY_DEBUG:
                                return a.setDepth(i + 36e3)
                        }
                        h.a.error("Coulnd't set depth for :" + t)
                    }
                }, {
                    key: "myInitialize",
                    value: function() {
                        for (var t in e._allGameObjects = [], e._depths = {}, e.RENDER_DEPTH) e._depths[e.RENDER_DEPTH[t]] = 0
                    }
                }, {
                    key: "doOnPause",
                    value: function(t) {
                        e._allGameObjects.forEach((function(e) {
                            e.myOnPause(t)
                        }))
                    }
                }, {
                    key: "doPreUpdate",
                    value: function(t, a) {
                        e._allGameObjects.forEach((function(e) {
                            e.myPreUpdate(t, a)
                        }))
                    }
                }, {
                    key: "doUpdate",
                    value: function(t, a) {
                        e._allGameObjects.forEach((function(e) {
                            e.myUpdate(t, a)
                        }))
                    }
                }]), e
            }();
        p.RENDER_DEPTH = {
            UNIMPORTANT: "notimp",
            UNDER_GAME: "undergame",
            GAME: "game",
            LADDER: "ladder",
            PLAYER: "player",
            BALL: "ball",
            OVER_GAME: "overgame",
            UIBACK: "uiback",
            UI: "ui",
            UI_DROPDOWN: "ui_dd",
            UIOVER: "uiover",
            PAUSE_MENU: "pausemenu",
            TUTORIAL_POPUP: "tut_popup",
            CONTINUE_MENU: "contmenu",
            GAME_POPUP: "game_popup",
            FILLER_AD: "filler_ad",
            TRANSITION: "transition",
            PHY_DEBUG: "phydebug"
        }, p._depths = {}, p._allGameObjects = [], t.a = p
    },
    30: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(49),
            c = a(16),
            m = a(3),
            u = a(0),
            g = a(22),
            v = a(23),
            f = a(1),
            S = function(e) {
                function t(e, a) {
                    var i;
                    s()(this, t);
                    var n = new c.a(a.x, a.y),
                        l = new c.a(a.w, a.h),
                        o = new c.a(n.x - l.x / 2, n.y - l.y / 2),
                        h = new c.a(n.x + l.x / 2, n.y + l.y / 2),
                        d = g.a.LAYER.WALL;
                    return a.t == f.a.WALL.WALL_TYPE.TELEPORT && (d = g.a.LAYER.TELEPORT), (i = r()(this, p()(t).call(this, e, d, g.a.LAYERS_WALL, o, h, {
                        isStatic: !0
                    })))._eventType = a.eType || null, i._eventInfo = a.eInfo || null, i.wallType = f.a.WALL.WALL_TYPE.NORMAL, i._softWall = !1, null != a.softWall && (i._softWall = a.softWall), i._invisWall = !1, null != a.invisWall && (i._invisWall = a.invisWall), i._invisWallTimer = null, i._INVIS_TIMER = 1.2, i._isSpikey = a.spikey || !1, i._spikeySprite = null, i._wallInfo = a, i._collisionPriority = -1, i
                }
                return y()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        return this.goType = f.a.GO_TYPE.WALL, this.myRenderDepth = m.a.RENDER_DEPTH.GAME, null != this._eventType && this.gameScene.myEventManager.registerForEvent(this, this._eventType), this._isSpikey && (this._spikeySprite = t.GetSpikeySprite(this.gameScene, this._wallInfo.w, this._wallInfo.h), this._spikeySprite.x = this._wallInfo.x, this._spikeySprite.y = this._wallInfo.y + this._wallInfo.h / 2, m.a.mySpriteDepth(m.a.RENDER_DEPTH.GAME, this._spikeySprite)), this.drawWall(), this
                    }
                }, {
                    key: "drawWall",
                    value: function() {
                        if (u.a.isBT) this.mySprite = this.gameScene.add.tileSprite(this.pos.x - this.sizeHalf.x, this.pos.y - this.sizeHalf.y, this.size.x, this.size.y, u.a.spriteKey, "ui/back_brick.png"), this.mySprite.setDisplayOrigin(0, 0), this.makeDepthAndScale(this.mySprite);
                        else if (u.a.isBS2) {
                            this.mySprite = new v.a(this.gameScene, this.pos.x, this.pos.y, this.size.x, this.size.y, "walls/basic.png", {
                                top: 7,
                                bottom: 7,
                                left: 7,
                                right: 7
                            }), this.mySprite.setDepthNinePatch(this.myRenderDepth), this.showInvisibleWall(!1)
                        } else u.a.isBS3 && (this.mySprite = this.gameScene.add.tileSprite(this.pos.x - this.sizeHalf.x, this.pos.y - this.sizeHalf.y, this.size.x, this.size.y, u.a.spriteKey, "walls/basic.png"), this.mySprite.setDisplayOrigin(0, 0), this.makeDepthAndScale(this.mySprite))
                    }
                }, {
                    key: "showInvisibleWall",
                    value: function(e) {
                        0 != this._invisWall && (null != this._invisWallTimer && this._invisWallTimer.remove(), this.mySprite.ninePatch ? this.mySprite.setVisibleNinePatch(e) : this.mySprite.visible = e, this._spikeySprite && (this._spikeySprite.visible = e), e && (this._invisWallTimer = this.gameScene.time.addEvent({
                            delay: 1e3 * this._INVIS_TIMER,
                            callbackScope: this,
                            callback: function() {
                                this.showInvisibleWall(!1)
                            }
                        })))
                    }
                }], [{
                    key: "GetSpikeySprite",
                    value: function(e, t, a) {
                        var i = e.add.tileSprite(0, 0, t, 5, u.a.spriteKey, "walls/wall_spikey.psd");
                        return i.setOrigin(.5, 0), i.y = a / 2, i
                    }
                }]), t
            }(_.a);
        t.a = S
    },
    31: function(e, t, a) {
        "use strict";

        function i() {}
        i.REBUBBLED_HOMEPAGE = "https://rebubbled.com", i.REBUBBLED_HOMEPAGE_SHORT = "rebubbled.com", i.BSA_HOMEPAGE = "https://bubble-adventures.com", i.BSA_APPLE = "https://itunes.apple.com/app/id947676130", i.BSA_GOOGLE = "https://play.google.com/store/apps/details?id=com.rebubbled.bubblestruggle", i.BTC_APPLE = "https://itunes.apple.com/app/id1453111037", i.BTC_GOOGLE = "https://play.google.com/store/apps/details?id=com.kresogames.bubbletrouble", i.BS2_APPLE = "https://itunes.apple.com/app/id1643027061", i.BS2_GOOGLE = "https://play.google.com/store/apps/details?id=com.kresogames.bubblestruggle2", i.BS3_APPLE = "https://itunes.apple.com/app/id1643029539", i.BS3_GOOGLE = "https://play.google.com/store/apps/details?id=com.kresogames.bubbletrouble3", i.GAME_SUPERVISOR_HOST = "https://kresogames.com", i.GAME_SUPERVISOR = i.GAME_SUPERVISOR_HOST + "/game_supervisor.php", i.DISCORD_INTRODUCEYOURSELF_CHANNEL = "https://discord.gg/9g7dsQ2kYN", i.PRIVACY_POLICY = {
            BT1: "https://kresogames.com/policy/bubble_trouble.php",
            BS2: "https://kresogames.com/policy/bubble_struggle_2.php",
            BS3: "https://kresogames.com/policy/bubble_trouble_3.php"
        }, t.a = i
    },
    32: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = (a(3), a(2)),
            r = function() {
                function e(t) {
                    s()(this, e), this.gameScene = t, this._registeredEventReceivers = {}, this._registeredStateReceivers = {}
                }
                return l()(e, [{
                    key: "registerForEvent",
                    value: function(e, t) {
                        this._registeredEventReceivers[t] = this._registeredEventReceivers[t] || [], this._registeredEventReceivers[t].push(e)
                    }
                }, {
                    key: "registerForState",
                    value: function(e, t) {
                        var a = t.stateEvtType;
                        this._registeredStateReceivers[a] = this._registeredStateReceivers[a] || [], this._registeredStateReceivers[a].push(e)
                    }
                }, {
                    key: "dispatchEvent",
                    value: function(e, t) {
                        o.a.log("MyEventManager", "DispatchEvent", e, t), null != this._registeredEventReceivers[e] && this._registeredEventReceivers[e].forEach((function(a) {
                            a.onReceiveMyEvent(e, t)
                        })), null != this._registeredStateReceivers[e] && this._registeredStateReceivers[e].forEach((function(a) {
                            a._onReceiveMyState(e, t)
                        }))
                    }
                }]), e
            }();
        r.EVENT_TYPE = {
            NONE: "none",
            COLOR_POPPED: "color_popped",
            ALL_POPPED: "allpopped",
            TIME_END: "time_end",
            GAME_START: "gamestart",
            GAME_LOADED: "gameloaded",
            TUT_WATCHED: "tut_watched",
            PLAYER_DIED: "player_died"
        }, r.EVENT_STATE = {
            NONE: "none",
            ACTIVE: "act",
            INACTIVE: "inact"
        }, t.a = r
    },
    36: function(e, t, a) {
        "use strict";
        var i = a(449),
            s = a.n(i),
            n = a(5),
            l = a.n(n),
            o = a(6),
            r = a.n(o),
            h = a(17),
            p = a.n(h),
            d = (a(21), a(2)),
            y = function() {
                function e() {
                    l()(this, e)
                }
                return r()(e, null, [{
                    key: "_registerSceneButton",
                    value: function(t) {
                        t.myScene.hasOwnProperty("scene") && (e._activeScene = t.btnGroup, e._sceneButtons.hasOwnProperty(t.btnGroup) || (e._sceneButtons[t.btnGroup] = []), e._addedListenerToScene || (e._addedListenerToScene = !0, t.myScene.sys.events.once("shutdown", e._destroyScene), t.myScene.input.keyboard.on("keydown-LEFT", e._moveSelectedCursor.bind(null, "L")), t.myScene.input.keyboard.on("keydown-RIGHT", e._moveSelectedCursor.bind(null, "R")), t.myScene.input.keyboard.on("keydown-UP", e._moveSelectedCursor.bind(null, "U")), t.myScene.input.keyboard.on("keydown-DOWN", e._moveSelectedCursor.bind(null, "D")), t.myScene.input.keyboard.on("keydown-SPACE", e._triggerSelectedButton), t.myScene.input.keyboard.on("keydown-ENTER", e._triggerSelectedButton)), e._sceneButtons[t.btnGroup].push(t))
                    }
                }, {
                    key: "_unregisterSceneButton",
                    value: function(t) {
                        null != e._sceneButtons && null != e._sceneButtons[t.btnGroup] && delete e._sceneButtons[t.btnGroup]
                    }
                }, {
                    key: "_destroyScene",
                    value: function() {
                        d.a.log("EXTEND KEYBOARD", "_destroyScene"), e._activeScene = null, e._sceneButtons = {}, e._addedListenerToScene = !1
                    }
                }, {
                    key: "_triggerSelectedButton",
                    value: function(t) {
                        if (!e._disableAllButtons) {
                            null != t && t.stopImmediatePropagation();
                            var a = e._getSelectedBtn();
                            a && a.actionClick()
                        }
                    }
                }, {
                    key: "_moveSelectedCursor",
                    value: function(t) {
                        if (!e._disableAllButtons) {
                            var a = e._getSelectedBtn();
                            if (null != a) {
                                var i = s()(e._sceneButtons[e._activeScene]),
                                    n = [],
                                    l = n.indexOf(a);
                                if (-1 !== l && n.splice(l, 1), i.forEach((function(e) {
                                        ("L" == t && e.mid_x < a.mid_x || "R" == t && e.mid_x > a.mid_x || "U" == t && e.mid_y < a.mid_y || "D" == t && e.mid_y > a.mid_y) && n.push(e)
                                    })), 0 != n.length) {
                                    var o = function(e) {
                                        return Math.pow(a.mid_x - e.mid_x, 2) + Math.pow(a.mid_y - e.mid_y, 2)
                                    };
                                    n.sort((function(e, t) {
                                        var a = o(e),
                                            i = o(t);
                                        if (a < i) return -1;
                                        if (i < a) return 1;
                                        if (a == i) {
                                            if (e.mid_y < t.mid_y) return -1;
                                            if (t.mid_y < e.mid_y) return 1
                                        }
                                        return 0
                                    }));
                                    var r = e._getFirstWithinAngle(t, a, n);
                                    null == r && (r = n[0]), e.selectButton(r)
                                }
                            }
                        }
                    }
                }, {
                    key: "_getFirstWithinAngle",
                    value: function(e, t, a) {
                        function i(e) {
                            return e < 360 ? i(e += 360) : e > 720 ? i(e -= 360) : e
                        }
                        var s = 0;
                        "L" == e ? s = 180 : "D" == e ? s = 90 : "U" == e && (s = 270);
                        for (var n = i(s - 44), l = i(s + 44), o = 0; o < a.length; o++) {
                            var r = a[o];
                            if (r.isVisible) {
                                var h = 180 * Math.atan2(r.mid_y - t.mid_y, r.mid_x - t.mid_x) / Math.PI;
                                if ((h = i(h)) > n && h < l) return r
                            }
                        }
                        return null
                    }
                }, {
                    key: "_getSelectedBtn",
                    value: function() {
                        var t = e._sceneButtons[e._activeScene];
                        if (null == t) return null;
                        for (var a = 0; a < t.length; a++)
                            if (t[a].focused && t[a].isVisible && t[a].btnGroup == e._activeScene) return t[a];
                        return null
                    }
                }, {
                    key: "selectButton",
                    value: function(t) {
                        var a = e._getSelectedBtn();
                        return !!t.isVisible && (null != a && t != a && (a.focused = !1, a._drawButton(), a.actionHoverOff()), t.focused = !0, t._drawButton(), t.actionHoverOn(), !0)
                    }
                }, {
                    key: "disableAllButtons",
                    value: function(t) {
                        e._disableAllButtons = t
                    }
                }, {
                    key: "changeActiveScene",
                    value: function(t) {
                        d.a.log("BTN", "Changing scene from", e._activeScene, "to", t.scene.key), e._activeScene = t.scene.key
                    }
                }]), e
            }();
        p()(y, "_sceneButtons", {}), p()(y, "_activeScene", null), p()(y, "_addedListenerToScene", !1), p()(y, "_disableAllButtons", !1), t.a = y
    },
    37: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(19),
            p = a.n(h),
            d = a(7),
            y = a.n(d),
            _ = a(11),
            c = a.n(_),
            m = a(3),
            u = a(9),
            g = a(0),
            v = a(2),
            f = a(4),
            S = a(8),
            E = a(18),
            x = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, [{
                    key: "init",
                    value: function(e) {
                        return this.inputManager = e.input.manager, this._breakBetweenAds = 0, this._timerLastAdShown = Math.round(Date.now() / 1e3), this._noAdsBeforeLevel = 2, this._adInterstitialPreloaded = !1, this._adRewardedPreloaded = !1, this
                    }
                }, {
                    key: "showAd",
                    value: function(e, t, a) {
                        this.inputManager.keyboard.enabled = !1
                    }
                }, {
                    key: "cleanUpAdView",
                    value: function() {
                        this.inputManager.keyboard.enabled = !0
                    }
                }, {
                    key: "isAdBreak",
                    value: function() {
                        if (f.a.gameSettings.maxLevelUnlocked[S.a.MODES.SINGLE] <= this._noAdsBeforeLevel && f.a.gameSettings.maxLevelUnlocked[S.a.MODES.TWOP] <= this._noAdsBeforeLevel) return !0;
                        if (this._breakBetweenAds > 0) {
                            var e = Math.round(Date.now() / 1e3);
                            return !(e > this._timerLastAdShown + this._breakBetweenAds) || (this._timerLastAdShown = e, !1)
                        }
                        return !1
                    }
                }, {
                    key: "preloadAds",
                    value: function() {}
                }]), e
            }(),
            T = function(e) {
                function t() {
                    return s()(this, t), r()(this, y()(t).apply(this, arguments))
                }
                return c()(t, e), l()(t, [{
                    key: "init",
                    value: function(e) {
                        return p()(y()(t.prototype), "init", this).call(this, e), this.firstTimeRun = !0, this
                    }
                }, {
                    key: "showAd",
                    value: function(e, a, i) {
                        var s = this;
                        p()(y()(t.prototype), "showAd", this).call(this, e, a, i), v.a.log("AD", "Showing POKI ad."), this.no_click_background = new u.a(e, -g.a.gameWidth, -g.a.gameHeight, g.a.spriteKey, "ui/black.png", 1, m.a.RENDER_DEPTH.FILLER_AD), this.no_click_background.alpha = .01, this.no_click_background.setDisplaySize(3 * g.a.gameWidth, 3 * g.a.gameHeight), this.no_click_background.setDisplayOrigin(.5), this.no_click_background.setInteractive(), a == D.PLACEMENTS.INTERSTITIAL ? PokiSDK.commercialBreak().then((function() {
                            v.a.log("AD", "Commercial break finished, proceeding to game"), p()(y()(t.prototype), "cleanUpAdView", s).call(s), null != i && i(), s.no_click_background.destroy()
                        })) : a == D.PLACEMENTS.REWARD && PokiSDK.rewardedBreak().then((function(e) {
                            v.a.log("AD", "Commercial break finished, proceeding to game"), p()(y()(t.prototype), "cleanUpAdView", s).call(s), null != i && i(e), s.no_click_background.destroy()
                        }))
                    }
                }, {
                    key: "isAdBreak",
                    value: function() {
                        return this.firstTimeRun ? (this.firstTimeRun = !1, !1) : p()(y()(t.prototype), "isAdBreak", this).call(this)
                    }
                }]), t
            }(x),
            b = a(105),
            k = a.n(b),
            w = a(133),
            I = a.n(w),
            P = a(104),
            A = function(e) {
                function t() {
                    var e;
                    return s()(this, t), (e = r()(this, y()(t).call(this)))._callbackReference = null, e._rewardReference = !1, e.interstitial_id = "989530068639301_1138323570426616", e.rewarded_id = "989530068639301_1053162418942732", v.a.log("AD", "API", FBInstant.getSupportedAPIs()), e.fbInterstitialAd = null, e.fbRewardedAd = null, e._adInterstitialPreloaded = !1, e._adRewardedPreloaded = !1, e._FB_PRELOAD_FREQUENCY = 30, e._lastFbPreloadRequestTime = 0, e
                }
                var a, i;
                return c()(t, e), l()(t, [{
                    key: "init",
                    value: function(e) {
                        return p()(y()(t.prototype), "init", this).call(this, e), this._breakBetweenAds = 120, this.preloadAds(), this
                    }
                }, {
                    key: "showAd",
                    value: (i = I()(k.a.mark((function e(t, a, i) {
                        var s;
                        return k.a.wrap((function(e) {
                            for (;;) switch (e.prev = e.next) {
                                case 0:
                                    if (this._callbackReference = i, this._rewardReference = !1, v.a.log("AD", "Cordova showAd", a, t), s = this, a != D.PLACEMENTS.INTERSTITIAL || !this._adInterstitialPreloaded) {
                                        e.next = 11;
                                        break
                                    }
                                    return v.a.log("AD", "Actually showing interstitial admob"), this._adInterstitialPreloaded = !1, this.fbInterstitialAd.showAsync().then((function() {
                                        v.a.log("AD", "Interstitial ad showed successfully"), s.doCallback()
                                    })).catch((function(e) {
                                        v.a.log("AD", "Interstitial ad NOT showed successfully"), v.a.log("AD", "ERR MSG:", e.message), s.doCallback()
                                    })), e.abrupt("return");
                                case 11:
                                    if (a != D.PLACEMENTS.REWARD || !this._adRewardedPreloaded) {
                                        e.next = 16;
                                        break
                                    }
                                    return v.a.log("AD", "Actually showing rewarded admob"), this._adRewardedPreloaded = !1, this.fbRewardedAd.showAsync().then((function() {
                                        v.a.log("AD", "Rewarded ad showed successfully"), s._rewardReference = !0, s.doCallback()
                                    })).catch((function(e) {
                                        v.a.log("AD", "Rewarded ad NOT showed successfully"), v.a.log("AD", "ERR MSG:", e.message), s.doCallback()
                                    })), e.abrupt("return");
                                case 16:
                                    v.a.log("AD", "Dont have a FB ad ready, next try reloading them. And try showing the filler ad."), this.preloadAds(), P.a.spawnFillerAd(t, a, i, !0);
                                case 19:
                                case "end":
                                    return e.stop()
                            }
                        }), e, this)
                    }))), function(e, t, a) {
                        return i.apply(this, arguments)
                    })
                }, {
                    key: "preloadAds",
                    value: (a = I()(k.a.mark((function e(t) {
                        var a, i;
                        return k.a.wrap((function(e) {
                            for (;;) switch (e.prev = e.next) {
                                case 0:
                                    if (v.a.log("AD", "FB Preloading ads..."), !((a = Math.floor(Date.now() / 1e3)) - this._lastFbPreloadRequestTime < this._FB_PRELOAD_FREQUENCY)) {
                                        e.next = 5;
                                        break
                                    }
                                    return v.a.log("AD", "FB not preloading since not enough seconds passed. FB limitation is 1 preload call per seconds:" + this._FB_PRELOAD_FREQUENCY), e.abrupt("return");
                                case 5:
                                    this._lastFbPreloadRequestTime = a, i = this, this._adRewardedPreloaded || FBInstant.getRewardedVideoAsync(this.rewarded_id).then((function(e) {
                                        return v.a.log("AD", "GOT REWARDED FB"), i.fbInterstitialAd = e, i.fbInterstitialAd.loadAsync().then((function() {
                                            v.a.log("AD", "REWARDED LOADED."), i._adRewardedPreloaded = !0
                                        }))
                                    })).then((function() {
                                        v.a.log("AD", "Rewarded video preloaded")
                                    })).catch((function(e) {
                                        v.a.error("AD", "Rewarded video failed to preload: " + e.message, e)
                                    })), this._adInterstitialPreloaded || FBInstant.getInterstitialAdAsync(this.interstitial_id).then((function(e) {
                                        return v.a.log("AD", "GOT INTERSTITIAL FB"), i.fbRewardedAd = e, i.fbRewardedAd.loadAsync().then((function() {
                                            v.a.log("AD", "INTERSTITIAL LOADED."), i._adInterstitialPreloaded = !0
                                        }))
                                    })).then((function() {
                                        v.a.log("AD", "Interstitial preloaded")
                                    })).catch((function(e) {
                                        v.a.error("AD", "Interstitial failed to preload: " + e.message, e)
                                    }));
                                case 9:
                                case "end":
                                    return e.stop()
                            }
                        }), e, this)
                    }))), function(e) {
                        return a.apply(this, arguments)
                    })
                }, {
                    key: "doCallback",
                    value: function() {
                        null != this._callbackReference && (this._callbackReference(this._rewardReference), this._callbackReference = null, this._rewardReference = !1)
                    }
                }]), t
            }(x),
            L = function(e) {
                function t() {
                    var e;
                    return s()(this, t), (e = r()(this, y()(t).call(this)))._callbackReference = null, e._rewardReference = !1, e.ADID_DEBUG = {
                        ios: {
                            interstitial: "ca-app-pub-3940256099942544/1033173712",
                            rewarded: "ca-app-pub-3940256099942544/5224354917"
                        },
                        android: {
                            interstitial: "ca-app-pub-3940256099942544/1033173712",
                            rewarded: "ca-app-pub-3940256099942544/5224354917"
                        }
                    }, e.ADID_BT1 = {
                        ios: {
                            interstitial: "ca-app-pub-8079897977490520/9200723749",
                            rewarded: "ca-app-pub-8079897977490520/2771046767"
                        },
                        android: {
                            interstitial: "ca-app-pub-8079897977490520/7831801750",
                            rewarded: "ca-app-pub-8079897977490520/7640230067"
                        }
                    }, e.ADID_BS2 = {
                        ios: {
                            interstitial: "ca-app-pub-8079897977490520/2870608018",
                            rewarded: "ca-app-pub-8079897977490520/4321885514"
                        },
                        android: {
                            interstitial: "ca-app-pub-8079897977490520/8286015406",
                            rewarded: "ca-app-pub-8079897977490520/2547174385"
                        }
                    }, e.ADID_BS3 = {
                        ios: {
                            interstitial: "ca-app-pub-8079897977490520/6370869328",
                            rewarded: "ca-app-pub-8079897977490520/9791239589"
                        },
                        android: {
                            interstitial: "ca-app-pub-8079897977490520/6562441013",
                            rewarded: "ca-app-pub-8079897977490520/9982811274"
                        }
                    }, e.gameIDS = e.ADID_BT1, e.admobIDS = {}, e.admobInterstitialAd = null, e.admobRewardedAd = null, e._adInterstitialPreloaded = !1, e._adRewardedPreloaded = !1, v.a.debugLog && (document.addEventListener("admob.interstitial.close", (function(e) {
                        console.log("?AD INTERSTITIAL", "close" + JSON.stringify(e))
                    })), document.addEventListener("admob.interstitial.loadFail", (function(e) {
                        console.log("?AD INTERSTITIAL", "loadFail" + JSON.stringify(e))
                    })), document.addEventListener("admob.rewarded.open", (function(e) {
                        console.log("?AD REWARDED", "open" + JSON.stringify(e))
                    })), document.addEventListener("admob.rewarded.loadFail", (function(e) {
                        console.log("?AD REWARDED", "loadFail" + JSON.stringify(e))
                    })), document.addEventListener("admob.rewarded.showFail", (function(e) {
                        console.log("?AD REWARDED", "showFail" + JSON.stringify(e))
                    })), document.addEventListener("admob.rewarded.close", (function(e) {
                        console.log("?AD REWARDED", "close" + JSON.stringify(e))
                    })), document.addEventListener("admob.rewarded.reward", (function(e) {
                        console.log("?AD REWARDED", "reward" + JSON.stringify(e))
                    }))), e
                }
                var a;
                return c()(t, e), l()(t, [{
                    key: "init",
                    value: function(e) {
                        if (p()(y()(t.prototype), "init", this).call(this, e), this._breakBetweenAds = 120, g.a.isBS2 ? this.gameIDS = this.ADID_BS2 : g.a.isBS3 && (this.gameIDS = this.ADID_BS3), v.a.useAdMobTestAds) {
                            v.a.log("ADS", "Trying to use test ads...");
                            admob.configure({
                                testDeviceIds: ["362f94af12a3b64b98d54ce227cd7fef", "D79CDF96D1DF8F394DB0D4CD9DD0965D"]
                            }), this.gameIDS = this.ADID_DEBUG
                        }
                        /(android)/i.test(navigator.userAgent) ? this.admobIDS = {
                            interstitial: this.gameIDS.android.interstitial,
                            rewarded: this.gameIDS.android.rewarded
                        } : /(ipod|iphone|ipad)/i.test(navigator.userAgent) ? this.admobIDS = {
                            interstitial: this.gameIDS.ios.interstitial,
                            rewarded: this.gameIDS.ios.rewarded
                        } : this.admobIDS = {
                            interstitial: this.gameIDS.android.interstitial,
                            rewarded: this.gameIDS.android.rewarded
                        }, v.a.log("ADS", "Using admobIDS:", this.admobIDS), this.admobInterstitialAd = new admob.InterstitialAd({
                            adUnitId: this.admobIDS.interstitial
                        }), this.admobRewardedAd = new admob.RewardedAd({
                            adUnitId: this.admobIDS.rewarded
                        });
                        var a = this;
                        return v.a.log("Inited Cordova ads."), this.admobInterstitialAd.on("load", (function(e) {
                            v.a.log("AD EVT", "Success load interstitial ad.", a.admobInterstitialAd, e), a._adInterstitialPreloaded = !0
                        })), this.admobInterstitialAd.on("showfail", (function(e) {
                            v.a.log("AD EVT", "Interstitial event showfail", e), a.doCallback()
                        })), this.admobInterstitialAd.on("dismiss", (function(e) {
                            v.a.log("AD EVT", "Interstitial event dismiss", e), a.doCallback()
                        })), this.admobRewardedAd.on("load", (function(e) {
                            v.a.log("AD EVT", "Success load rewarded ad.", a.admobRewardedAd, e), a._adRewardedPreloaded = !0
                        })), this.admobRewardedAd.on("showfail", (function(e) {
                            v.a.log("AD EVT", "Rewarded event showfail", e), a.doCallback(!1)
                        })), this.admobRewardedAd.on("reward", (function(e) {
                            v.a.log("AD EVT", "reward", "Rewarded event reward", e), a._rewardReference = !0
                        })), this.admobRewardedAd.on("dismiss", (function(e) {
                            v.a.log("AD EVT", "reward", "Rewarded event dismiss", e), a.doCallback()
                        })), v.a.debugLog && (this.admobInterstitialAd.on("loadfail", (function(e) {
                            v.a.log("AD EVT", "Interstitial event loadfail", e)
                        })), this.admobInterstitialAd.on("show", (function(e) {
                            v.a.log("AD EVT", "Interstitial event show", e)
                        })), this.admobInterstitialAd.on("impression", (function(e) {
                            v.a.log("AD EVT", "Interstitial event impression", e)
                        })), this.admobRewardedAd.on("loadfail", (function(e) {
                            v.a.log("AD EVT", "Rewarded event loadfail", e)
                        })), this.admobRewardedAd.on("show", (function(e) {
                            v.a.log("AD EVT", "Rewarded event show", e)
                        })), this.admobRewardedAd.on("impression", (function(e) {
                            v.a.log("AD EVT", "reward", "Rewarded event impression", e)
                        }))), this.preloadAds(), this
                    }
                }, {
                    key: "showAd",
                    value: (a = I()(k.a.mark((function e(t, a, i) {
                        return k.a.wrap((function(e) {
                            for (;;) switch (e.prev = e.next) {
                                case 0:
                                    if (this._callbackReference = i, this._rewardReference = !1, v.a.log("AD", "Cordova showAd", a, t), a != D.PLACEMENTS.INTERSTITIAL || !this._adInterstitialPreloaded) {
                                        e.next = 10;
                                        break
                                    }
                                    return v.a.log("AD", "Actually showing interstitial admob"), this.admobInterstitialAd.show(), this._adInterstitialPreloaded = !1, e.abrupt("return");
                                case 10:
                                    if (a != D.PLACEMENTS.REWARD || !this._adRewardedPreloaded) {
                                        e.next = 15;
                                        break
                                    }
                                    return v.a.log("AD", "Actually showing rewarded admob"), this.admobRewardedAd.show(), this._adRewardedPreloaded = !1, e.abrupt("return");
                                case 15:
                                    v.a.log("AD", "Dont have an admob ready, next try reloading them. And try showing the filler ad."), this.preloadAds(), P.a.spawnFillerAd(t, a, i, !0);
                                case 18:
                                case "end":
                                    return e.stop()
                            }
                        }), e, this)
                    }))), function(e, t, i) {
                        return a.apply(this, arguments)
                    })
                }, {
                    key: "preloadAds",
                    value: function() {
                        v.a.log("AD", "ADMOB Preloading ads..."), this._adInterstitialPreloaded || (v.a.log("ADS", "Preloading interstitial.."), this.admobInterstitialAd.load()), this._adRewardedPreloaded || (v.a.log("ADS", "Preloading reward.."), this.admobRewardedAd.load())
                    }
                }, {
                    key: "doCallback",
                    value: function() {
                        null != this._callbackReference && (this._callbackReference(this._rewardReference), this._callbackReference = null, this._rewardReference = !1)
                    }
                }]), t
            }(x),
            M = a(82);

        function O() {}
        O.showAd = function(e, t, a) {
            if (v.a.log("AD", "Trying to show an ad of kind:", t), t == this.PLACEMENTS.INTERSTITIAL) {
                if (E.a.isCordova && f.a.gameSettings.noads && !v.a.noAdIgnore) return v.a.log("AD", "Not showing ad, purchased full."), void a();
                if (1 == O.adServer.isAdBreak() && !v.a.noAdBreak) return v.a.log("AD", "Too early for ad. isAdBreak returns TRUE"), void a();
                if (1 == P.a.spawnFillerAd(e, t, a)) return void v.a.log("AD", "Showing filler ad. spawnFillerAd() returns true")
            }
            v.a.log("AD", "Proceeding to showAd of current MyAd platform..."), O.adServer.showAd(e, t, a)
        }, O.initialize = function(e) {
            v.a.log("AD", "Initializing MyAds:" + E.a.myTarget), M.a.scenePlugin = e.scene, E.a.isPoki ? O.adServer = (new T).init(e) : E.a.isFacebook ? O.adServer = (new A).init(e) : E.a.isCordova && (O.adServer = (new L).init(e)), v.a.log("AD SERVER set", O.adServer)
        }, O.PLACEMENTS = {
            INTERSTITIAL: "interstitial",
            REWARD: "reward"
        }, O.adServer = null, O.adBlockerEnabled = !1;
        var D = t.a = O
    },
    38: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(19),
            p = a.n(h),
            d = a(7),
            y = a.n(d),
            _ = a(11),
            c = a.n(_),
            m = a(3),
            u = a(0),
            g = a(9),
            v = a(78),
            f = a(2),
            S = function(e) {
                function t(e, a, i, n) {
                    var l;
                    return s()(this, t), (l = r()(this, y()(t).call(this, e))).gameScene = e, l.myMessage = a, u.a.isBS3 && (l.myMessage = l.myMessage.toUpperCase()), l.callbackMethod = n, l.timer = i, l.background = null, l.myText = null, l
                }
                return c()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        f.a.log("LevelMessage", "myInit", this.myMessage), this.myRenderDepth = m.a.RENDER_DEPTH.UI;
                        var e = u.a.gameAreaMin.x + (u.a.gameAreaMax.x - u.a.gameAreaMin.x) / 2,
                            t = u.a.gameAreaMin.y + (u.a.gameAreaMax.y - u.a.gameAreaMin.y) / 2;
                        this.myText = this.gameScene.add.bitmapText(e, t, u.a.fontNames.LVL_MSG, this.myMessage), this.myText.setOrigin(.5, .5), this.myText.align = 1;
                        var a = 6;
                        return (u.a.isBS2 || u.a.isBS3) && (a = 0), this.background = new g.a(this.gameScene, e, t - a, u.a.spriteKey, "ui/black.png"), this.background.alpha = .7, this.background.setDisplaySize(this.myText.width + 160, this.myText.height + 35), this.background.setOrigin(.5, .5), u.a.isBS3 && (this.background.visible = !1), m.a.mySpriteDepth(this.myRenderDepth, this.background), m.a.mySpriteDepth(this.myRenderDepth, this.myText), this.gameScene.setCanPlayerPause(!1), this.gameScene.myPauseGame(!0, !1, v.a.PAUSE_REASONS.LEVEL_MESSAGE), this
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, t) {
                        this.timer -= t / 1e3, this.timer <= 0 && (null != this.callbackMethod && this.callbackMethod(), this.myOnDestroy())
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        p()(y()(t.prototype), "myOnDestroy", this).call(this), this.background.destroy(), this.myText.destroy()
                    }
                }]), t
            }(m.a);
        S.MESSAGES = {
            GET_READY: "Get ready",
            OUT_OF_TIME: "Out of time!",
            GAME_OVER: "GAME OVER",
            FINAL_LEVEL: "Final level",
            OUCH: "Ouch!",
            PRESS_P: "Press P to pause",
            GAME_COMPLETED: "BRAVO.\nGame finished.",
            AD_CONTINUE_MOB: "TOUCH to start",
            AD_CONTINUE_COMP: "SPACE to start",
            TUT_NOW_PLAY: "Now play!",
            LEVEL_COMPLETED: "GOOD JOB!"
        }, t.a = S
    },
    4: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(169),
            r = a(171),
            h = a(0),
            p = a(2),
            d = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "saveUserSettings",
                    value: function() {
                        var t = h.a.saveKey,
                            a = e._getLocalStorage();
                        null !== a ? (p.a.log("Saved data now.."), a.setItem(t, JSON.stringify(e.gameSettings))) : p.a.warn("STORAGE", "Didn't save. No storage.")
                    }
                }, {
                    key: "loadUserSettings",
                    value: function() {
                        var t = h.a.saveKey,
                            a = null,
                            i = e._getLocalStorage();
                        if (p.a.log("STORAGE", "Loaded storage:", i), null !== i && i.length > 0 && null != i.getItem(t) && "null" != i.getItem(t)) {
                            var s = i.getItem(t);
                            try {
                                a = JSON.parse(s), p.a.log("Loaded json savegame...success", a)
                            } catch (e) {
                                console.warn(e), console.warn("Error parsing json storage: " + s)
                            }
                        } else null !== i ? (p.a.log("New gameSettings detected."), a = this._getFreshSettings()) : (p.a.log("Standard storage not available. Incognito?"), a = this._getFreshSettings());
                        return e.createGameSettings(a), e.gameSettings
                    }
                }, {
                    key: "_getLocalStorage",
                    value: function() {
                        try {
                            if ("localStorage" in window && null != window.localStorage) return localStorage
                        } catch (e) {
                            return null
                        }
                        return null
                    }
                }, {
                    key: "clearAllLocalStorage",
                    value: function(e) {
                        e && (localStorage.clear(), console.error("CLEARED ALL STORAGE Bye bye.."))
                    }
                }, {
                    key: "createGameSettings",
                    value: function(t) {
                        p.a.log("Created GameSettings", "data:", t), e.gameSettings = t, e._updateGameSettingsKeys()
                    }
                }, {
                    key: "_updateGameSettingsKeys",
                    value: function() {
                        var t = this._getFreshSettings();
                        if (null != e.gameSettings)
                            for (var a in t) {
                                null == e.gameSettings[a] && (e.gameSettings[a] = t[a]);
                                var i = Array.isArray(t[a]),
                                    s = Array.isArray(e.gameSettings[a]);
                                i && !s && "tasksCompleted" == a && (e.gameSettings.tasksCompleted = [])
                            }
                        e.saveUserSettings()
                    }
                }, {
                    key: "_getFreshSettings",
                    value: function() {
                        return h.a.isBT ? new o.a : h.a.isBS2 || h.a.isBS3 ? new r.a : void console.error("Unknown settings." + h.a.shortName)
                    }
                }]), e
            }();
        d.gameSettings = {}, t.a = d
    },
    42: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(40),
            p = a.n(h),
            d = a(19),
            y = a.n(d),
            _ = a(7),
            c = a.n(_),
            m = a(11),
            u = a.n(m),
            g = a(17),
            v = a.n(g),
            f = a(44),
            S = a(16),
            E = a(49),
            x = a(0),
            T = a(249),
            b = a(3),
            k = (a(73), a(15)),
            w = a(22),
            I = a(72),
            P = a(9),
            A = a(4),
            L = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = r()(this, c()(t).call(this, e, a))).key = {}, i.myInit(), i
                }
                return u()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        this.key = {}, this.key[f.a.INPUT_ACTIONS.LEFT] = this.gameScene.input.keyboard.addKey(this.controlInfo.left), this.key[f.a.INPUT_ACTIONS.RIGHT] = this.gameScene.input.keyboard.addKey(this.controlInfo.right), this.key[f.a.INPUT_ACTIONS.UP] = this.gameScene.input.keyboard.addKey(this.controlInfo.up), this.key[f.a.INPUT_ACTIONS.DOWN] = this.gameScene.input.keyboard.addKey(this.controlInfo.down), this.key[f.a.INPUT_ACTIONS.SHOOT] = this.gameScene.input.keyboard.addKey(this.controlInfo.shoot)
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        y()(c()(t.prototype), "myOnDestroy", this).call(this), this.gameScene.input.keyboard.removeKey(this.controlInfo.left), this.gameScene.input.keyboard.removeKey(this.controlInfo.right), this.gameScene.input.keyboard.removeKey(this.controlInfo.up), this.gameScene.input.keyboard.removeKey(this.controlInfo.down), this.gameScene.input.keyboard.removeKey(this.controlInfo.shoot), this.key = null, this.gameScene.input.keyboard.clearCaptures()
                    }
                }, {
                    key: "left",
                    value: function() {
                        return this.key[f.a.INPUT_ACTIONS.LEFT].isDown
                    }
                }, {
                    key: "right",
                    value: function() {
                        return this.key[f.a.INPUT_ACTIONS.RIGHT].isDown
                    }
                }, {
                    key: "up",
                    value: function() {
                        return this.key[f.a.INPUT_ACTIONS.UP].isDown
                    }
                }, {
                    key: "down",
                    value: function() {
                        return this.key[f.a.INPUT_ACTIONS.DOWN].isDown
                    }
                }, {
                    key: "fire",
                    value: function() {
                        return this.key[f.a.INPUT_ACTIONS.SHOOT].isDown
                    }
                }]), t
            }(f.a),
            M = a(38),
            O = function(e) {
                function t(e, a) {
                    var i;
                    s()(this, t), (i = r()(this, c()(t).call(this, e, a))).deadZone = 3, i.mouseIsDown = !1, i.myContour = new P.a(e.gameScene, e.pos.x, e.pos.y, x.a.spriteKey, "ui/mouse_contour.png", 1, b.a.RENDER_DEPTH.OVER_GAME), i.contourXMin = x.a.gameAreaMin.x - i.deadZone + i.myContour.displayWidth / 2, i.contourXMax = x.a.gameAreaMax.x + i.deadZone - i.myContour.displayWidth / 2;
                    var n = new M.a(i.gameScene, M.a.MESSAGES.PRESS_P, 1.8).myInit();
                    return n.myText.fontSize *= .5, n.myText.y += 60, n.background.setDisplaySize(.5 * n.background.displayWidth, .5 * n.background.displayHeight), n.background.y += 60, i.myInit(), i
                }
                return u()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        this.gameScene.input.mouse.requestPointerLock(), this.gameScene.input.on("pointermove", (function(e) {
                            this.gameScene.input.mouse.locked && (this.myContour.x += e.movementX, this.myContour.x < this.contourXMin && (this.myContour.x = this.contourXMin), this.myContour.x > this.contourXMax && (this.myContour.x = this.contourXMax), this.myContour.y = this.playerOwner.pos.y)
                        }), this), this.gameScene.input.on("pointerdown", (function(e) {
                            this.gameScene.input.mouse.locked && (this.mouseIsDown = !0)
                        }), this), this.gameScene.input.on("pointerup", (function(e) {
                            this.gameScene.input.mouse.locked && (this.mouseIsDown = !1)
                        }), this)
                    }
                }, {
                    key: "myOnPause",
                    value: function(e) {
                        y()(c()(t.prototype), "myOnPause", this).call(this), this.mouseIsDown = !1, e ? this.gameScene.input.mouse.releasePointerLock() : this.gameScene.input.mouse.requestPointerLock()
                    }
                }, {
                    key: "left",
                    value: function() {
                        return this.myContour.x < this.playerOwner.pos.x - this.deadZone
                    }
                }, {
                    key: "right",
                    value: function() {
                        return this.myContour.x > this.playerOwner.pos.x + this.deadZone
                    }
                }, {
                    key: "up",
                    value: function() {
                        return !1
                    }
                }, {
                    key: "down",
                    value: function() {
                        return !1
                    }
                }, {
                    key: "fire",
                    value: function() {
                        return this.mouseIsDown
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        y()(c()(t.prototype), "myOnDestroy", this).call(this), this.gameScene.input.mouse.releasePointerLock()
                    }
                }]), t
            }(f.a),
            D = a(8),
            B = a(14),
            R = a(121),
            W = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = r()(this, c()(t).call(this, e, a))).isBtnLeft = !1, i.isBtnRight = !1, i.isBtnShooting = !1, i.spriteLeft = new P.a(e.gameScene, 0, 0, x.a.spriteKey, "ui/input_touch.psd", 1, b.a.RENDER_DEPTH.UIOVER), i.spriteLeft.angle = -90, i.spriteRight = new P.a(e.gameScene, 0, 0, x.a.spriteKey, "ui/input_touch.psd", 1, b.a.RENDER_DEPTH.UIOVER), i.spriteRight.angle = 90, i.spriteShoot = new P.a(e.gameScene, 0, 0, x.a.spriteKey, "ui/input_touch.psd", 1, b.a.RENDER_DEPTH.UIOVER), i.myInit(), i
                }
                return u()(t, e), l()(t, [{
                    key: "_doAction",
                    value: function(e, t) {
                        t.alpha = e ? 1 : .5
                    }
                }, {
                    key: "myInit",
                    value: function() {
                        this._doAction(!1, this.spriteLeft), this._doAction(!1, this.spriteRight), this._doAction(!1, this.spriteShoot), this.myOnResizeSinglePlayer(), R.a(this.gameScene, this.gameScene.game.events, "LevelEditoSceneResize", this.myOnResizeSinglePlayer, this)
                    }
                }, {
                    key: "left",
                    value: function() {
                        return this.isBtnLeft
                    }
                }, {
                    key: "right",
                    value: function() {
                        return this.isBtnRight
                    }
                }, {
                    key: "up",
                    value: function() {
                        return !1
                    }
                }, {
                    key: "down",
                    value: function() {
                        return !1
                    }
                }, {
                    key: "fire",
                    value: function() {
                        return this.isBtnShooting
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        y()(c()(t.prototype), "myOnDestroy", this).call(this)
                    }
                }, {
                    key: "myOnResizeSinglePlayer",
                    value: function() {
                        var e = this;
                        this.spriteLeft.scale = this.spriteRight.scale = this.spriteShoot.scale = 2 / window.devicePixelRatio;
                        var t = 50,
                            a = 20;
                        D.a.currentMode == D.a.MODES.TWOP && (t = 10, a = 10), this.spriteLeft.x = B.a.cameraOffset.x + this.spriteLeft.displayHeight / 2 + t, this.spriteLeft.y = x.a.gameHeight - B.a.cameraOffset.y - this.spriteLeft.displayWidth / 2 - -10, this.spriteRight.x = this.spriteLeft.x + this.spriteRight.displayHeight + a, this.spriteRight.y = this.spriteLeft.y, this.spriteShoot.x = x.a.gameWidth - B.a.cameraOffset.x - this.spriteShoot.displayWidth / 2 - t, this.spriteShoot.y = this.spriteRight.y, D.a.currentMode == D.a.MODES.TWOP && (1 == this.playerOwner.playerId ? this.spriteShoot.x = this.spriteRight.x + this.spriteShoot.displayWidth + a : 2 == this.playerOwner.playerId && (this.spriteRight.x = this.spriteShoot.x - this.spriteShoot.displayWidth - a, this.spriteLeft.x = this.spriteRight.x - this.spriteRight.displayHeight - a)), null != this.btn_left && this.btn_left.destroy(), null != this.btn_right && this.btn_right.destroy(), null != this.btn_shoot && this.btn_shoot.destroy();
                        var i = B.a.cameraOffset.x,
                            s = this.spriteLeft.x + this.spriteLeft.displayHeight / 2 + a / 2,
                            n = .5 * x.a.gameWidth,
                            l = x.a.gameWidth - B.a.cameraOffset.x,
                            o = .3 * (x.a.gameHeight - B.a.cameraOffset.y),
                            r = .7 * (x.a.gameHeight - B.a.cameraOffset.y);
                        D.a.currentMode == D.a.MODES.TWOP && (n = this.spriteRight.x + this.spriteLeft.displayHeight / 2 + a / 2, 1 == this.playerOwner.playerId ? l = x.a.gameWidth / 2 : i = x.a.gameWidth / 2);
                        var h = new Phaser.Geom.Rectangle(i, o, s - i, r),
                            p = new Phaser.Geom.Rectangle(s, o, n - s, r),
                            d = new Phaser.Geom.Rectangle(n, o, l - n, r);
                        this.btn_left = this.gameScene.add.graphics(), this.btn_left.setInteractive({
                            hitArea: h,
                            hitAreaCallback: Phaser.Geom.Rectangle.Contains
                        }), this.btn_left.on("pointerdown", (function() {
                            e._doAction(!0, e.spriteLeft), e.isBtnLeft = !0
                        })), this.btn_left.on("pointerover", (function() {
                            e._doAction(!0, e.spriteLeft), e.isBtnLeft = !0
                        })), this.btn_left.on("pointerup", (function() {
                            e._doAction(!1, e.spriteLeft), e.isBtnLeft = !1
                        })), this.btn_left.on("pointerout", (function() {
                            e._doAction(!1, e.spriteLeft), e.isBtnLeft = !1
                        })), this.btn_right = this.gameScene.add.graphics(), this.btn_right.setInteractive({
                            hitArea: p,
                            hitAreaCallback: Phaser.Geom.Rectangle.Contains
                        }), this.btn_right.on("pointerdown", (function() {
                            e._doAction(!0, e.spriteRight), e.isBtnRight = !0
                        })), this.btn_right.on("pointerover", (function() {
                            e._doAction(!0, e.spriteRight), e.isBtnRight = !0
                        })), this.btn_right.on("pointerup", (function() {
                            e._doAction(!1, e.spriteRight), e.isBtnRight = !1
                        })), this.btn_right.on("pointerout", (function() {
                            e._doAction(!1, e.spriteRight), e.isBtnRight = !1
                        })), this.btn_shoot = this.gameScene.add.graphics(), this.btn_shoot.setInteractive({
                            hitArea: d,
                            hitAreaCallback: Phaser.Geom.Rectangle.Contains
                        }), this.btn_shoot.on("pointerdown", (function() {
                            e._doAction(!0, e.spriteShoot), e.isBtnShooting = !0
                        })), this.btn_shoot.on("pointerover", (function() {
                            e._doAction(!0, e.spriteShoot), e.isBtnShooting = !0
                        })), this.btn_shoot.on("pointerup", (function() {
                            e._doAction(!1, e.spriteShoot), e.isBtnShooting = !1
                        })), this.btn_shoot.on("pointerout", (function() {
                            e._doAction(!1, e.spriteShoot), e.isBtnShooting = !1
                        }))
                    }
                }]), t
            }(f.a),
            N = a(2),
            C = function(e) {
                function t(e, a) {
                    var i;
                    s()(this, t), (i = r()(this, c()(t).call(this, e, a)))._deadZone = 15, i._maxJoyTravel = 0, i._pressPos = S.a.ZERO, i.isBtnLeft = !1, i.isBtnRight = !1, i.isBtnUp = !1, i.isBtnDown = !1, i.isBtnShooting = !1, i._movePointer = null, i.move_area = new P.a(e.gameScene, 0, 0, x.a.spriteKey, "ui/input_touch_move.psd", 1, b.a.RENDER_DEPTH.UIOVER), i.move_joy = new P.a(e.gameScene, 0, 0, x.a.spriteKey, "ui/input_touch.psd", 1, b.a.RENDER_DEPTH.UIOVER), i.move_joy.scale = .35, i._maxJoyTravel = i.move_area.displayWidth / 2 - i.move_joy.displayWidth / 2, i.shoot_joy = new P.a(i.gameScene, 0, 0, x.a.spriteKey, "ui/input_touch_shoot.psd", 1, b.a.RENDER_DEPTH.UIOVER);
                    var n = p()(i);
                    return i.gameScene.input.on("pointerup", (function(e) {
                        n._clearMoveCusor(e)
                    })), i.moveAreadefaultPositionX = null, i.moveAreadefaultPositionY = null, i.myInit(), i
                }
                return u()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        this._touchShoot(!1), this._clearMoveCusor(null), R.a(this.gameScene, this.gameScene.game.events, "LevelEditoSceneResize", this.myOnResizeSinglePlayer, this), this.myOnResizeSinglePlayer()
                    }
                }, {
                    key: "_touchShoot",
                    value: function(e, t) {
                        null != this._movePointer && t == this._movePointer || (this.shoot_joy.alpha = e ? .65 : .3, this.isBtnShooting = e)
                    }
                }, {
                    key: "_setMoveCursor",
                    value: function(e) {
                        this._movePointer = e, this.move_joy.alpha = 1, this._pressPos.x = e.worldX, this._pressPos.y = e.worldY
                    }
                }, {
                    key: "_clearMoveCusor",
                    value: function(e) {
                        e == this._movePointer && (this._movePointer = null, null != this.moveAreadefaultPositionX && (this.move_area.x = this.moveAreadefaultPositionX, this.move_area.y = this.moveAreadefaultPositionY), this.move_area.alpha = .25, this.move_joy.alpha = .5, this.move_joy.x = this.move_area.x, this.move_joy.y = this.move_area.y, this.isBtnLeft = this.isBtnRight = this.isBtnUp = this.isBtnDown = !1)
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        y()(c()(t.prototype), "myUpdate", this).call(this, e, a), this._movePointer && (this.move_area.x = this._pressPos.x, this.move_area.y = this._pressPos.y, this.move_joy.x = this._movePointer.worldX, this.move_joy.y = this._movePointer.worldY, this.move_joy.x < this.move_area.x - this._deadZone ? this.isBtnLeft = !0 : this.isBtnLeft = !1, this.move_joy.x > this.move_area.x + this._deadZone ? this.isBtnRight = !0 : this.isBtnRight = !1, this.move_joy.y < this.move_area.y - this._deadZone ? this.isBtnUp = !0 : this.isBtnUp = !1, this.move_joy.y > this.move_area.y + this._deadZone ? this.isBtnDown = !0 : this.isBtnDown = !1, this.move_joy.x < this.move_area.x - this._maxJoyTravel && (this._pressPos.x = this.move_joy.x + this._maxJoyTravel), this.move_joy.x > this.move_area.x + this._maxJoyTravel && (this._pressPos.x = this.move_joy.x - this._maxJoyTravel), this.move_joy.y < this.move_area.y - this._maxJoyTravel && (this._pressPos.y = this.move_joy.y + this._maxJoyTravel), this.move_joy.y > this.move_area.y + this._maxJoyTravel && (this._pressPos.y = this.move_joy.y - this._maxJoyTravel))
                    }
                }, {
                    key: "left",
                    value: function() {
                        return this.isBtnLeft
                    }
                }, {
                    key: "right",
                    value: function() {
                        return this.isBtnRight
                    }
                }, {
                    key: "up",
                    value: function() {
                        return this.isBtnUp
                    }
                }, {
                    key: "down",
                    value: function() {
                        return this.isBtnDown
                    }
                }, {
                    key: "fire",
                    value: function() {
                        return this.isBtnShooting
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        y()(c()(t.prototype), "myOnDestroy", this).call(this)
                    }
                }, {
                    key: "myOnResizeSinglePlayer",
                    value: function() {
                        var e = this,
                            t = x.a.gameWidth,
                            a = 1e3,
                            i = B.a.cameraOffset.x,
                            s = (x.a.gameWidth + 2 * -B.a.cameraOffset.x) / 4;
                        null != this.btn_move && this.btn_move.destroy(), null != this.btn_shoot && this.btn_shoot.destroy(), this.rectMove = new Phaser.Geom.Rectangle(-1e3, 150, a + .5 * t, 2e3), D.a.currentMode == D.a.MODES.TWOP && (1 == this.playerOwner.playerId ? this.rectMove = new Phaser.Geom.Rectangle(i, 150, s, 2e3) : this.rectMove = new Phaser.Geom.Rectangle(i + 2 * s, 150, s, 2e3)), this.btn_move = this.gameScene.add.graphics(), this.btn_move.setInteractive({
                            hitArea: this.rectMove,
                            hitAreaCallback: Phaser.Geom.Rectangle.Contains
                        }), this.btn_move.on("pointerdown", (function(t) {
                            e._setMoveCursor(t)
                        })), this.rectShoot = new Phaser.Geom.Rectangle(.5 * t, 170, 2e3, 2e3), D.a.currentMode == D.a.MODES.TWOP && (1 == this.playerOwner.playerId ? this.rectShoot = new Phaser.Geom.Rectangle(i + s, 150, s, 2e3) : this.rectShoot = new Phaser.Geom.Rectangle(i + 3 * s, 150, s, 2e3)), this.btn_shoot = this.gameScene.add.graphics(), this.btn_shoot.setInteractive({
                            hitArea: this.rectShoot,
                            hitAreaCallback: Phaser.Geom.Rectangle.Contains
                        }), this.btn_shoot.on("pointerdown", (function(t) {
                            e._touchShoot(!0, t)
                        })), this.btn_shoot.on("pointerup", (function(t) {
                            e._touchShoot(!1, t)
                        })), this.btn_shoot.on("pointerout", (function(t) {
                            e._touchShoot(!1, t)
                        })), this.move_area.x = B.a.cameraOffset.x + 60 + this.move_area.displayWidth / 2, this.move_area.y = x.a.gameHeight - B.a.cameraOffset.y - 60 - this.move_area.displayHeight / 2, this.moveAreadefaultPositionX = this.move_area.x, this.moveAreadefaultPositionY = this.move_area.y, this.move_joy.x = this.move_area.x, this.move_joy.y = this.move_area.y, this.shoot_joy.x = x.a.gameWidth - B.a.cameraOffset.x - 10 - this.shoot_joy.displayWidth / 2, this.shoot_joy.y = x.a.gameHeight - B.a.cameraOffset.y - 10 - this.shoot_joy.displayHeight / 2, D.a.currentMode == D.a.MODES.TWOP && (1 == this.playerOwner.playerId ? this.shoot_joy.x = i + 2 * s - 10 - this.shoot_joy.displayWidth / 2 - 35 : (this.move_area.x = i + 2 * s + 60 + this.move_area.displayWidth / 2 + 35, this.moveAreadefaultPositionX = this.move_area.x))
                    }
                }]), t
            }(f.a),
            U = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "createInput",
                    value: function(e, t) {
                        return N.a.getMobileScreenshots ? (x.a.isBT ? new W(e, t) : new C(e, t), new L(e, t)) : B.a.isMobile ? x.a.isBT ? new W(e, t) : new C(e, t) : t.controller == f.a.INPUT_TYPE.keyboard ? new L(e, t) : t.controller == f.a.INPUT_TYPE.mouse ? new O(e, t) : (console.error("Unknown controller type:" + t.controller), null)
                    }
                }]), e
            }(),
            Y = (a(78), a(246), a(30), a(111)),
            K = (a(70), a(20)),
            G = a(79),
            H = a.n(G),
            z = a(71),
            V = a(1),
            F = function(e) {
                function t() {
                    return s()(this, t), r()(this, c()(t).apply(this, arguments))
                }
                return u()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        var e = this;
                        this.modType = V.a.ITEM_MANAGER.MOD_TYPE.WARP, this.MOD_TIME = 5, this.modTime = this.MOD_TIME, N.a.log("ITM_FREEZE", "freeze initiated!");
                        for (var t = 0, a = Object.entries(this.gameScene.ballManager.activeBalls); t < a.length; t++) {
                            var i = H()(a[t], 2);
                            i[0];
                            i[1].forEach((function(e) {
                                e.pbActive = !1
                            }))
                        }
                        this.gameScene.timebar.timebarStopped = !0, this.gameScene.timebar.timeLeft = 0, this.gameScene.timebar._redrawTimebar(), this.gameScene.players.forEach((function(t) {
                            t.shotManager.accuracyBonus = !1, t.shotManager.cantShootTimer = e.gameScene.timeInLevel + 9999999
                        }));
                        var s = this.gameScene.add.graphics();
                        return s.fillStyle(16777215, 1), s.fillRect(B.a.cameraOffset.x, B.a.cameraOffset.y, x.a.gameWidth - 2 * B.a.cameraOffset.x, x.a.gameHeight - 2 * B.a.cameraOffset.y), b.a.mySpriteDepth(b.a.RENDER_DEPTH.UIOVER, s), this.gameScene.add.tween({
                            targets: s,
                            duration: 600,
                            alpha: 0,
                            delay: 450
                        }), k.a.playSound(this.gameScene, k.a.SND.BALL_WARP), this
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        y()(c()(t.prototype), "myUpdate", this).call(this, e, a)
                    }
                }, {
                    key: "modExpired",
                    value: function() {
                        N.a.log("WARP", "Level warping ahead...!!"), this.gameScene.levelComplete()
                    }
                }], [{
                    key: "freezeBall",
                    value: function(e) {
                        e.mySprite.alpha = .5, e.isStatic = !0
                    }
                }, {
                    key: "unfreezeBall",
                    value: function(e) {
                        e.mySprite.alpha = 1, e.isStatic = !1
                    }
                }]), t
            }(z.a),
            X = F,
            j = a(12),
            q = a(75),
            J = function(e) {
                function t(e, a, i) {
                    var n;
                    return s()(this, t), (n = r()(this, c()(t).call(this, e, w.a.LAYER.PLAYER, w.a.LAYERS_PLAYER, i.minus(new S.a(x.a.playerCollW / 2, x.a.playerCollH / 2)), i.plus(new S.a(x.a.playerCollW / 2, x.a.playerCollH / 2)), {
                        useGravity: !0,
                        mass: t.PLAYER_MASS,
                        acc: new S.a(0, t.PLAYER_GRAVITY)
                    }))).playerId = a, n.speed = new S.a(x.a.playerSpeed, 0), n.ladderSpeed = x.a.playerLadderSpeed, n.ladderSlideSpeed = x.a.playerLadderSlideSpeed, n.SPEED_FACTOR_PLAYER = 5, n.SPEED_FACTOR_LADDER = 3.5, n.myInput = U.createInput(p()(n), A.a.gameSettings.playerKeys["player" + a]), n.paralizedUntil = 0, n.shotManager = new T.a(p()(n)), n.playerShield = new I.a(p()(n)).myInit(), n._currentAni = "", n.usingLadder = null, n._aniBT1FrameNameMod = "", n._aniBS3FrameNameMod = "", n._testPBodyLadder = new E.a(n.gameScene, w.a.LAYER.SIMULATION, w.a.LAYER.NONE, new S.a(n._p1.x + 1, n._p1.y), new S.a(n._p2.x - 1, n._p2.y)), n._testPBodyWall = new E.a(n.gameScene, w.a.LAYER.SIMULATION, w.a.LAYER.NONE, new S.a(n._p1.x, n._p1.y), new S.a(n._p2.x, n._p2.y)), n._testPBodySquish = new E.a(n.gameScene, w.a.LAYER.SIMULATION, w.a.LAYER.NONE, new S.a(n._p1.x - 1, n._p1.y - 1), new S.a(n._p2.x + 1, n._p2.y + 1)), n._leafLaserNum = 0, n._landedWall = null, n._landedWallOld = null, n._runDieAnimation = !1, n._lastBallKill = null, n._p2Sprite, n._stickyModifier = 0, n._bs3RunSmoke = null, n
                }
                return u()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        this.goType = V.a.GO_TYPE.PLAYER, this.myRenderDepth = b.a.RENDER_DEPTH.PLAYER, this._aniBT1FrameNameMod = this._detectedModifier(), this._aniBS3FrameNameMod = "";
                        var e = x.a.spriteKey;
                        x.a.isBT && (e = A.a.gameSettings.selectedSkinID, q.a.createSkinAnimations(this.gameScene));
                        var a = "char/idle" + this._aniBT1FrameNameMod + ".png";
                        if (x.a.isBS2 ? a = "char/idle/idle_50.png" : x.a.isBS3 && (a = "char/idle/idle_1.png", 2 == this.playerId && K.a.isLazyLoaded && (e = x.a.lazySpriteKey, this._aniBS3FrameNameMod = "_p2")), this.mySprite = new P.a(this.gameScene, this.pos.x, this.pos.y + this.size.y / 2, e, a, 1, this.myRenderDepth), x.a.isBS2 && 2 == this.playerId && this.gameScene.textures.exists(x.a.lazySpriteKey)) {
                            var i = x.a._BS2_p2MatchFrames[this.mySprite.frame.name];
                            this._p2Sprite = new P.a(this.gameScene, this.pos.x, this.pos.y + this.size.y / 2, x.a.lazySpriteKey, i, 1, this.myRenderDepth), b.a.mySpriteDepth(this.myRenderDepth, this._p2Sprite)
                        }
                        return 1 !== this.playerId && 2 !== this.playerId && console.error("Player ID has to be 1 or 2. id:" + this.playerId), this.gameScene.children.bringToTop(this.debugGraphics), this.mySprite.x = this.pos.x, this.mySprite.y = this.pos.y + this.size.y / 2, this.playCharAnim = this._playCharAnimBT1, (x.a.isBS2 || x.a.isBS3) && (this.playCharAnim = this._playCharAnimBS2), this.playCharAnim(t.ANIMS.IDLE), this
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        if (x.a.isBS2 && 2 == this.playerId && null != this._p2Sprite && (this._p2Sprite.setFrame(x.a._BS2_p2MatchFrames[this.mySprite.frame.name]), this._p2Sprite.flipX = this.mySprite.flipX, this._p2Sprite.x = this.mySprite.x, this._p2Sprite.y = this.mySprite.y), this._runDieAnimation) this.animatePlayerDeathBounce(e, a);
                        else if (this.mySprite.x = this.pos.x, this.mySprite.y = this.pos.y + this.size.y / 2, this.gameScene.isGamePaused) this._currentAni != t.ANIMS.IDLE && this._currentAni != t.ANIMS.WIN && this.mySprite.anims.stop();
                        else {
                            var i = 0,
                                s = !0;
                            if (this.paralizedUntil > e && (this.playCharAnim(t.ANIMS.IDLE), s = !1), s) {
                                if (this.myInput.fire() && this.shotManager.playerFired(e), null != this.usingLadder) return;
                                this.myInput.left() && !this.myInput.right() ? (this.playCharAnim(t.ANIMS.WALK_L), i = -this.speed.x, i += this._stickyModifier) : this.myInput.right() && !this.myInput.left() ? (this.playCharAnim(t.ANIMS.WALK_R), i = this.speed.x, i -= this._stickyModifier) : this.myInput.left() && this.myInput.right() && x.a.isBT ? (this.playCharAnim(t.ANIMS.IDLE), i = -this.speed.x) : (this.playCharAnim(t.ANIMS.IDLE), i = 0), this._stickyModifier = 0
                            }
                            null != this._landedWall && this._landedWall.wallType == V.a.WALL.WALL_TYPE.ICE && (0 == i ? this.vel.x > 0 ? (i = this.vel.x - Y.a.SLOW_DOWN * (a / 1e3)) < 0 && (i = 0) : this.vel.x < 0 && (i = this.vel.x + Y.a.SLOW_DOWN * (a / 1e3)) > 0 && (i = 0) : i > 0 ? (i = this.vel.x + Y.a.SPEED_UP * (a / 1e3)) > this.speed.x && (i = this.speed.x) : i < 0 && (i = this.vel.x - Y.a.SPEED_UP * (a / 1e3)) < -this.speed.x && (i = -this.speed.x)), null != this._landedWall && this._landedWall.wallType == V.a.WALL.WALL_TYPE.CONV_BELT && (i += this._landedWall.convBeltSpeed), this.vel.x = i
                        }
                    }
                }, {
                    key: "_playCharAnimBT1",
                    value: function(e) {
                        var a = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                        if (e !== this._currentAni || a) switch (this._currentAni = e, e) {
                            case t.ANIMS.WALK_L:
                                this.mySprite.anims.play("walk" + this._aniBT1FrameNameMod), this.mySprite.setScale(-1, 1);
                                break;
                            case t.ANIMS.WALK_R:
                                this.mySprite.anims.play("walk" + this._aniBT1FrameNameMod), this.mySprite.setScale(1, 1);
                                break;
                            case t.ANIMS.IDLE:
                                this.mySprite.anims.play("idle" + this._aniBT1FrameNameMod), this.mySprite.setScale(1, 1)
                        }
                    }
                }, {
                    key: "_playCharAnimBS2",
                    value: function(e) {
                        var a = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                        if (this.pbActive && (e !== this._currentAni || a)) switch (this._currentAni = e, e) {
                            case t.ANIMS.WALK_L:
                                this.mySprite.anims.play("walkLeft" + this._aniBS3FrameNameMod);
                                break;
                            case t.ANIMS.WALK_R:
                                this.mySprite.anims.play("walkRight" + this._aniBS3FrameNameMod);
                                break;
                            case t.ANIMS.IDLE:
                                this.mySprite.anims.play("idle" + this._aniBS3FrameNameMod);
                                break;
                            case t.ANIMS.WIN:
                                this.mySprite.anims.play("win" + this._aniBS3FrameNameMod)
                        }
                    }
                }, {
                    key: "collideEdge",
                    value: function(e, a, i, s, n, l, o, r) {
                        if (r.goType == V.a.GO_TYPE.WALL) {
                            if (r.wallType == V.a.WALL.WALL_TYPE.CEILSPIKE_BT1) return this._playerDied(t.DEATH_REASON.SPIKES), !0;
                            if ((r.wallType == V.a.WALL.WALL_TYPE.MOVING || r.wallType == V.a.WALL.WALL_TYPE.CAVEIN_BS3) && this.gameScene.phyEngine.simulateCollisions(this._testPBodySquish, this.pos.x, this.pos.y, [w.a.LAYER.WALL]).isSquished) return this._playerDied(t.DEATH_REASON.SPIKES), !0
                        } else r.goType == V.a.GO_TYPE.WALL && r.wallType == V.a.WALL.WALL_TYPE.TIMED && N.a.error("DIED BY APPEARING INSIDE TIMED tile.");
                        if (r.goType == V.a.GO_TYPE.BALL) {
                            if (r._isGhostOn) return !0;
                            if (r.isStatic) return !0;
                            if (r._ballInfo.warp) {
                                new X(this.gameScene).myInit();
                                return !0
                            }
                            for (var h in this.gameScene.itemManager.allModifiers) {
                                if (h == V.a.ITEM_MANAGER.MOD_TYPE.MEDAL) return !0;
                                if (h == V.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_PHASE) return j.a.TaskUpdate(this.gameScene, j.a.TASK_TYPE.PHASE_INSIDE_BUBBLE, !0), !0
                            }
                            return this.playerShield.ignoreBall(r) || (this._lastBallKill = r, this._playerDied(t.DEATH_REASON.BALL)), !0
                        }
                        if (r.goType == V.a.GO_TYPE.WALL && null == this.usingLadder) {
                            var p = r;
                            if (p.wallType == V.a.WALL.WALL_TYPE.SPIKEALL && e != V.a.PHY.COL_EDGE.TOP) {
                                if (this.speed.x != x.a.playerSpeedUp || 0 == this.vel.x || e != V.a.PHY.COL_EDGE.BOTTOM) return this._playerDied(t.DEATH_REASON.SPIKES), !0;
                                if (null == this._bs3RunSmoke && K.a.isLazyLoaded) {
                                    this._bs3RunSmoke = new P.a(this.gameScene, this.pos.x, this.pos.y + x.a.playerCollH / 2, x.a.lazySpriteKey, "run_smoke/run_smoke_1.png", 1, b.a.RENDER_DEPTH.UNDER_GAME), this._bs3RunSmoke.anims.play("run_smoke"), this.vel.x > 0 && (this._bs3RunSmoke.flipX = !0);
                                    var d = this;
                                    this._bs3RunSmoke.once("animationcomplete", (function() {
                                        d._bs3RunSmoke.destroy(), delete d._bs3RunSmoke
                                    })), j.a.TaskUpdate(this.gameScene, j.a.TASK_TYPE.SPIKE_RUN, !0, D.a.currentLevel)
                                }
                            }
                            if (p.wallType == V.a.WALL.WALL_TYPE.TELEPORT) return S.a.getPowDistance(this.pos, p.pos) < 20 && p.startTeleportingPlayer(this), !0;
                            if (e == V.a.PHY.COL_EDGE.BOTTOM) {
                                if (this._isStandingOnAnotherWall(p)) return !0;
                                this._landedWall = p, this.vel.y = .1, p.wallType == V.a.WALL.WALL_TYPE.TRAMPOLINE ? (this.vel.y = -50, p.trampolinePlayerBounce(this), this._landedWall = null) : p.wallType == V.a.WALL.WALL_TYPE.STICKY && p.gotOnSticky(this)
                            } else if (e == V.a.PHY.COL_EDGE.TOP && (this.vel.y = 0, p._isSpikey)) return this._playerDied(t.DEATH_REASON.SPIKES), !0;
                            p.wallType == V.a.WALL.WALL_TYPE.TIMED && p.standingOnWallTimed(this)
                        } else if (r.goType == V.a.GO_TYPE.LADDER) return r.touchingLadder(this), !0;
                        if (r.goType == V.a.GO_TYPE.ITEM && N.a.error("THIS NEVER HAPPENS. ITEM REACTS, NOT PLAYER.!"), null != this.usingLadder) return !0
                    }
                }, {
                    key: "myFixedPreUpdate",
                    value: function(e, a, i) {
                        y()(c()(t.prototype), "myFixedPreUpdate", this).call(this, e, a, i), this._landedWall = null
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, a, i) {
                        y()(c()(t.prototype), "myFixedPostUpdate", this).call(this, e, a, i), this._landedWall != this._landedWallOld && (null == this._landedWall && null == this.usingLadder && (this.vel.y = x.a.playerStartG), this._landedWallOld = this._landedWall), null == this._landedWall && this.vel.y < x.a.playerStartG && null == this.usingLadder && (this.vel.y += 100 * a, this.vel.y > x.a.playerStartG && (this.vel.y = x.a.playerStartG))
                    }
                }, {
                    key: "_playerDied",
                    value: function(e) {
                        N.a.log("PLAYER", "Player is hit!" + e), this.pbActive = !1, k.a.playSound(this.gameScene, k.a.SND.PLAYER_DEATH_BALL), this.gameScene.playerDied(this, e)
                    }
                }, {
                    key: "_detectedModifier",
                    value: function() {
                        var e = "";
                        return x.a.isBT && (this.gameScene.ballManager.ballGravity <= .8 && (e += "_space"), 2 == this.playerId && (e += "_p2")), e
                    }
                }, {
                    key: "speedUpPlayer",
                    value: function() {
                        this.speed.x = x.a.playerSpeedUp, this.ladderSpeed = x.a.playerLadderSpeedUp
                    }
                }, {
                    key: "animatePlayerDeathBounce",
                    value: function(e, a) {
                        if (0 == this._runDieAnimation) return this._runDieAnimation = !0, this.mySprite.anims.stop(), this.mySprite.setFrame("char/die/die.png"), this.vel.x = 80, this.vel.y = -20, this.acc.y = 0, void(this.pos.x < this._lastBallKill.pos.x && (this.mySprite.flipX = !this.mySprite.flipX, this.vel.x = -this.vel.x));
                        this.pos.x += this.vel.x * a / 100, this.vel.y = this.vel.y + this.acc.y * a / 10, this.pos.y += this.vel.y * a / 100, this.mySprite.x = this.pos.x, this.mySprite.y = this.pos.y + this.size.y / 2, (this.pos.x - this.sizeHalf.x < x.a.gameAreaMin.x || this.pos.x + this.sizeHalf.x > x.a.gameAreaMax.x) && (this.pos.x - this.sizeHalf.x < x.a.gameAreaMin.x && (this.pos.x = x.a.gameAreaMin.x + this.sizeHalf.x), this.pos.x + this.sizeHalf.x > x.a.gameAreaMax.x && (this.pos.x = x.a.gameAreaMax.x - this.sizeHalf.x), this.vel.y = -20, this.vel.x = -this.vel.x / Math.abs(this.vel.x) * 25, this.acc.y = t.PLAYER_GRAVITY, this.mySprite.flipX = !this.mySprite.flipX), this.pos.y > x.a.gameAreaMax.y + this.size.y && (this._runDieAnimation = !1, this.gameScene.restartStageAfterDying(t.DEATH_REASON.BALL))
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        y()(c()(t.prototype), "myOnDestroy", this).call(this), null != this._p2Sprite && this._p2Sprite.destroy()
                    }
                }, {
                    key: "_isStandingOnAnotherWall",
                    value: function(e) {
                        var t = this,
                            a = !1,
                            i = this.gameScene.phyEngine.simulateCollisions(this._testPBodyWall, this.pos.x, this.pos.y, [w.a.LAYER.WALL]);
                        return i.collisions.length >= 2 && i.collisions.forEach((function(i) {
                            var s = i.pBody;
                            if (s != e && s._p1.y == e._p1.y)
                                if (t.pos.x > s._p1.x) {
                                    if (t.pos.x < s._p2.x) return void(a = !0)
                                } else if (t.pos.x > s._p1.x) return void(a = !0)
                        })), a
                    }
                }]), t
            }(E.a);
        v()(J, "PLAYER_GRAVITY", .905), v()(J, "PLAYER_MASS", 850), J.DEATH_REASON = {
            SPIKES: "spikes",
            BALL: "ball",
            TIMEBAR: "timebar"
        }, J.ANIMS = {
            WALK_L: "walkl",
            WALK_R: "walkr",
            IDLE: "idle",
            WIN: "win",
            DIE: "die",
            CLIMB: "climb",
            CLIMB_ONOFF: "climb_onoff",
            SLIDE: "slide"
        };
        t.a = J
    },
    43: function(e, t) {
        t.GET_PHASER_RENDERER = function(e) {
            return "auto" == this.PHASER_AUTO ? e.AUTO : "auto" == this.PHASER_CANVAS ? e.CANVAS : "auto" == this.PHASER_WEBGL ? e.WEBGL : void console.error("Unknown __MY_RENDERER__:", "auto")
        }, t.PHASER_AUTO = "auto", t.PHASER_CANVAS = "canvas", t.PHASER_WEBGL = "webgl", t.GET_ENV_PROD_OR_DEV = function() {
            return "prod"
        }, t.ENV_PROD = "prod", t.ENV_DEV = "dev", t.GET_MY_GAME = function() {
            return "bs3"
        }, t.GAME_BS1 = "bt1", t.GAME_BS2 = "bs2", t.GAME_BS3 = "bs3"
    },
    44: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = (a(42), function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = r()(this, p()(t).call(this, e.gameScene))).playerOwner = e, i.gameScene = e.gameScene, i.controlInfo = a, i
                }
                return y()(t, e), l()(t, [{
                    key: "left",
                    value: function() {
                        console.error("left() not yet defined!")
                    }
                }, {
                    key: "right",
                    value: function() {
                        console.error("right() not yet defined!")
                    }
                }, {
                    key: "up",
                    value: function() {
                        console.error("up() not yet defined!")
                    }
                }, {
                    key: "down",
                    value: function() {
                        console.error("down() not yet defined!")
                    }
                }, {
                    key: "fire",
                    value: function() {
                        console.error("fire() not yet defined!")
                    }
                }]), t
            }(a(3).a));
        _.INPUT_TYPE = {
            keyboard: "keyboard",
            mouse: "mouse",
            touch: "touch"
        }, _.INPUT_ACTIONS = {
            LEFT: "l",
            RIGHT: "r",
            UP: "u",
            DOWN: "d",
            SHOOT: "f"
        }, t.a = _
    },
    450: function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.d(__webpack_exports__, "a", (function() {
            return MyTaskRules
        }));
        var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10),
            _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__),
            _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7),
            _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__),
            _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11),
            _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__),
            _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5),
            _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default = __webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__),
            _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6),
            _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default = __webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__),
            _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2),
            _my_game_logic_MyGame__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8),
            _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(4),
            _MyTasks__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(12),
            _build_platforms_GameConfigs_GameConfig__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(0),
            _my_game_settings_MyAnalytics__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(29),
            MyTaskRules = function() {
                function e() {
                    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default()(this, e)
                }
                return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default()(e, null, [{
                    key: "generateMethods",
                    value: function(e) {
                        for (var t = [{
                                taskType: _MyTasks__WEBPACK_IMPORTED_MODULE_8__.a.TASK_TYPE.REPEAT_LOGIN,
                                factory: MyTaskRule_RepeatLogin
                            }], a = !1, i = 0; i < t.length; i++) t[i].taskType == e.taskType && (e.methods = new t[i].factory(e), a = !0);
                        a || (null == e.ruleFragment1 ? e.methods = new MyTaskRule_Count(e) : null == e.ruleFragment2 ? e.methods = new MyTaskRule_Array(e) : e.methods = new MyTaskRule_Object(e))
                    }
                }]), e
            }(),
            MyTaskRuleBase = function() {
                function MyTaskRuleBase(e) {
                    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default()(this, MyTaskRuleBase), this.task = e, this._validateTask(), _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_5__.a.debugLog || (this.__debug = function() {})
                }
                return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default()(MyTaskRuleBase, [{
                    key: "_validateTask",
                    value: function() {
                        for (var e in _MyTasks__WEBPACK_IMPORTED_MODULE_8__.a.TASK_TYPE)
                            if (this.task.taskType == _MyTasks__WEBPACK_IMPORTED_MODULE_8__.a.TASK_TYPE[e]) return !0;
                        _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_5__.a.error("Unknown taskType", this.task.taskType)
                    }
                }, {
                    key: "resetStartVal",
                    value: function(e) {}
                }, {
                    key: "getValue",
                    value: function() {}
                }, {
                    key: "updateValue",
                    value: function(e) {
                        this.__debug("Updating values..", e, _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType]), this.updateValidatedValue(e), this.showPinnedTaskProgress(), _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.saveUserSettings(), this.__debug("Updating values COMPLETED:..", e, _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType])
                    }
                }, {
                    key: "incrementValue",
                    value: function(e) {
                        this.__debug("Increment values..", e, _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType]), this.incrementValidatedValue(e), this.showPinnedTaskProgress(), _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.saveUserSettings(), this.__debug("Increment values COMPLETED:..", e, _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType])
                    }
                }, {
                    key: "updateValidatedValue",
                    value: function(e) {}
                }, {
                    key: "incrementValidatedValue",
                    value: function(e) {}
                }, {
                    key: "notifyIfComplete",
                    value: function() {
                        var e = this.task.methods.isTaskCompleted();
                        this.__debug("notifyIfComplete:", e, !_my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksCompleted.includes(this.task.uid)), e && !_my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksCompleted.includes(this.task.uid) && (_my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksCompleted.push(this.task.uid), _MyTasks__WEBPACK_IMPORTED_MODULE_8__.a.RenderTaskFinishedNotification(this.task), _my_game_settings_MyAnalytics__WEBPACK_IMPORTED_MODULE_10__.a.LogTaskCompleted(this.task), _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.saveUserSettings())
                    }
                }, {
                    key: "updateAndNotify",
                    value: function(e) {
                        this.updateValue(e), this.notifyIfComplete()
                    }
                }, {
                    key: "incrementAndNotify",
                    value: function(e) {
                        this.incrementValue(e), this.notifyIfComplete()
                    }
                }, {
                    key: "isTaskCompleted",
                    value: function isTaskCompleted() {
                        var currentVal = this.getValue(),
                            success = eval(currentVal + this.task.taskMathOperator + this.task.goalNum);
                        return this.__debug("Evalauting tasks: [" + this.task.taskType + "]", "currently:", currentVal, this.task.taskMathOperator, this.task.goalNum, " - SUCCESS:", success), success
                    }
                }, {
                    key: "showPinnedTaskProgress",
                    value: function() {
                        var e = this.getValue();
                        _MyTasks__WEBPACK_IMPORTED_MODULE_8__.a._renderPinnedTaskProgress(this.task, e)
                    }
                }, {
                    key: "__debug",
                    value: function() {
                        for (var e, t = arguments.length, a = new Array(t), i = 0; i < t; i++) a[i] = arguments[i];
                        this.task.taskType == _MyTasks__WEBPACK_IMPORTED_MODULE_8__.a.TASK_TYPE.LEVEL_COMBOS && (e = console).warn.apply(e, [this.task.taskType].concat(a, [{
                            task: this.task,
                            stats: _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats
                        }]))
                    }
                }]), MyTaskRuleBase
            }(),
            MyTaskRule_Count = function(e) {
                function t() {
                    return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default()(this, t), _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1___default()(t).apply(this, arguments))
                }
                return _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(t, e), _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default()(t, [{
                    key: "resetStartVal",
                    value: function(e) {
                        this.__debug("resetStartVal count", e, _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType]), e && null != _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType] || (_my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType] = 0)
                    }
                }, {
                    key: "getValue",
                    value: function() {
                        return this.__debug("getValue count", _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType]), _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType]
                    }
                }, {
                    key: "updateValidatedValue",
                    value: function(e) {
                        _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType] = e
                    }
                }, {
                    key: "incrementValidatedValue",
                    value: function(e) {
                        _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType] += e
                    }
                }]), t
            }(MyTaskRuleBase),
            MyTaskRule_Array = function(e) {
                function t() {
                    return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default()(this, t), _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1___default()(t).apply(this, arguments))
                }
                return _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(t, e), _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default()(t, [{
                    key: "resetStartVal",
                    value: function(e) {
                        this.__debug("resetStartVal array", e, _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType]), e && null != _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType] || (_my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType] = {}), e && null != _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1] || (_my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1] = 0)
                    }
                }, {
                    key: "getValue",
                    value: function() {
                        return this.__debug("getValue array", _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1]), _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1]
                    }
                }, {
                    key: "updateValidatedValue",
                    value: function(e) {
                        this.__debug("Really updating val by ", e), _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1] = e
                    }
                }, {
                    key: "incrementValidatedValue",
                    value: function(e) {
                        this.__debug("Really inceemneting val by ", e), _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1] += e
                    }
                }]), t
            }(MyTaskRuleBase),
            MyTaskRule_Object = function(e) {
                function t() {
                    return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default()(this, t), _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1___default()(t).apply(this, arguments))
                }
                return _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(t, e), _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default()(t, [{
                    key: "resetStartVal",
                    value: function(e) {
                        this.__debug("resetStartVal object", e, _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType]), e && null != _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType] || (_my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType] = {}), e && null != _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1] || (_my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1] = {}), e && null != _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1][this.task.ruleFragment2] || (_my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1][this.task.ruleFragment2] = 0)
                    }
                }, {
                    key: "getValue",
                    value: function() {
                        return this.__debug("getValue object", _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1][this.task.ruleFragment2]), _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1][this.task.ruleFragment2]
                    }
                }, {
                    key: "updateValidatedValue",
                    value: function(e) {
                        _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1][this.task.ruleFragment2] = e
                    }
                }, {
                    key: "incrementValidatedValue",
                    value: function(e) {
                        _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType][this.task.ruleFragment1][this.task.ruleFragment2] += e
                    }
                }]), t
            }(MyTaskRuleBase),
            MyTaskRule_RepeatLogin = function(e) {
                function t() {
                    return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default()(this, t), _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1___default()(t).apply(this, arguments))
                }
                return _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(t, e), _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default()(t, [{
                    key: "resetStartVal",
                    value: function(e) {
                        if (this.__debug("resetStartVal RepeatLogin", e, _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType]), !e || null == _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType]) {
                            var t = {
                                count: 0,
                                lastLogin: Date.now()
                            };
                            _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType] = t
                        }
                    }
                }, {
                    key: "getValue",
                    value: function() {
                        return _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType].count
                    }
                }, {
                    key: "updateValidatedValue",
                    value: function(e) {
                        var t = _my_game_settings_MyStorageUtils__WEBPACK_IMPORTED_MODULE_7__.a.gameSettings.tasksStats[this.task.taskType],
                            a = 864e5;
                        _helpers_MyDebug__WEBPACK_IMPORTED_MODULE_5__.a.taskLogin && (a = 1);
                        var i = e;
                        i > t.lastLogin + a && (t.count++, t.lastLogin = i)
                    }
                }]), t
            }(MyTaskRuleBase)
    },
    452: function(e, t, a) {
        e.exports = a(1145)
    },
    48: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return y
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(0),
            r = a(15),
            h = a(14),
            p = a(121),
            d = a(3),
            y = function() {
                function e(t) {
                    s()(this, e), this.myScene = t;
                    var a = "undefined";
                    o.a.isBT ? a = "ui/back_brick.png" : o.a.isBS2 ? a = "ui/popup_back.png" : o.a.isBS3 && (a = "ui/black.png"), this.topBrickwall = t.add.tileSprite(-o.a.gameWidth, -o.a.gameHeight, 3 * o.a.gameWidth, 1.5 * o.a.gameHeight, o.a.spriteKey, a), this.topBrickwall.setDisplayOrigin(0, 3), this.topBrickwall.setTileScale(1 / o.a.spriteScale, 1 / o.a.spriteScale), this.topBrickwall.setTilePosition(20, 59), this.botBrickwall = t.add.tileSprite(-o.a.gameWidth, o.a.gameHeight, 3 * o.a.gameWidth, 1.5 * o.a.gameHeight, o.a.spriteKey, a), this.botBrickwall.setDisplayOrigin(0, -3), this.botBrickwall.setTileScale(1 / o.a.spriteScale, 1 / o.a.spriteScale), this.botBrickwall.setTilePosition(0, -2), this.botBrickwall.y -= o.a.gameHeight / 2, this.topBrickwallStroke = t.add.tileSprite(-o.a.gameWidth, -o.a.gameHeight, 3 * o.a.gameWidth, 1.5 * o.a.gameHeight + 3, o.a.spriteKey, "ui/gray.png"), this.topBrickwallStroke.setDisplayOrigin(0, 3), this.topBrickwallStroke.setTileScale(1 / o.a.spriteScale, 1 / o.a.spriteScale), this.botBrickwallStroke = t.add.tileSprite(-o.a.gameWidth, o.a.gameHeight, 3 * o.a.gameWidth, 1.5 * o.a.gameHeight + 6, o.a.spriteKey, "ui/gray.png"), this.botBrickwallStroke.setDisplayOrigin(0, 0), this.botBrickwallStroke.setTileScale(1 / o.a.spriteScale, 1 / o.a.spriteScale), this.botBrickwallStroke.y -= o.a.gameHeight / 2, d.a.mySpriteDepth(d.a.RENDER_DEPTH.TRANSITION, this.botBrickwallStroke), d.a.mySpriteDepth(d.a.RENDER_DEPTH.TRANSITION, this.botBrickwall), d.a.mySpriteDepth(d.a.RENDER_DEPTH.TRANSITION, this.topBrickwallStroke), d.a.mySpriteDepth(d.a.RENDER_DEPTH.TRANSITION, this.topBrickwall), this.posTopbrickClosedY = this.topBrickwall.y, this.posBotbrickClosedY = this.botBrickwall.y, this.posTopbrickOpenY = this.posTopbrickClosedY - o.a.gameHeight / 2 + h.a.cameraOffset.y, this.posBotbrickOpenY = this.posBotbrickClosedY + o.a.gameHeight / 2 - h.a.cameraOffset.y, this.botBrickwall.y = this.posBotbrickClosedY, this.botBrickwallStroke.y = this.botBrickwall.y, this.tweenTop = null, this.tweenBot = null, this._TRANSITION_STATES = {
                        OPEN: "open",
                        CLOSED: "closed",
                        ANIMATING: "animating"
                    }, this._transitionState = this._TRANSITION_STATES.CLOSED, this.myOnResize(), p.a(this.myScene, this.myScene.game.events, "LevelEditoSceneResize", this.myOnResize, this)
                }
                return l()(e, [{
                    key: "transitionOpen",
                    value: function() {
                        return this.transitionToggle(!0), this
                    }
                }, {
                    key: "clearSlides",
                    value: function() {
                        return this.topBrickwall.y = this.posTopbrickOpenY, this.botBrickwall.y = this.posBotbrickOpenY, this.topBrickwallStroke.y = this.topBrickwall.y, this.botBrickwallStroke.y = this.botBrickwall.y, this._transitionState = this._TRANSITION_STATES.OPEN, this
                    }
                }, {
                    key: "transitionToggle",
                    value: function(e, t) {
                        var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                        if (this._transitionState = this._TRANSITION_STATES.ANIMATING, this.passedAlongSceneData = a, o.a.isBS2 || o.a.isBS3) this._transitionCompleted(e, t);
                        else {
                            var i = this.posTopbrickOpenY,
                                s = this.posBotbrickOpenY;
                            e || (i = this.posTopbrickClosedY, s = this.posBotbrickClosedY);
                            var n = 0;
                            e && (n = 550), null != this.tweenTop && this.tweenTop.remove(), null != this.tweenBot && this.tweenBot.remove();
                            var l = this;
                            this.tweenTop = this.myScene.tweens.add({
                                targets: [this.topBrickwall, this.topBrickwallStroke],
                                y: i,
                                ease: "Quart.easeIn",
                                duration: 300,
                                delay: n,
                                onComplete: l._transitionCompleted.bind(this, e, t),
                                onStart: function() {
                                    e ? r.a.playSound(l.myScene, r.a.SND.UI_SLIDE_UP) : r.a.playSound(l.myScene, r.a.SND.UI_SLIDE_DOWN)
                                }
                            }), this.tweenBot = this.myScene.tweens.add({
                                targets: [this.botBrickwall, this.botBrickwallStroke],
                                y: s,
                                ease: "Quart.easeIn",
                                duration: 300,
                                delay: n
                            })
                        }
                    }
                }, {
                    key: "_transitionCompleted",
                    value: function(e, t) {
                        e ? (this._transitionState = this._TRANSITION_STATES.OPEN, null != this.tweenBot && this.tweenBot.remove(), this.myOnResize()) : (this._transitionState = this._TRANSITION_STATES.CLOSED, this.myScene.scene.start(t, this.passedAlongSceneData))
                    }
                }, {
                    key: "myOnResize",
                    value: function() {
                        this._transitionState == this._TRANSITION_STATES.OPEN && (this.posTopbrickOpenY = this.posTopbrickClosedY - o.a.gameHeight / 2 + h.a.cameraOffset.y, this.posBotbrickOpenY = this.posBotbrickClosedY + o.a.gameHeight / 2 - h.a.cameraOffset.y, this.topBrickwall.y = this.posTopbrickOpenY, this.botBrickwall.y = this.posBotbrickOpenY, this.topBrickwallStroke.y = this.topBrickwall.y, this.botBrickwallStroke.y = this.botBrickwall.y)
                    }
                }]), e
            }()
    },
    49: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(40),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(19),
            c = a.n(_),
            m = a(168),
            u = a.n(m),
            g = a(7),
            v = a.n(g),
            f = a(2),
            S = a(16),
            E = a(73),
            x = a(50),
            T = function(e) {
                function t(e, a, i, n, l, o) {
                    var h, d, y;
                    return s()(this, t), y = r()(this, v()(t).call(this, e, a, i, o)), u()((h = p()(y), v()(t.prototype)), "bodyType", x.a.AABB, h, !0), y.size = new S.a(l.x - n.x, l.y - n.y), y.sizeHalf = new S.a(y.size.x / 2, y.size.y / 2), y._p1 = n.copy(), y._p2 = l.copy(), y.pos = n.plus(y.sizeHalf), c()((d = p()(y), v()(t.prototype)), "_pBodyInit", d).call(d), y
                }
                return y()(t, e), l()(t, [{
                    key: "_pBodyResize",
                    value: function(e) {
                        c()(v()(t.prototype), "_pBodyResize", this).call(this), void 0 === e && f.a.error("Cant resize AABB pBody without entering new {size} Vector2"), this.size.x = e.x, this.size.y = e.y, this.sizeHalf = new S.a(e.x / 2, e.y / 2), this._p1.x = this.pos.x - this.sizeHalf.x, this._p1.y = this.pos.y - this.sizeHalf.y, this._p2.x = this.pos.x + this.sizeHalf.x, this._p2.y = this.pos.y + this.sizeHalf.y
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, a, i) {
                        c()(v()(t.prototype), "myFixedPostUpdate", this).call(this, e, a, i), this.isStatic || this._pBodyResize(this.size)
                    }
                }, {
                    key: "_debugDraw",
                    value: function() {
                        c()(v()(t.prototype), "_debugDraw", this).call(this), this.debugGraphics.fillRect(this._p1.x, this._p1.y, this.size.x, this.size.y), this.debugGraphics.strokeRect(this._p1.x, this._p1.y, this.size.x, this.size.y)
                    }
                }]), t
            }(E.a);
        t.a = T
    },
    50: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return i
        }));
        var i = {
            NONE: "none",
            AABB: "aabb",
            CIRCLE: "circle"
        }
    },
    53: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(0),
            r = a(3),
            h = a(9),
            p = a(8),
            d = a(42),
            y = a(78),
            _ = a(28),
            c = a(21),
            m = a(37),
            u = a(2),
            g = a(18),
            v = a(12),
            f = function() {
                function e(t, a, i) {
                    s()(this, e), this.gameScene = t, this.callback = a, this.passThroughDataToCallback = i
                }
                return l()(e, [{
                    key: "showMenu",
                    value: function() {
                        if (this.startReviveTimer = this.gameScene.time.now, this.TOTAL_TIME_FOR_CLICK = 4400, this.gameScene.setCanPlayerPause(!1), this.background = new h.a(this.gameScene, -o.a.gameWidth, -o.a.gameHeight, o.a.spriteKey, "ui/black.png", 1, r.a.RENDER_DEPTH.CONTINUE_MENU), this.background.alpha = .55, this.background.setDisplaySize(3 * o.a.gameWidth, 3 * o.a.gameHeight), this.background.setDisplayOrigin(.5), this.background.setInteractive(), this.btnX = .5 * o.a.gameWidth, this.btnY = .25 * o.a.gameHeight, this.btnW = 140, this.btnH = 120, this.reward_btn = new c.a(this.gameScene, this.btnX, this.btnY, this.btnW, this.btnH, {
                                icon: "ui/btn/reward_video.psd",
                                size: 32,
                                fixY: 6
                            }, this._btnShowRewardAd.bind(this), null, null, !0, !0, "reward"), this.reward_btn.setDepthMyUIButton(r.a.RENDER_DEPTH.CONTINUE_MENU), this.reward_btn.myIcon.y -= 15, this.myText = this.gameScene.add.bitmapText(this.btnX, this.btnY + 40, o.a.fontNames.MENU, _.a.BT1.REVIVE, 30), this.myText.setOrigin(.5, .5), r.a.mySpriteDepth(r.a.RENDER_DEPTH.CONTINUE_MENU, this.myText), g.a.isPoki && m.a.adBlockerEnabled) {
                            this.myText.alpha = .75, this.reward_btn.buttonIsActive = !1, null != this.reward_btn.myText && (this.reward_btn.myText.alpha = .75), null != this.reward_btn.myIcon && (this.reward_btn.myIcon.alpha = .75), this.reward_btn.focusedNinePatch.setVisibleNinePatch(!1), this.reward_btn.backgroundNinePatch.ninePatch.alpha = .75, this.reward_btn.backgroundNinePatch.ninePatch.removeInteractive(), this.black2 = new h.a(this.gameScene, .5 * o.a.gameWidth, .55 * o.a.gameHeight, o.a.spriteKey, "ui/black.png", 1, r.a.RENDER_DEPTH.CONTINUE_MENU), this.black2.alpha = .35, this.black2.displayWidth = 310, this.black2.displayHeight = 30;
                            var e = -9;
                            o.a.isBS2 && (e = -15), this.adblockerInfo = this.gameScene.add.bitmapText(.5 * o.a.gameWidth, .55 * o.a.gameHeight + e, o.a.fontNames.MENU, "Please disable Ad Blocker", 26), this.adblockerInfo.x -= this.adblockerInfo.width / 2, r.a.mySpriteDepth(r.a.RENDER_DEPTH.CONTINUE_MENU, this.adblockerInfo)
                        }
                        this.progress = this.gameScene.add.graphics(), r.a.mySpriteDepth(r.a.RENDER_DEPTH.CONTINUE_MENU, this.progress), this.timer = this.gameScene.time.addEvent({
                            delay: 1,
                            callback: this._updateProgressbar,
                            callbackScope: this,
                            loop: !0
                        })
                    }
                }, {
                    key: "_btnShowRewardAd",
                    value: function() {
                        this.timer.remove(), m.a.showAd(this.gameScene, m.a.PLACEMENTS.REWARD, this.rewardAdCompleted.bind(this))
                    }
                }, {
                    key: "_updateProgressbar",
                    value: function() {
                        var e = (this.gameScene.time.now - this.startReviveTimer) / this.TOTAL_TIME_FOR_CLICK;
                        this.progress.clear(), this.progress.fillStyle(13949193, 1), this.progress.fillRect(this.btnX - this.btnW / 2, this.btnY + this.btnH / 2, this.btnW * (1 - e), 20), e >= 1 && (this.timer.remove(), this._clearMenuItems(), this.gameScene.lives.rewardADResult(!1, this.passThroughDataToCallback))
                    }
                }, {
                    key: "rewardAdCompleted",
                    value: function(e) {
                        u.a.log("REVIVE", "Ad completed. Reward:" + e + ". Passthroughdata:", this.passThroughDataToCallback), this._clearMenuItems(), v.a.TaskIncrement(this.gameScene, v.a.TASK_TYPE.TOTAL_REVIVES, 1), this.callback(e, this.passThroughDataToCallback)
                    }
                }, {
                    key: "_clearMenuItems",
                    value: function() {
                        this.background.destroy(), this.progress.destroy(), this.reward_btn.destroyMyUIButton(), this.myText.destroy(), this.adblockerInfo && (this.adblockerInfo.destroy(), this.black2.destroy())
                    }
                }]), e
            }(),
            S = a(38),
            E = a(72),
            x = (a(203), function() {
                function e(t) {
                    s()(this, e), this.gameScene = t, this.livesSprites = {
                        p1: [],
                        p2: []
                    }, this.myInit()
                }
                return l()(e, [{
                    key: "myInit",
                    value: function() {
                        this._drawLives(1), this._drawLives(2)
                    }
                }, {
                    key: "_drawLives",
                    value: function(e) {
                        if (!o.a.isBS2 && !o.a.isBS3 || 2 != e) {
                            var t = 0,
                                a = 0,
                                i = "",
                                s = "",
                                n = 1;
                            o.a.isBT ? (t = 0, a = 406, 2 == e && (t = 464), i = "ui/life_full.png", s = "ui/life_empty.png", n = 25) : (o.a.isBS2 || o.a.isBS3) && (t = 25, a = 457, 2 == e && (t = 467), i = "ui/ingame/interface_life.png", s = "ui/blank.png", n = 18.4), this._drawLivesGameDependent(t, a, e, i, s, n)
                        }
                    }
                }, {
                    key: "_drawLivesGameDependent",
                    value: function(t, a, i, s, n, l) {
                        for (var p = this.livesSprites["p" + i], d = 0; d < o.a.livesVisible; d++) {
                            var y = "";
                            y = d < e.crntLives[i] ? s : n, p.length < o.a.livesVisible ? p[d] = new h.a(this.gameScene, t + 18 + d * l, a, o.a.spriteKey, y, 1, r.a.RENDER_DEPTH.UIOVER) : p[d].setFrame(y), this.gameScene.CrntLvl.isEditorLevel && (p[d].visible = !1)
                        }
                    }
                }, {
                    key: "addLife",
                    value: function(t) {
                        (o.a.isBS2 || o.a.isBS3) && (t = 1), e.crntLives[t]++, this._drawLives(t)
                    }
                }, {
                    key: "_removeLife",
                    value: function(t) {
                        if (this.gameScene.showControlsOnStart.initialized) return !1;
                        (o.a.isBS2 || o.a.isBS3) && (t = 1);
                        var a = !1;
                        return u.a.log("MY_LIVES", "Testing:" + e.crntLives[t] + "==1 && " + e.usedContinueForThisGame[t] + "==false"), u.a.log("MY_LIVES", "Pl id:" + t), 1 == e.crntLives[t] && 0 == e.usedContinueForThisGame[t] && (a = !0, e.usedContinueForThisGame[t] = !0), e.crntLives[t]--, a
                    }
                }, {
                    key: "_anyLivesLeft",
                    value: function() {
                        if (u.a.log("REVIVE", "testing lives", e.crntLives), o.a.isBT) {
                            if (e.crntLives[1] > 0 || e.crntLives[2] > 0) return !0
                        } else if ((o.a.isBS2 || o.a.isBS3) && e.crntLives[1] > 0) return !0;
                        return !1
                    }
                }, {
                    key: "isGameOver",
                    value: function(e, t) {
                        var a = [];
                        if (t == d.a.DEATH_REASON.BALL || t == d.a.DEATH_REASON.SPIKES ? 1 == this._removeLife(e.playerId) && a.push(e.playerId) : t == d.a.DEATH_REASON.TIMEBAR && (1 == this._removeLife(1) && a.push(1), o.a.isBT && 1 == this._removeLife(2) && a.push(2)), u.a.log("MY_LIVES", "Award recepients", a), a.length > 0) {
                            var i = new f(this.gameScene, this.rewardADResult.bind(this), {
                                recepients: a,
                                REASON: t
                            });
                            return this.gameScene.time.delayedCall(500, i.showMenu, [], i), !0
                        }
                        return 0 == this._anyLivesLeft() && (u.a.log("REVIVE", "No more lives left."), this.gameIsOver(), !0)
                    }
                }, {
                    key: "rewardADResult",
                    value: function(t, a) {
                        if (t) {
                            for (var i in u.a.log("REVIVE", "Success", a), this.gameScene.timebar.addTime(15), this.gameScene.players) this.gameScene.players[i].pbActive = !0, o.a.isBT ? 0 == e.crntLives[i] && (e.crntLives[i]++, this.gameScene.players[i].playerShield.addShield(E.a.SHIELD_TYPES.PLAIN)) : (e.crntLives[1] = 1, this.gameScene.players[i].playerShield.addShield(E.a.SHIELD_TYPES.PLAIN));
                            new S.a(this.gameScene, S.a.MESSAGES.GET_READY, 1.5).myInit(), this.gameScene.time.delayedCall(1500, this.gameScene.myPauseGame, [!1, !1, y.a.PAUSE_REASONS.REVIVED], this.gameScene), this.gameScene.time.delayedCall(1500, this.gameScene.setCanPlayerPause, [!0], this.gameScene), this.gameScene.input.keyboard.resetKeys(), this.gameScene.levelReceivedRevive = !0
                        } else 0 == this._anyLivesLeft() ? this.gameIsOver() : this.gameScene.playerDiedAnimation(a.recepients[0], a.REASON)
                    }
                }, {
                    key: "gameIsOver",
                    value: function() {
                        v.a.TaskIncrement(this.gameScene, v.a.TASK_TYPE.GAMES_PLAYED, 1);
                        var e = "BT1_MainMenu";
                        o.a.isBS2 && (e = null == p.a.customPack ? "BS2_MainMenu" : "BS2_MoreLevels"), o.a.isBS3 && (e = "BS3_MainMenu"), new S.a(this.gameScene, S.a.MESSAGES.GAME_OVER, 1.8, this.gameScene.myTransition.transitionToggle.bind(this.gameScene.myTransition, !1, e)).myInit()
                    }
                }]), e
            }());
        x._START_LIVES = 3, 0 != u.a.overrideLives && (x._START_LIVES = u.a.overrideLives), x.crntLives = [], x.resetLives = function(e) {
            x.crntLives = [], x.crntLives[1] = 0, x.crntLives[2] = 0, x.levelSpawnedLife = [], x.crntLives[1] = x._START_LIVES, o.a.isBT && e == p.a.MODES.TWOP && (x.crntLives[2] = x._START_LIVES), x.usedContinueForThisGame = [], x.usedContinueForThisGame[1] = !1, x.usedContinueForThisGame[2] = !1
        }, x.levelSpawnedLife = [], x.usedContinueForThisGame = [];
        t.a = x
    },
    54: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = (a(70), a(32)),
            r = a(4),
            h = a(2),
            p = a(0),
            d = a(1),
            y = function() {
                function e(t, a) {
                    s()(this, e), this.gameScene = t, this._levelBallInfo = a, this.activeBalls = {}, this._calcdBallInfo = {}, this._calcdMaxYSpeeds = {}, this._timedEvent = null, this._timedEventCounter = 20
                }
                return l()(e, [{
                    key: "myInit",
                    value: function() {}
                }, {
                    key: "initBallSpeeds",
                    value: function(e) {}
                }, {
                    key: "getPopScore",
                    value: function(e) {}
                }, {
                    key: "removeBall",
                    value: function(e) {
                        for (var t = 0; t < this.activeBalls[e.ballColor].length; t++)
                            if (this.activeBalls[e.ballColor][t] === e) {
                                this.activeBalls[e.ballColor].splice(t, 1);
                                break
                            } var a = this._checkBallColorCount(e);
                        h.a.log("Popped ball. ", e.ballColor, ", type: ", e._ballType, ", left count:" + a, this.activeBalls[e.ballColor]), 0 == a ? (e._ballType == d.a.BALL_TYPE.REVERSE ? this.gameScene.myEventManager.dispatchEvent(o.a.EVENT_TYPE.COLOR_POPPED, d.a.BALL_TYPE.REVERSE) : this.gameScene.myEventManager.dispatchEvent(o.a.EVENT_TYPE.COLOR_POPPED, e.ballColor), this._areAllcolor_popped() && this._allBubblesArePopped()) : this.checkForBallOutOfBounds(), r.a.gameSettings.totalBubblesPopped++
                    }
                }, {
                    key: "checkForBallOutOfBounds",
                    value: function() {
                        for (var e in this.activeBalls)
                            for (var t = 0; t < this.activeBalls[e].length; t++) {
                                var a = this.activeBalls[e][t];
                                if (a.pos.x < -100 || a.pos.x > p.a.gameAreaMax.x + 100 || a.pos.y < -100 || a.pos.y > p.a.gameAreaMax.y + 100) return h.a.error("Found a ball out of bounds!. DESTROYING IT NOW.", a), void a.myOnDestroy()
                            }
                    }
                }, {
                    key: "addBall",
                    value: function(e) {
                        this.activeBalls[e.ballColor] = this.activeBalls[e.ballColor] || [], this.activeBalls[e.ballColor].push(e)
                    }
                }, {
                    key: "_areAllcolor_popped",
                    value: function() {
                        for (var e in this.activeBalls)
                            for (var t = this.activeBalls[e], a = 0; a < t.length; a++) {
                                var i = t[a];
                                if (!i._isMetal && !i._isWarp) return h.a.log("BALL_MANAGER", "This color not yet popped: " + i.ballColor), !1
                            }
                        return this.gameScene.myEventManager.dispatchEvent(o.a.EVENT_TYPE.ALL_POPPED), !0
                    }
                }, {
                    key: "_allBubblesArePopped",
                    value: function() {
                        h.a.log("BallManager", "All balls popped"), this.gameScene.setCanPlayerPause(!1), this.gameScene.timebar.timebarStopped = !0, this._timedEvent = this.gameScene.time.addEvent({
                            delay: 250,
                            callback: this._checkPointItemsAndFinishLevel,
                            callbackScope: this,
                            loop: !0
                        })
                    }
                }, {
                    key: "_checkPointItemsAndFinishLevel",
                    value: function() {
                        var e = !1;
                        this.gameScene.itemManager.allItems.forEach((function(t) {
                            t.isPointsItem && (e = !0)
                        })), e && this._timedEventCounter > 0 ? this._timedEventCounter-- : (this._timedEvent.remove(!1), this.gameScene.levelComplete())
                    }
                }, {
                    key: "_checkBallColorCount",
                    value: function(e) {
                        var t = 0;
                        if (e._ballType == d.a.BALL_TYPE.REVERSE)
                            for (var a in this.activeBalls)
                                for (var i = this.activeBalls[a], s = 0; s < i.length; s++) {
                                    (e = i[s])._ballType != d.a.BALL_TYPE.REVERSE || e._isMetal || e._isWarp || t++
                                } else
                                    for (s = 0; s < this.activeBalls[e.ballColor].length; s++) {
                                        (e = this.activeBalls[e.ballColor][s])._ballType == d.a.BALL_TYPE.REVERSE || e._isMetal || e._isWarp || t++
                                    }
                        return t
                    }
                }]), e
            }();
        y.COL_NAME = {
            RED: "red",
            BLUE: "blue",
            GREEN: "green",
            ORANGE: "orange",
            PURPLE: "purple",
            YELLOW: "yellow",
            BLUEGREEN: "bluegreen",
            PINK: "pink"
        }, y.COL_NAME_BT1_ONLY = {
            RED: "red",
            BLUE: "blue",
            GREEN: "green",
            ORANGE: "orange",
            PURPLE: "purple",
            YELLOW: "yellow"
        }, t.a = y
    },
    58: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(18),
            r = a(23),
            h = a(28),
            p = a(21),
            d = a(4),
            y = a(2),
            _ = a(0),
            c = function() {
                function e(t) {
                    var a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : _.a.gameWidth / 2,
                        i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 35;
                    if (s()(this, e), !o.a.isCordova && !y.a.debugLog) return y.a.log("STORE", "Not shwoing remove-ads on non-cordova."), void(e._activeButton = null);
                    if (d.a.gameSettings.noads && !y.a.noAdIgnore) return y.a.log("STORE", "Not shwoing remove-ads, already purchased no ads."), void(e._activeButton = null);
                    var n = 4;
                    _.a.isBT ? this.btn_background = new r.a(t, a, i, 180, 67, "ui/main_menu_back.png", {
                        top: 30,
                        bottom: 30,
                        left: 30,
                        right: 30
                    }) : (_.a.isBS2 || _.a.isBS3) && (n = 0), this.btn = new p.a(t, a, i, 150, 40, {
                        text: h.a.BT1.REMOVE_ADS,
                        size: 27,
                        fixY: n
                    }, this.initiatePurchase.bind(this)), e._activeButton = this, this.currentScene = t, this.purchaseLoadingScreen = null, o.a.isCordova || (this.btn_background && (this.btn_background.ninePatch.alpha = .5), this.btn.backgroundNinePatch.alpha = .5, this.btn.myText.alpha = .5)
                }
                return l()(e, [{
                    key: "initiatePurchase",
                    value: function() {
                        y.a.log("STORE", "Initiated purchase now."), store.order(e.PRODUCTS.tier3), e.removePleaseWaitBackground("initiatePurchase"), this.purchaseLoadingScreen = this.currentScene.add.container();
                        var t = new Phaser.Geom.Rectangle(-1e3, -1e3, 3e3, 3e3),
                            a = this.currentScene.add.graphics();
                        a.fillStyle(0, .8), a.fillRectShape(t), a.setInteractive({
                            hitArea: t,
                            hitAreaCallback: Phaser.Geom.Rectangle.Contains
                        }), this.purchaseLoadingScreen.add(a);
                        var i = this.currentScene.add.bitmapText(_.a.gameWidth / 2, _.a.gameHeight / 2, _.a.fontNames.MENU, "PLEASE WAIT...", 30);
                        i.x -= i.width / 2, i.y -= i.height / 2, this.purchaseLoadingScreen.add(i)
                    }
                }], [{
                    key: "initializeStore",
                    value: function() {
                        _.a.isBS2 ? e.PRODUCTS.tier3 = "com.kresogames.bubblestruggle2.tier3" : _.a.isBS3 && (e.PRODUCTS.tier3 = "com.kresogames.bubbletrouble3.tier3"), o.a.isCordova && (y.a.debugLog && (store.verbosity = store.DEBUG), store.register({
                            id: e.PRODUCTS.tier3,
                            type: store.NON_CONSUMABLE
                        }), store.error((function(t) {
                            y.a.log("STORE", "STORE ERROR " + t.code + ": " + t.message), e.removePleaseWaitBackground("error")
                        })), store.when(e.PRODUCTS.tier3).cancelled(e.cancelledProduct), store.when(e.PRODUCTS.tier3).error(e.errorProduct), store.when(e.PRODUCTS.tier3).updated(e._processIAPs), store.when(e.PRODUCTS.tier3).approved((function(t) {
                            y.a.log("STORE", "BOUGHT COMPLETED", t), t.finish(), d.a.gameSettings.noads = !0, d.a.saveUserSettings(), e.hideActiveButton(), e.removePleaseWaitBackground("purchaseApproved")
                        })), store.refresh())
                    }
                }, {
                    key: "_processIAPs",
                    value: function() {
                        var t = store.get(e.PRODUCTS.tier3);
                        return y.a.log("STORE", "SHOWING BUY BUTTON CALLED>", t, t.state), t ? t.state === store.REGISTERED ? (y.a.log("STORE", "product.state === store.REGISTERED"), !0) : t.state === store.INVALID ? (y.a.log("STORE", "product.state === store.INVALID"), !1) : (y.a.log("STORE", "product loaded and valid. Is it owned:", t.owned), t.owned ? d.a.gameSettings.noads = !0 : d.a.gameSettings.noads = !1, d.a.saveUserSettings(), void e.hideActiveButton()) : (y.a.log("STORE", "product is null"), !1)
                    }
                }, {
                    key: "errorProduct",
                    value: function(t) {
                        y.a.log("STORE", "PRODUCT ERROR ", t), e.removePleaseWaitBackground("error_product")
                    }
                }, {
                    key: "cancelledProduct",
                    value: function(t) {
                        y.a.log("STORE", "PRODUCT CANCELED "), e.removePleaseWaitBackground("canceledProduct")
                    }
                }, {
                    key: "removePleaseWaitBackground",
                    value: function(t) {
                        y.a.log("STORE", "Removing background because reason: ", t), null != e._activeButton && null != e._activeButton.purchaseLoadingScreen && (e._activeButton.purchaseLoadingScreen && e._activeButton.purchaseLoadingScreen.destroy(), e._activeButton.purchaseLoadingScreen = null)
                    }
                }]), e
            }();
        c._activeButton = null, c.hideActiveButton = function() {
            null != c._activeButton && null == c._activeButton.btn && d.a.gameSettings.noads && (c._activeButton.btn.setVisibleMyUIButton(!1), c._activeButton.btn_background && c._activeButton.btn_background.setVisibleNinePatch(!1), c._activeButton = null)
        }, c.PRODUCTS = {
            tier3: "com.kresogames.bubbletrouble.tier3"
        }, t.a = c
    },
    65: function(e, t, a) {
        "use strict";
        a.r(t), a.d(t, "default", (function() {
            return n
        }));
        var i = a(5),
            s = a.n(i),
            n = function e() {
                s()(this, e)
            }
    },
    67: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return u
        }));
        var i = a(5),
            s = a.n(i),
            n = a(10),
            l = a.n(n),
            o = a(7),
            r = a.n(o),
            h = a(40),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(0),
            c = (a(3), a(14)),
            m = a(20),
            u = function(e) {
                function t(e) {
                    var a, i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    s()(this, t), e.cameras.main.scrollX = c.a.cameraOffset.x, e.cameras.main.scrollY = c.a.cameraOffset.y, e.cameras.main.setBackgroundColor(8750981);
                    var n = "undefined";
                    if (_.a.isBT ? n = "ui/back_brick.png" : _.a.isBS2 ? n = "ui/popup_back.png" : _.a.isBS3 && (n = "ui/black.png"), a = l()(this, r()(t).call(this, e, -_.a.gameWidth, -_.a.gameHeight, 2 * _.a.gameWidth, 2 * _.a.gameHeight, _.a.spriteKey, n)), e.add.existing(p()(a)), a.setDisplaySize(4 * _.a.gameWidth, 4 * _.a.gameHeight), a.setDisplayOrigin(.5, .5), a.setTileScale(_.a.spriteScale, _.a.spriteScale), a.y -= 25, _.a.isBS2 && i) {
                        var o = new Phaser.Geom.Rectangle(10, 10, _.a.gameWidth - 20, _.a.gameHeight - 20);
                        a.back_graphics = e.add.graphics(), a.back_graphics.fillStyle(8947848, .6), a.back_graphics.fillRectShape(o), a.back_graphics.lineStyle(1, 5329233, 1), a.back_graphics.strokeRectShape(o)
                    }
                    return _.a.isBS3 && m.a.isLazyLoaded && (a.backEdgeLeft = e.add.sprite(-_.a.gameWidth / 2, _.a.gameHeight / 2, "mainmenu_background"), a.backEdgeLeft.flipX = !0, a.backEdgeRight = e.add.sprite(1.5 * _.a.gameWidth, _.a.gameHeight / 2, "mainmenu_background"), a.backEdgeLeft.alpha = .5, a.backEdgeRight.alpha = a.backEdgeLeft.alpha), a
                }
                return y()(t, e), t
            }(Phaser.GameObjects.TileSprite)
    },
    70: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(40),
            p = a.n(h),
            d = a(19),
            y = a.n(d),
            _ = a(7),
            c = a.n(_),
            m = a(11),
            u = a.n(m),
            g = a(0),
            v = a(168),
            f = a.n(v),
            S = a(73),
            E = a(50),
            x = function(e) {
                function t(e, a, i, n, l, o) {
                    var h, d, _;
                    return s()(this, t), _ = r()(this, c()(t).call(this, e, a, i, o)), f()((h = p()(_), c()(t.prototype)), "bodyType", E.a.CIRCLE, h, !0), _.pos = n, _.radius = l, y()((d = p()(_), c()(t.prototype)), "_pBodyInit", d).call(d), _._pBodyResize(), _
                }
                return u()(t, e), l()(t, [{
                    key: "_pBodyResize",
                    value: function() {
                        y()(c()(t.prototype), "_pBodyResize", this).call(this)
                    }
                }, {
                    key: "_debugDraw",
                    value: function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                            a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                        y()(c()(t.prototype), "_debugDraw", this).call(this), this.debugGraphics.fillCircle(e || this.pos.x, a || this.pos.y, this.radius), this.debugGraphics.strokeCircle(e || this.pos.x, a || this.pos.y, this.radius)
                    }
                }]), t
            }(S.a),
            T = x,
            b = a(16),
            k = a(15),
            w = a(3),
            I = a(54),
            P = a(22),
            A = (a(42), a(9)),
            L = a(2),
            M = a(172),
            O = a(1),
            D = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "collideEdge",
                    value: function(e, t, a, i, s, n, l, o) {
                        return o.goType == O.a.GO_TYPE.WALL && o.wallType == O.a.WALL.WALL_TYPE.CEILSPIKE_BT1 ? (this.popBall({
                            reason: O.a.POP_REASON.BT1_SPIKES_TOP,
                            player: null,
                            obj: {}
                        }), !0) : e == O.a.PHY.COL_EDGE.TOP ? (this.pos.y += s, this.vel.y = this._maxSpeedY, !0) : void 0
                    }
                }, {
                    key: "_checkMaxY_BT",
                    value: function() {
                        this._prevSpeedY < 0 && this.vel.y > 0 && this.pos.y < this._maxY && (this._maxY = this.pos.y)
                    }
                }]), e
            }(),
            B = a(80),
            R = (a(30), a(174)),
            W = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "_collideEdgeDefault",
                    value: function(t, a, i, s, n, l, o, r) {
                        if (this._comboId = 1, this._spawnedBy = 0, r.goType == O.a.GO_TYPE.WALL) {
                            if (r.showInvisibleWall(!0), e._flipGhostBall(this), r.wallType == O.a.WALL.WALL_TYPE.CEILSPIKE_BT1) return L.a.error("This should not happen. How is BT1 ceil wall in BS2 or BS3?"), this.popBall({
                                reason: O.a.POP_REASON.BT1_SPIKES_TOP,
                                player: null,
                                obj: {}
                            }), !0;
                            if (r._isSpikey && t == O.a.PHY.COL_EDGE.BOTTOM) return this.popBall({
                                reason: O.a.POP_REASON.SPIKEBURST,
                                player: null,
                                obj: {}
                            }), !0;
                            if (r.wallType == O.a.WALL.WALL_TYPE.SPIKEALL && t != O.a.PHY.COL_EDGE.BOTTOM) return this.popBall({
                                reason: O.a.POP_REASON.SPIKEBURST,
                                player: null,
                                obj: {}
                            }), !0;
                            if (r.wallType == O.a.WALL.WALL_TYPE.CAVEIN_BS3 || r.wallType == O.a.WALL.WALL_TYPE.MOVING)
                                if (B.a.pBodySimCavein.radius = this.radius + 2, B.a.pBodySimCavein.vel.x = this.vel.x, B.a.pBodySimCavein.vel.y = this.vel.y, this.gameScene.phyEngine.simulateCollisions(B.a.pBodySimCavein, this.pos.x, this.pos.y, [P.a.LAYER.WALL]).isSquished) return this.popBall({
                                    reason: O.a.POP_REASON.SQUISH,
                                    player: null,
                                    obj: {}
                                }), !0;
                            if (t == O.a.PHY.COL_EDGE.TOP) {
                                if (this._ballType != O.a.BALL_TYPE.NORMAL && this._ballType != O.a.BALL_TYPE.REVERSE || (r.wallType == O.a.WALL.WALL_TYPE.CONV_BELT ? this.vel.x += r.convBeltSpeed / 4 : 0 != this._ballInfo.vx && (this._ballType == O.a.BALL_TYPE.NORMAL ? this.vel.x = this.vel.x / Math.abs(this.vel.x) * this.gameScene.ballManager._calcdBallInfo[this._ballType][this.ballColor].speedx : this.vel.x = this.vel.x / Math.abs(this.vel.x) * this.gameScene.ballManager._calcdBallInfo[this._ballType].speedx)), r.wallType == O.a.WALL.WALL_TYPE.TRAMPOLINE && (this.pos.y += n, r.trampolineBallBounce(o), this._ballType == O.a.BALL_TYPE.NORMAL)) return this.vel.y = this._maxSpeedY * R.a.SPEED_UP, this._maxY = this.pos.y + n - this._bounceHeight, !0;
                                if (r.wallType == O.a.WALL.WALL_TYPE.STICKY && this.vel.y > 0 && this._ballType == O.a.BALL_TYPE.NORMAL) return this.vel.y = -3, this.pos.y += n, !0
                            }
                        }
                    }
                }, {
                    key: "collideEdgeNormal",
                    value: function(t, a, i, s, n, l, o, r) {
                        if (e._collideEdgeDefault.call(this, t, a, i, s, n, l, o, r)) return !0;
                        if (t == O.a.PHY.COL_EDGE.BOTTOM && (o._doCheckMaxY = !1), t == O.a.PHY.COL_EDGE.TOP) {
                            if (r._softWall) {
                                var h = this.pos.y + n,
                                    p = h - this._maxY;
                                p <= 0 && (p = 1), this.pos.y = h, this.vel.y = -Math.sqrt(Math.abs(2 * this.acc.y * p))
                            } else this.pos.y += n, this.vel.y = this._maxSpeedY;
                            return !0
                        }
                    }
                }, {
                    key: "collideEdgeReverse",
                    value: function(t, a, i, s, n, l, o, r) {
                        if (e._collideEdgeDefault.call(this, t, a, i, s, n, l, o, r)) return !0;
                        if (t == O.a.PHY.COL_EDGE.TOP && (o._doCheckMaxY = !1), t == O.a.PHY.COL_EDGE.BOTTOM) {
                            if (r._softWall) {
                                var h = this.pos.y + n,
                                    p = h - this._maxY;
                                p >= 0 && (p = -1), this.pos.y = h, this.vel.y = Math.sqrt(Math.abs(2 * this.acc.y * p))
                            } else this.pos.y += n, this.vel.y = this._maxSpeedY;
                            return !0
                        }
                        t == O.a.PHY.COL_EDGE.TOP && (this.vel.y = -this.vel.y)
                    }
                }, {
                    key: "collideEdgePenta",
                    value: function(t, a, i, s, n, l, o, r) {
                        if (e._collideEdgeDefault.call(this, t, a, i, s, n, l, o, r)) return !0;
                        var h = Math.abs(o._pentaDir.x),
                            p = Math.abs(o._pentaDir.y);
                        return t == O.a.PHY.COL_EDGE.LEFT ? (this.tickInfo.vy < 0 ? this._ballInfo.rot > 0 ? p > 2 && (p--, h++) : p < 5 && (p++, h--) : this._ballInfo.rot > 0 ? p < 5 && (p++, h--) : p > 2 && (p--, h++), this.vel.y = this.gameScene.ballManager._calcdMaxYSpeeds.penta[this.ballColor][p], this.tickInfo.vy < 0 && (this.vel.y = -this.vel.y), this.vel.x = -this.gameScene.ballManager._calcdMaxYSpeeds.penta[this.ballColor][h]) : t == O.a.PHY.COL_EDGE.RIGHT ? (this.tickInfo.vy < 0 ? this._ballInfo.rot > 0 ? p < 5 && (p++, h--) : p > 2 && (p--, h++) : this._ballInfo.rot > 0 ? p > 2 && (p--, h++) : p < 5 && (p++, h--), this.vel.y = this.gameScene.ballManager._calcdMaxYSpeeds.penta[this.ballColor][p], this.tickInfo.vy < 0 && (this.vel.y = -this.vel.y), this.vel.x = this.gameScene.ballManager._calcdMaxYSpeeds.penta[this.ballColor][h]) : t == O.a.PHY.COL_EDGE.TOP ? (this.tickInfo.vx < 0 ? this._ballInfo.rot > 0 ? p > 2 && (p--, h++) : p < 5 && (p++, h--) : this._ballInfo.rot > 0 ? p < 5 && (p++, h--) : p > 2 && (p--, h++), this.vel.x = this.gameScene.ballManager._calcdMaxYSpeeds.penta[this.ballColor][h], this.tickInfo.vx < 0 && (this.vel.x = -this.vel.x), this.vel.y = -this.gameScene.ballManager._calcdMaxYSpeeds.penta[this.ballColor][p]) : t == O.a.PHY.COL_EDGE.BOTTOM && (this.tickInfo.vx < 0 ? this._ballInfo.rot > 0 ? p < 5 && (p++, h--) : p > 2 && (p--, h++) : this._ballInfo.rot > 0 ? p > 2 && (p--, h++) : p < 5 && (p++, h--), this.vel.x = this.gameScene.ballManager._calcdMaxYSpeeds.penta[this.ballColor][h], this.tickInfo.vx < 0 && (this.vel.x = -this.vel.x), this.vel.y = this.gameScene.ballManager._calcdMaxYSpeeds.penta[this.ballColor][p]), this._pentaDir.x = h, this.vel.x < 0 && (this._pentaDir.x = -this._pentaDir.x), this._pentaDir.y = p, this.vel.y < 0 && (this._pentaDir.y = -this._pentaDir.y), this.pos.x += s, this.pos.y += n, !0
                    }
                }, {
                    key: "_flipGhostBall",
                    value: function(e) {
                        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                        if (e._isGhost)
                            if (t || (e._isGhostOn = !e._isGhostOn), e._isGhostOn) {
                                var a = "bubbles/ghost_on.png";
                                e._ballType == O.a.BALL_TYPE.PENTA && (a = "bubbles/penta_ghost_on.png"), e._ghostSprite.setFrame(a)
                            } else {
                                a = "bubbles/ghost_off.png";
                                e._ballType == O.a.BALL_TYPE.PENTA && (a = "bubbles/penta_ghost_off.png"), e._ghostSprite.setFrame(a)
                            }
                    }
                }, {
                    key: "_checkMaxY_BS2_normal",
                    value: function() {
                        this.vel.y > 0 && this._prevSpeedY < 0 && Math.abs(this.pos.y - this._maxY) > 6 && (this._maxY = this.pos.y)
                    }
                }, {
                    key: "_checkMaxY_BS2_reverse",
                    value: function() {
                        this.vel.y < 0 && this._prevSpeedY > 0 && Math.abs(this.pos.y - this._maxY) > 6 && (this._maxY = this.pos.y)
                    }
                }]), e
            }(),
            N = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "getCollideEdge",
                    value: function(e) {
                        return g.a.isBT ? D.collideEdge.bind(e) : e._ballType == O.a.BALL_TYPE.NORMAL ? W.collideEdgeNormal.bind(e) : e._ballType == O.a.BALL_TYPE.PENTA ? W.collideEdgePenta.bind(e) : e._ballType == O.a.BALL_TYPE.REVERSE ? W.collideEdgeReverse.bind(e) : void 0
                    }
                }, {
                    key: "getCheckMaxY",
                    value: function(t) {
                        return g.a.isBT ? D._checkMaxY_BT.bind(t) : t._ballType == O.a.BALL_TYPE.NORMAL ? W._checkMaxY_BS2_normal.bind(t) : t._ballType == O.a.BALL_TYPE.REVERSE ? W._checkMaxY_BS2_reverse.bind(t) : e.doNothing.bind(t)
                    }
                }, {
                    key: "doNothing",
                    value: function() {}
                }]), e
            }(),
            C = a(20),
            U = a(12),
            Y = a(8),
            K = function(e) {
                function t(e, a) {
                    var i;
                    s()(this, t);
                    var n = new b.a(a.x, a.y),
                        l = a.id;
                    return (g.a.isBS2 || g.a.isBS3) && (n.x + g.a.ballSizes[l] > g.a.gameAreaMax.x ? n.x = g.a.gameAreaMax.x - g.a.ballSizes[l] : n.x - g.a.ballSizes[l] < g.a.gameAreaMin.x && (n.x = g.a.gameAreaMin.x + g.a.ballSizes[l])), (i = r()(this, c()(t).call(this, e, P.a.LAYER.BALL, P.a.LAYERS_BALL, n, g.a.ballSizes[l], {
                        mass: 1,
                        acc: b.a.ZERO,
                        useGravity: !1
                    })))._ballInfo = a, i.ballId = l, i._ballType = a.t || O.a.BALL_TYPE.NORMAL, i.ballColor = a.c || I.a.COL_NAME.RED, i._splitWay = a.splitWay || 2, i._isMetal = a.isMetal || !1, i._isWarp = a.warp || !1, i._isGhost = a.isGhost || !1, i._isGhostOn = !1, i._ghostSprite = null, i._comboId = a.comboId || 1, i._spawnedBy = a.spawnedBy || 0, i._maxSpeedY = 0, i._bounceHeight = 0, i._prevSpeedY = 0, i._maxY = 0, i._popSprite = null, i._checkMaxY = N.getCheckMaxY(p()(i)), i._doCheckMaxY = !1, i.collideEdge = N.getCollideEdge(p()(i)), i._ballContainer = i.gameScene.add.container(0, 0), i._pentaTween = null, i._pentaDir = b.a.ZERO, i._nonPlayerPopReasons = [O.a.POP_REASON.BT1_SPIKES_TOP, O.a.POP_REASON.SPIKEBURST, O.a.POP_REASON.SQUISH], i
                }
                return u()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        this.goType = O.a.GO_TYPE.BALL, this.myRenderDepth = w.a.RENDER_DEPTH.BALL, this.ignoreTimeScale = !1;
                        var e = "bubbles/",
                            a = g.a.spriteKey,
                            i = this.ballColor;
                        this._ballType == O.a.BALL_TYPE.REVERSE ? (e += "reverse", i = "") : g.a.isBT || g.a.isBS2 ? g.a.isBS2 && this._ballType == O.a.BALL_TYPE.PENTA ? e += "penta_" : e += "bubble_" : g.a.isBS3 && (e += (this._ballType + "_").toLowerCase()), this._ballType != O.a.BALL_TYPE.REVERSE && (C.a.isLazyLoaded ? i != I.a.COL_NAME.RED && (a = g.a.lazySpriteKey) : i = I.a.COL_NAME.RED);
                        var s = e + i + ".png";
                        if ((g.a.isBS2 || g.a.isBS3) && (this._ballInfo.isMetal && (a = g.a.spriteKey, s = "bubbles/metal.png", this._ballInfo.t == O.a.BALL_TYPE.PENTA && (s = "bubbles/metal_penta.png")), this._ballInfo.warp && (a = g.a.spriteKey, s = "bubbles/warp.png", this._ballInfo.t == O.a.BALL_TYPE.PENTA && (s = "bubbles/warp_penta.png"))), this.mySprite = new A.a(this.gameScene, 0, 0, a, s, g.a.ballSizes[this.ballId] / 50, this.myRenderDepth), this._ballContainer.add(this.mySprite), this.makeDepthAndScale(this._ballContainer, 1), (g.a.isBS2 || g.a.isBS3) && (this._ballInfo.isGhost && (this._ghostSprite = new A.a(this.gameScene, 0, 0, g.a.spriteKey, "bubbles/ghost_off.png", 1, this.myRenderDepth), this._ghostSprite.setScale(2 * g.a.ballSizes[this.ballId] / 100), this._ballContainer.add(this._ghostSprite), W._flipGhostBall(this, !0), this._stateSprites.push(this._ghostSprite)), 4 === this._ballInfo.splitWay && this._ballInfo.id > 1)) {
                            var n = t.GetDoubleSpriteName(this),
                                l = new A.a(this.gameScene, 0, 0, g.a.spriteKey, n, 1, this.myRenderDepth);
                            l.setScale(2 * g.a.ballSizes[this.ballId] / 100), this._ballContainer.add(l), this._stateSprites.push(l)
                        }
                        if (!g.a.isBS3) {
                            var o = this.gameScene.add.graphics();
                            if (o.lineStyle(1, 16777215, 1), this._ballType == O.a.BALL_TYPE.NORMAL || this._ballType == O.a.BALL_TYPE.REVERSE) {
                                var r = new Phaser.Geom.Circle(0, 0, g.a.ballSizes[this.ballId] + 1);
                                o.strokeCircleShape(r)
                            } else if (this._ballType == O.a.BALL_TYPE.PENTA) {
                                var h = t.GetPentaPoints(this.ballId, 0, 0);
                                o.strokePoints(h, !0)
                            }
                            this._ballContainer.add(o), this._stateSprites.push(o)
                        }
                        for (var p in this.gameScene.itemManager.allModifiers) p == O.a.ITEM_MANAGER.MOD_TYPE.FREEZE && M.a.freezeBall(this);
                        return this.gameScene.ballManager.initBallSpeeds(this), this.gameScene.ballManager.addBall(this), this._initializeStateEvent(), this.myUpdate(), this
                    }
                }, {
                    key: "popBall",
                    value: function(e) {
                        L.a.log("BALL", "Ball got popped!", this, e), this._attachPopAnim(), k.a.playRandom(this.gameScene, [k.a.SND.BALL_POP1, k.a.SND.BALL_POP2, k.a.SND.BALL_POP3]), this.ballId > 1 && (g.a.isBS2 || g.a.isBS3 || g.a.isBT && e.reason != O.a.POP_REASON.BT1_SPIKES_TOP) && this.gameScene.itemManager.popChecksForItem(this.pos.x, this.pos.y);
                        var a = !0;
                        null != e.player && e.player.playerId == this._spawnedBy || (a = !1), !this._nonPlayerPopReasons.includes(e.reason) || 1 != this._spawnedBy && 2 != this._spawnedBy || (a = !1), a && (this._comboId++, this._comboId >= 2 && this.gameScene.myGUI.addCombo(this._comboId, this));
                        var i = this.gameScene.ballManager.getPopScore(this);
                        if (g.a.isBT && (this._comboId = 1), this.gameScene.myGUI.addScore(i * this._comboId, e.player), null != e.player && U.a.TaskIncrement(this.gameScene, U.a.TASK_TYPE.TOTAL_BUBBLES_POPPED, 1), e.reason == O.a.POP_REASON.BT1_SPIKES_TOP) return U.a.TaskIncrement(this.gameScene, U.a.TASK_TYPE.LEVEL_COMBOS, .5, Y.a.currentLevel), this.gameScene.myCombo.showWallSpikeCombo(this.pos.x, this.pos.y), void this.myOnDestroy();
                        U.a.TaskIncrement(this.gameScene, U.a.TASK_TYPE.POP_REASON, 1, e.reason);
                        var s = this.ballId - 1;
                        if (0 != s) {
                            var n = JSON.parse(JSON.stringify(this._ballInfo));
                            delete n.stateData, n.x = this.pos.x - g.a.ballSizes[s] / 2, n.y = this.pos.y, n.id = s, 0 == n.vx && (n.vx = 1), n.vx = -Math.abs(n.vx), n.comboId = this._comboId, n.spawnSpeedY = this.vel.y, g.a.isBT && (n.vy = -1);
                            var l = this._spawnedBy;
                            e.reason == O.a.POP_REASON.SHIELD_PLAIN || e.reason == O.a.POP_REASON.SHIELD_TANK || e.reason == O.a.POP_REASON.SHOT ? l = e.player.playerId : e.reason != O.a.POP_REASON.BT1_SPIKES_TOP && e.reason != O.a.POP_REASON.DYNAMITE && e.reason != O.a.POP_REASON.MEDAL || (l = 3), n.spawnedBy = l;
                            var o = new t(this.gameScene, n).myInit();
                            n.x = this.pos.x + g.a.ballSizes[s] / 2, n.vx = Math.abs(n.vx);
                            var r = new t(this.gameScene, n).myInit();
                            if (3 === this._splitWay) {
                                n.vx = 0, n.x = this.pos.x;
                                new t(this.gameScene, n).myInit()
                            } else if (4 === this._splitWay) {
                                var h = g.a.ballSizes[s];
                                n.vx = Math.abs(n.vx), n.x = r.pos.x + h;
                                new t(this.gameScene, n).myInit();
                                n.vx = -Math.abs(n.vx), n.x = o.pos.x + h;
                                new t(this.gameScene, n).myInit();
                                o.pos.x -= h, r.pos.x -= h
                            }
                            this.myOnDestroy()
                        } else this.myOnDestroy()
                    }
                }, {
                    key: "myFixedPreUpdate",
                    value: function(e, a, i) {
                        y()(c()(t.prototype), "myFixedPreUpdate", this).call(this, e, a, i), this._doCheckMaxY = !0
                    }
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, a, i) {
                        y()(c()(t.prototype), "myFixedPostUpdate", this).call(this, e, a, i), this._doCheckMaxY && this._checkMaxY(), this._prevSpeedY = this.vel.y
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, t) {
                        this._ballContainer.x = this.pos.x, this._ballContainer.y = this.pos.y
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        this.gameScene.ballManager.removeBall(this), this._ballContainer.destroy(), y()(c()(t.prototype), "myOnDestroy", this).call(this)
                    }
                }, {
                    key: "myOnPause",
                    value: function(e) {
                        y()(c()(t.prototype), "myOnPause", this).call(this, e), this._ballType == O.a.BALL_TYPE.PENTA && (e ? this._pentaTween.pause() : this._pentaTween.resume())
                    }
                }, {
                    key: "_attachPopAnim",
                    value: function() {
                        var e = this,
                            t = 1;
                        if (1 == this.ballId && g.a.isBT) this._popSprite = new A.a(this.gameScene, this.pos.x, this.pos.y, g.a.spriteKey, "bubbles/pop_bubble_1.png", t, w.a.RENDER_DEPTH.BALL), this._popSprite.anims.play("pop"), this._popSprite.once("animationcomplete", (function() {
                            e._popSprite.destroy()
                        })), w.a.mySpriteScale(this._popSprite, 1);
                        else if (g.a.isBT || g.a.isBS2) {
                            t = g.a.ballSizes[this.ballId] / 100;
                            var a = "bubbles/bubble_" + this.ballColor + "_pop.png";
                            this._ballType == O.a.BALL_TYPE.REVERSE && (a = "bubbles/reverse_pop.png"), this._popSprite = new A.a(this.gameScene, this.pos.x, this.pos.y, g.a.spriteKey, a, 1.5 * t, w.a.RENDER_DEPTH.BALL);
                            this.gameScene.tweens.add({
                                targets: this._popSprite,
                                scale: .1,
                                ease: "Bounce",
                                duration: 200,
                                onComplete: function() {
                                    e._popSprite.destroy()
                                }
                            })
                        } else if (g.a.isBS3) {
                            t = g.a.ballSizes[this.ballId] / 100;
                            var i = g.a.spriteKey,
                                s = (a = "pop/_default/pop_1.png", "pop_default");
                            C.a.isLazyLoaded && this._ballType != O.a.BALL_TYPE.REVERSE && (i = g.a.lazySpriteKey, a = "pop/" + this.ballColor + "/pop_1.png", s = "pop_" + this.ballColor), this._popSprite = new A.a(this.gameScene, this.pos.x, this.pos.y, i, a, 2.5 * t, w.a.RENDER_DEPTH.BALL), this._popSprite.angle = 360 * Math.random(), this._popSprite.anims.play(s);
                            this.gameScene.tweens.add({
                                targets: this._popSprite,
                                scale: this._popSprite.scale,
                                ease: "Bounce",
                                duration: (this._popSprite.anims.getTotalFrames() + 1) * this._popSprite.anims.msPerFrame,
                                onComplete: function() {
                                    e._popSprite.destroy()
                                }
                            })
                        } else L.a.error("Unknown pop sprite.")
                    }
                }], [{
                    key: "GetPentaPoints",
                    value: function(e, t, a) {
                        var i = g.a.ballSizes[e] / 100 * 2;
                        i += .02;
                        var s = 48.8;
                        return new Phaser.Geom.Polygon([20 * i + t, -48.8 * i + a, 52.5 * i + t, (53 - s) * i + a, (57.7 - 45) * i + t, 51.2 * i + a, -45 * i + t, (75.7 - s) * i + a, -40 * i + t, (14.2 - s) * i + a]).points
                    }
                }, {
                    key: "GetDoubleSpriteName",
                    value: function(e) {
                        return g.a.isBS3 ? e._ballType == O.a.BALL_TYPE.REVERSE ? "bubbles/reverse_double.png" : "bubbles/" + e._ballType + "_" + e.ballColor + "_double.png" : "bubbles/double.png"
                    }
                }, {
                    key: "CreateTestBodies",
                    value: function(e) {
                        B.a.pBodySim = new T(e, P.a.LAYER.SIMULATION, P.a.LAYERS_NONE, new b.a(0, 0), 1), B.a.pBodySimCavein = new T(e, P.a.LAYER.SIMULATION, P.a.LAYERS_NONE, new b.a(0, 0), 1)
                    }
                }]), t
            }(T);
        K.POP_REASON = {
            SHIELD_PLAIN: "shield_plain",
            SHOT: "shot",
            BT1_SPIKES_TOP: "bt1_spikes_top",
            SPIKEBURST: "spikeburst",
            DYNAMITE: "dynamite",
            MEDAL: "medal",
            SHIELD_TANK: "shield_tank"
        };
        t.a = K
    },
    71: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(0),
            c = a(3),
            m = (a(78), a(1)),
            u = function(e) {
                function t(e) {
                    var a;
                    return s()(this, t), (a = r()(this, p()(t).call(this, e))).modType = m.a.ITEM_MANAGER.MOD_TYPE.NONE, a.modTime = 0, a.infoTxt_left = a.infoTxt_mid = a.infoTxt_right = a.infoTxt_desc = null, a
                }
                return y()(t, e), l()(t, [{
                    key: "myUpdate",
                    value: function(e, t) {
                        this.gameScene.isGamePaused || (this.modTime -= t / 1e3, this.modTime <= 0 && (this.modExpired(), this._removeMod()))
                    }
                }, {
                    key: "modExpired",
                    value: function() {}
                }, {
                    key: "modAddExisting",
                    value: function() {}
                }, {
                    key: "_removeMod",
                    value: function() {
                        null != this.infoTxt_left && this.infoTxt_left.destroy(), null != this.infoTxt_mid && this.infoTxt_mid.destroy(), null != this.infoTxt_right && this.infoTxt_right.destroy(), null != this.infoTxt_desc && this.infoTxt_desc.destroy(), this.gameScene.itemManager.removeMod(this.modType), this.myOnDestroy()
                    }
                }, {
                    key: "_formatCountdownTime",
                    value: function(e) {
                        if (!_.a.isBT) {
                            if (null == this.infoTxt_left) {
                                var t = 100,
                                    a = "[SLOW]",
                                    i = _.a.fontNames.SLO_MO;
                                this.modType == m.a.ITEM_MANAGER.MOD_TYPE.FREEZE && (t = 230, a = "[FREEZE]", i = _.a.fontNames.FREEZE), this.infoTxt_left = this.gameScene.add.bitmapText(_.a.gameWidth / 2, t, i, "0", 100), this.infoTxt_mid = this.gameScene.add.bitmapText(_.a.gameWidth / 2, t, i, "0", 100), this.infoTxt_right = this.gameScene.add.bitmapText(_.a.gameWidth / 2, t, i, "0", 100), this.infoTxt_desc = this.gameScene.add.bitmapText(_.a.gameWidth / 2, this.infoTxt_right.y + 45, i, a, 45), c.a.mySpriteDepth(c.a.RENDER_DEPTH.UNDER_GAME, this.infoTxt_left), c.a.mySpriteDepth(c.a.RENDER_DEPTH.UNDER_GAME, this.infoTxt_mid), c.a.mySpriteDepth(c.a.RENDER_DEPTH.UNDER_GAME, this.infoTxt_right), c.a.mySpriteDepth(c.a.RENDER_DEPTH.UNDER_GAME, this.infoTxt_desc), this.infoTxt_left.setOrigin(1, .5), this.infoTxt_mid.setOrigin(.5, .5), this.infoTxt_right.setOrigin(0, .5), this.infoTxt_desc.setOrigin(.5, .5), this.infoTxt_mid.text = ":", this.infoTxt_left.x -= this.infoTxt_mid.width / 2, this.infoTxt_right.x += this.infoTxt_mid.width / 2, this._formatCountdownResetAlpha()
                            }
                            var s = e % 1,
                                n = Math.floor(e);
                            0 == n && (this.infoTxt_left.alpha = s, this.infoTxt_mid.alpha = s, this.infoTxt_right.alpha = s, this.infoTxt_desc.alpha = .25 * s), n < 10 && (n = "0" + n), 1 == (s = s.toString().substr(2, 2)).length && (s = "0" + s), this.infoTxt_left.text = n, this.infoTxt_right.text = s
                        }
                    }
                }, {
                    key: "_formatCountdownResetAlpha",
                    value: function() {
                        null != this.infoTxt_left && (this.infoTxt_left.alpha = .7, this.infoTxt_mid.alpha = .7, this.infoTxt_right.alpha = .7, this.infoTxt_desc.alpha = .25)
                    }
                }]), t
            }(c.a);
        t.a = u
    },
    72: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = (a(42), a(70), a(15)),
            c = a(0),
            m = a(3),
            u = a(9),
            g = a(20),
            v = a(12),
            f = a(26),
            S = a(1),
            E = a(2),
            x = function(e) {
                function t(e) {
                    var a;
                    return s()(this, t), (a = r()(this, p()(t).call(this, e.gameScene))).player = e, a._shieldType = t.SHIELD_TYPES.NONE, a._shieldState = t._SHIELD_STATE.INACTIVE, a.INVINCIBILITY_TIME = 8 - c.a.shieldDissappearTime, a._shield_timer = 0, a.shieldSprite = null, a.shieldTween = null, a._shieldDissappearTime = 0, a.firstShieldFrame = "shield/plain.png", a
                }
                return y()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        return this.myRenderDepth = m.a.RENDER_DEPTH.UNDER_GAME, this
                    }
                }, {
                    key: "addShield",
                    value: function(e) {
                        if (c.a.isBS3) {
                            var a;
                            a = f.a.getPassiveItemValue(S.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_TANK), this.INVINCIBILITY_TIME = 8 - c.a.shieldDissappearTime + a, e == t.SHIELD_TYPES.INVINCIBLE && f.a.getPassiveItemValue(S.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_TANK) > 0 && (e = t.SHIELD_TYPES.TANK, this._shield_timer = this.INVINCIBILITY_TIME, v.a.TaskIncrement(this.gameScene, v.a.TASK_TYPE.USE_UPGRADE, 1, S.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_TANK))
                        }
                        if (!c.a.isBS3 || e != t.SHIELD_TYPES.INVINCIBLE && e != t.SHIELD_TYPES.TANK ? e != t.SHIELD_TYPES.TANK && _.a.playSound(this.player.gameScene, _.a.SND.SHIELD_ON) : _.a.playSound(this.player.gameScene, _.a.SND.SHIELD_ON_2), this._shieldType != t.SHIELD_TYPES.NONE)
                            if (e == t.SHIELD_TYPES.PLAIN) {
                                if (this._shieldState == t._SHIELD_STATE.ACTIVE) return
                            } else if (e == t.SHIELD_TYPES.INVINCIBLE && this._shieldType == t.SHIELD_TYPES.TANK && this._shieldState != t._SHIELD_STATE.DISSAPEARING) return;
                        if (e == t.SHIELD_TYPES.INVINCIBLE && (this._shield_timer = this.INVINCIBILITY_TIME), c.a.isBS2 && e == t.SHIELD_TYPES.TANK) {
                            this._shield_timer = -1;
                            for (var i = 0; i <= f.a.ITEMS.length; i++)
                                if (f.a.ITEMS[i].modType == S.a.ITEM_MANAGER.MOD_TYPE.UPGRADE_TANK) {
                                    var s = f.a.getMaxLevelForItem(f.a.ITEMS[i]);
                                    this._shield_timer = f.a.ITEMS[i].upgradeVal[s] - c.a.shieldDissappearTime;
                                    break
                                }
                        }
                        null != this.shieldSprite && this.shieldSprite.destroy(), this.shieldSprite = new u.a(this.player.gameScene, this.player.pos.x, this.player.pos.y, c.a.spriteKey, "shield/plain.png", 1, this.myRenderDepth), this.shieldSprite.alpha = 1, c.a.isBS3 || null != this.shieldTween && (this.shieldTween.stop(), this.shieldTween = null, this.shieldSprite.setCrop(0, 0, this.shieldSprite.width, this.shieldSprite.height)), e == t.SHIELD_TYPES.PLAIN ? this.shieldSprite.setFrame("shield/plain.png") : e == t.SHIELD_TYPES.INVINCIBLE ? this.shieldSprite.setFrame("shield/inv.png") : e == t.SHIELD_TYPES.TANK ? c.a.isBS2 ? this.shieldSprite.setFrame("shield/tank.psd") : c.a.isBS3 && this.shieldSprite.setFrame("shield/el.png") : E.a.error("Dont know how to draw this shield!" + e), c.a.isBS3 ? g.a.isLazyLoaded && (e == t.SHIELD_TYPES.PLAIN ? this.shieldSprite.anims.play("shield_plain") : e == t.SHIELD_TYPES.INVINCIBLE ? this.shieldSprite.anims.play("shield_inv") : e == t.SHIELD_TYPES.TANK && this.shieldSprite.anims.play("shield_el")) : (this.shieldSprite.setCrop(0, 0, this.shieldSprite.width, 1), this.shieldTween = this.player.gameScene.add.tween({
                            targets: this.shieldSprite,
                            alpha: 1,
                            ease: "Linear",
                            onUpdate: function(e) {
                                this.shieldSprite.setCrop(0, 0, this.shieldSprite.width, this.shieldSprite.height * e.totalProgress)
                            },
                            onComplete: function() {
                                this.shieldSprite.setCrop()
                            },
                            onUpdateScope: this,
                            onCompleteScope: this,
                            duration: 200
                        })), this._shieldType = e, this._shieldState = t._SHIELD_STATE.ACTIVE
                    }
                }, {
                    key: "_removeShield",
                    value: function() {
                        this._shieldType == t.SHIELD_TYPES.PLAIN ? v.a.TaskIncrement(this.gameScene, v.a.TASK_TYPE.LOSE_SHIELD_PLAIN, 1) : this._shieldType == t.SHIELD_TYPES.INVINCIBLE && v.a.TaskIncrement(this.gameScene, v.a.TASK_TYPE.LOSE_SHIELD_INVINCIBLE, 1), this._shieldState = t._SHIELD_STATE.DISSAPEARING, this._shieldDissappearTime = c.a.shieldDissappearTime
                    }
                }, {
                    key: "ignoreBall",
                    value: function(e) {
                        return this._shieldType != t.SHIELD_TYPES.NONE && (this._shieldType == t.SHIELD_TYPES.TANK ? (e._isMetal || e._isWarp || e.popBall({
                            reason: S.a.POP_REASON.SHIELD_TANK,
                            player: this.player
                        }), !0) : this._shieldType == t.SHIELD_TYPES.INVINCIBLE || (this._shieldType == t.SHIELD_TYPES.PLAIN ? (this._shieldState == t._SHIELD_STATE.ACTIVE && ((c.a.isBS2 || c.a.isBS3) && 0 == e._isMetal && e.popBall({
                            reason: S.a.POP_REASON.SHIELD_PLAIN,
                            player: this.player,
                            obj: {}
                        }), this._removeShield()), !0) : void 0))
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, a) {
                        this.gameScene.isGamePaused || null != this.shieldSprite && (this.shieldSprite.x = this.player.pos.x, this.shieldSprite.y = this.player.pos.y, this._shieldState != t._SHIELD_STATE.ACTIVE || this._shieldType != t.SHIELD_TYPES.INVINCIBLE && this._shieldType != t.SHIELD_TYPES.TANK || (this._shield_timer -= a / 1e3, this._shield_timer <= 0 && this._removeShield()), this._shieldState == t._SHIELD_STATE.DISSAPEARING && (this._shieldDissappearTime -= a / 1e3, this.shieldSprite.alpha = this._shieldDissappearTime % 1, this._shieldDissappearTime <= 0 && (this._shieldType = t.SHIELD_TYPES.NONE, this._shieldState = t._SHIELD_STATE.INACTIVE, this.shieldSprite.destroy())))
                    }
                }]), t
            }(m.a);
        x.SHIELD_TYPES = {
            NONE: "none",
            REMOVING: "removing",
            PLAIN: "plain",
            INVINCIBLE: "invi",
            TANK: "tank"
        }, x._SHIELD_STATE = {
            ACTIVE: "active",
            INACTIVE: "inactive",
            DISSAPEARING: "dissapearing"
        }, t.a = x
    },
    73: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(19),
            p = a.n(h),
            d = a(7),
            y = a.n(d),
            _ = a(11),
            c = a.n(_),
            m = a(3),
            u = a(16),
            g = a(1),
            v = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "CollisionVsAABB",
                    value: function(t, a, i, s) {
                        var n = t.pos.x - a.pos.x,
                            l = t.sizeHalf.x + a.sizeHalf.x - Math.abs(n);
                        if (l > 0) {
                            var o = t.pos.y - a.pos.y,
                                r = t.sizeHalf.y + a.sizeHalf.y - Math.abs(o);
                            if (r > 0) {
                                var h = 0,
                                    p = 0;
                                return n < -a.sizeHalf.x ? h = -1 : n > a.sizeHalf.x && (h = 1), o < -a.sizeHalf.y ? p = -1 : o > a.sizeHalf.y && (p = 1), 0 === h ? e._solveCollision(t, a, 0, r * p, 0, p, i, s) : 0 === p || Math.abs(l) < Math.abs(r) ? e._solveCollision(t, a, l * h, 0, h, 0, i, s) : e._solveCollision(t, a, 0, r * p, 0, p, i, s), !0
                            }
                        }
                        return !1
                    }
                }, {
                    key: "_solveCollision",
                    value: function(t, a, i, s, n, l, o, r) {
                        var h = a;
                        h == r && (h = t), 0 === s ? n < 0 ? e.EdgeAABBRight(t, a, i, s, o, r, h) : e.EdgeAABBLeft(t, a, i, s, o, r, h) : 0 === i && (l < 0 ? e.EdgeAABBBottom(t, a, i, s, o, r, h) : e.EdgeAABBTop(t, a, i, s, o, r, h))
                    }
                }, {
                    key: "EdgeAABBLeft",
                    value: function(e, t, a, i, s, n, l) {
                        !0 !== n.collideEdge(g.a.PHY.COL_EDGE.LEFT, e, t, a, i, s, n, l) && (e.pos.x += a)
                    }
                }, {
                    key: "EdgeAABBRight",
                    value: function(e, t, a, i, s, n, l) {
                        !0 !== n.collideEdge(g.a.PHY.COL_EDGE.RIGHT, e, t, a, i, s, n, l) && (e.pos.x += a)
                    }
                }, {
                    key: "EdgeAABBTop",
                    value: function(e, t, a, i, s, n, l) {
                        !0 !== n.collideEdge(g.a.PHY.COL_EDGE.TOP, e, t, a, i, s, n, l) && (e.pos.y += i)
                    }
                }, {
                    key: "EdgeAABBBottom",
                    value: function(e, t, a, i, s, n, l) {
                        !0 !== n.collideEdge(g.a.PHY.COL_EDGE.BOTTOM, e, t, a, i, s, n, l) && (e.pos.y += i)
                    }
                }]), e
            }(),
            f = a(80),
            S = a(50),
            E = function() {
                function e(t) {
                    s()(this, e), this.pBody = t, this.doColl = {}, this.doColl[S.a.AABB] = {}, this.doColl[S.a.AABB][S.a.AABB] = v.CollisionVsAABB, this.doColl[S.a.AABB][S.a.CIRCLE] = e._AABBVsCircle, this.doColl[S.a.CIRCLE] = {}, this.doColl[S.a.CIRCLE][S.a.AABB] = f.a.CollisionVsAABB
                }
                return l()(e, null, [{
                    key: "_AABBVsCircle",
                    value: function(e, t, a, i) {
                        return f.a.CollisionVsAABB(t, e, a, i)
                    }
                }]), e
            }(),
            x = a(22),
            T = function(e) {
                function t(e) {
                    var a, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : x.a.LAYER.NONE,
                        n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [],
                        l = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                    return s()(this, t), a = r()(this, y()(t).call(this, e)), void 0 === e && console.error("Cant create PhyBody without all parameters. Something is undefined." + e), l.hasOwnProperty("vel") && (l.vel = l.vel.copy()), l.hasOwnProperty("acc") && (l.acc = l.acc.copy()), a.uid = -1, a.pbActive = !0, a.bodyType = S.a.NONE, a.isStatic = l.isStatic || !1, a.myLayer = i, a.collidesLayers = n, a.useGravity = l.useGravity || !1, a.mass = l.mass || 1, a.vel = l.vel || u.a.ZERO, a.acc = l.acc || u.a.ZERO, a.pos = u.a.ZERO, a.pEngine = a.gameScene.phyEngine, a.collision = null, a.ignoreTimeScale = !0, a.tickInfo = {}, a.debugGraphics = null, a
                }
                return c()(t, e), l()(t, [{
                    key: "collideEdge",
                    value: function(e, t, a, i, s, n, l, o) {
                        return !1
                    }
                }, {
                    key: "_pBodyInit",
                    value: function() {
                        void 0 !== this.bodyType && this.bodyType !== S.a.NONE || console.error("Have to set body type. Currently: " + this.bodyType), void 0 !== this.gameScene && null !== this.gameScene || console.error("GameScene is not defined for this pBody."), this.collision = new E(this), this.gameScene.phyEngine.debugOn && (this.debugGraphics = this.gameScene.add.graphics(), m.a.mySpriteDepth(m.a.RENDER_DEPTH.PHY_DEBUG, this.debugGraphics)), this.gameScene.phyEngine.addBody(this)
                    }
                }, {
                    key: "_pBodyResize",
                    value: function() {}
                }, {
                    key: "_debugDraw",
                    value: function() {
                        this.debugGraphics.clear(), this.myLayer == x.a.LAYER.SIMULATION ? this.debugGraphics.fillStyle(16079939, .35) : this.debugGraphics.fillStyle(16119107, .35), this.debugGraphics.lineStyle(.75, 16119107, .75)
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        p()(y()(t.prototype), "myOnDestroy", this).call(this), null != this.debugGraphics && this.debugGraphics.destroy(), this.pbActive = !1, this.gameScene.phyEngine.removeBody(this)
                    }
                }, {
                    key: "myFixedPreUpdate",
                    value: function(e, t, a) {}
                }, {
                    key: "myFixedPostUpdate",
                    value: function(e, t, a) {}
                }]), t
            }(m.a);
        t.a = T
    },
    74: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(17),
            c = a.n(_),
            m = a(21),
            u = a(4),
            g = a(0),
            v = a(48),
            f = a(67),
            S = a(2),
            E = a(1),
            x = a(8),
            T = a(28),
            b = a(23),
            k = a(14),
            w = a(9),
            I = a(110),
            P = a(24),
            A = a(18),
            L = a(31),
            M = a(20),
            O = a(29),
            D = a(3),
            B = a(36),
            R = function(e) {
                function t(e, a, i) {
                    var n;
                    return s()(this, t), (n = r()(this, p()(t).call(this, {
                        key: "MyShareScene"
                    }))).passedAlongSceneData = null, n.screenshotRectangle = null, n
                }
                return y()(t, e), l()(t, [{
                    key: "init",
                    value: function(e) {
                        S.a.log("SHARE", "Received data:", e), this.passedAlongSceneData = e, this.scene.settings.data = null, this.passedAlongSceneData.shareType == E.a.SHARE_TYPE.ALL ? O.a.LogClick(O.a.CLICK_TYPE.SHARE_ALL) : this.passedAlongSceneData.shareType == E.a.SHARE_TYPE.RANK ? O.a.LogClick(O.a.CLICK_TYPE.SHARE_RANK) : this.passedAlongSceneData.shareType == E.a.SHARE_TYPE.LEVEL && O.a.LogClick(O.a.CLICK_TYPE.SHARE_LEVEL)
                    }
                }, {
                    key: "create",
                    value: function() {
                        if (this.passedAlongSceneData.shareType != E.a.SHARE_TYPE.LEVEL) {
                            this.myTransition = new v.a(this).transitionOpen();
                            new f.a(this, !1);
                            if (g.a.isBS3) {
                                this.add.sprite(.5 * g.a.gameWidth, .5 * g.a.gameHeight, "mainmenu_background"), new w.a(this, 412, 451, g.a.lazySpriteKey, "ui/menu_start1.png");
                                var e = new Phaser.Geom.Rectangle(-20, -20, g.a.gameWidth + 40, g.a.gameHeight + 40),
                                    t = this.add.graphics();
                                t.fillStyle(0, .65), t.fillRectShape(e)
                            }
                        } else {
                            var a = new Phaser.Geom.Rectangle(-1500, -1500, 5e3, 5e3),
                                i = this.add.graphics();
                            i.fillStyle(0, .9), i.fillRectShape(a), i.setInteractive({
                                hitArea: a,
                                hitAreaCallback: Phaser.Geom.Rectangle.Contains
                            })
                        }
                        var s = T.a.BT1.SETTINGS_BACK;
                        if (this.passedAlongSceneData.shareType == E.a.SHARE_TYPE.LEVEL && (s = "DONE"), g.a.isBT) new b.a(this, 70 + k.a.notchOffset, 410, 130, 77, "ui/main_menu_back.png", {
                            top: 30,
                            bottom: 30,
                            left: 30,
                            right: 30
                        });
                        var n = 6;
                        if ((g.a.isBS2 || g.a.isBS3) && (n = 0), this.back_btn = new m.a(this, 70 + k.a.notchOffset, 410, 100, 47, {
                                text: s,
                                size: 32,
                                fixY: n
                            }, this.backToMainMenu.bind(this), null, null, !1, !1), g.a.isBT) new b.a(this, g.a.gameWidth / 2, 410, 130, 77, "ui/main_menu_back.png", {
                            top: 30,
                            bottom: 30,
                            left: 30,
                            right: 30
                        });
                        n = 6;
                        (g.a.isBS2 || g.a.isBS3) && (n = 0), this.share_btn = new m.a(this, g.a.gameWidth / 2, 410, 100, 47, {
                            text: T.a.BT1.SHARE,
                            size: 32,
                            fixY: n
                        }, this.share.bind(this), null, null, !0, !0);
                        this.screenshotRectangle = new Phaser.Geom.Rectangle(g.a.gameWidth / 2 - 205, 10, 410, 355);
                        var l = this.add.graphics();
                        if (l.fillStyle(0, .8), l.fillRectShape(this.screenshotRectangle), g.a.isBT) {
                            var o = new w.a(this, 90, 195, g.a.lazySpriteKey, "ani_torch/torch_1.png", .9),
                                r = (new w.a(this, 90, 193, g.a.lazySpriteKey, "ani_torch/torch_base.png", .9), new w.a(this, 612, 195, g.a.lazySpriteKey, "ani_torch/torch_1.png", .9)),
                                h = new w.a(this, 612, 193, g.a.lazySpriteKey, "ani_torch/torch_base.png", .9);
                            h.scaleX = -h.scaleX, o.anims.play("torch_burn"), r.anims.play("torch_burn")
                        }
                        var p = this.add.bitmapText(this.screenshotRectangle.x + this.screenshotRectangle.width - 5, this.screenshotRectangle.y + this.screenshotRectangle.height - 1, g.a.fontNames.MENU, L.a.REBUBBLED_HOMEPAGE_SHORT, 15);
                        p.setOrigin(1, 1), this.logo = this.add.container(), this.logo.add([p]), this.logo.alpha = .7, this.logo.visible = !1, u.a.gameSettings.sharedClickedFrom.includes(this.passedAlongSceneData.shareType) || u.a.gameSettings.sharedClickedFrom.push(this.passedAlongSceneData.shareType), this.passedAlongSceneData.shareType == E.a.SHARE_TYPE.ALL || this.passedAlongSceneData.shareType == E.a.SHARE_TYPE.RANK ? this._renderMainMenuShare() : this.passedAlongSceneData.shareType == E.a.SHARE_TYPE.LEVEL && this._renderLevelShare()
                    }
                }, {
                    key: "_renderMainMenuShare",
                    value: function() {
                        var e = 330,
                            t = 140;
                        (g.a.isBS2 || g.a.isBS3) && (t = 110);
                        var a = -8;
                        (g.a.isBS2 || g.a.isBS3) && (a = -15);
                        for (var i = u.a.gameSettings.maxLevelUnlocked[x.a.MODES.SINGLE], s = "My best level is: ", n = Object(I.a)(x.a.currentMode), l = 0; null != n["lvl" + (l + 1)];) l++;
                        S.a.log("levles in game:", l), null != u.a.gameSettings.bestScorePerLevel[l] && u.a.gameSettings.bestScorePerLevel[l] > 0 && (s = "I FINISHED ALL (" + l + ") LEVELS!", i = "", e = g.a.gameWidth / 2);
                        var o = this.add.bitmapText(e, 45, g.a.fontNames.MENU, s, 30),
                            r = this.add.bitmapText(e + t, 45 + a, g.a.fontNames.MENU, i, 54);
                        o.x -= o.width / 2, r.x -= r.width / 2;
                        for (var h = 0, p = 1; p <= l; p++) null != u.a.gameSettings.bestScorePerLevel[p] && (S.a.log("Level", p, " score: ", u.a.gameSettings.bestScorePerLevel[p]), h += u.a.gameSettings.bestScorePerLevel[p]);
                        S.a.log("SHARE", "Calculated best score:", h);
                        var d = g.a.gameWidth / 2,
                            y = 110,
                            _ = 40;
                        if (g.a.isBS3 && (_ -= 15), g.a.isBT)(c = new w.a(this, d, y + _, g.a.spriteKey, "ui/name_box.png")).scale = 2;
                        else if (g.a.isBS2) {
                            var c, m = {
                                top: 10,
                                bottom: 10,
                                left: 10,
                                right: 10
                            };
                            (c = new b.a(this, d, y + _, 250, 50, "ui/ingame/interface_box.png", m)).scale = 2, c.ninePatch.alpha = .5
                        }
                        this.add.bitmapText(d, y, g.a.fontNames.MENU, "TOTAL SCORE:", 20).setOrigin(.5, .5), this.add.bitmapText(d, y + _, g.a.fontNames.SCORE, h, 44).setOrigin(.5, .5);
                        P.a.renderBadge(this, g.a.gameWidth / 2, 275, P.a.CurrentLevel, !1, 1)
                    }
                }, {
                    key: "_renderLevelShare",
                    value: function() {
                        var e = g.a.gameWidth / 2,
                            t = this.add.bitmapText(e, 95, g.a.fontNames.MENU, "Best level score", 26),
                            a = this.add.bitmapText(e, 25, g.a.fontNames.MENU, "LEVEL " + x.a.currentLevel, 54);
                        t.x -= t.width / 2, a.x -= a.width / 2;
                        var i = 0;
                        null != u.a.gameSettings.bestScorePerLevel[x.a.currentLevel] && (i = u.a.gameSettings.bestScorePerLevel[x.a.currentLevel]);
                        var s = g.a.gameWidth / 2,
                            n = 40;
                        if (g.a.isBS3 && (n -= 15), g.a.isBT)(l = new w.a(this, s, 110 + n, g.a.spriteKey, "ui/name_box.png")).scale = 2;
                        else if (g.a.isBS2) {
                            var l, o = {
                                top: 10,
                                bottom: 10,
                                left: 10,
                                right: 10
                            };
                            (l = new b.a(this, s, 110 + n, 250, 50, "ui/ingame/interface_box.png", o)).scale = 2, l.ninePatch.alpha = .5
                        }
                        this.add.bitmapText(s, 110 + n, g.a.fontNames.SCORE, i, 44).setOrigin(.5, .5);
                        P.a.renderBadge(this, g.a.gameWidth / 2, 275, P.a.CurrentLevel, !1, 1)
                    }
                }, {
                    key: "backToMainMenu",
                    value: function() {
                        if (this.passedAlongSceneData.shareType == E.a.SHARE_TYPE.ALL) {
                            var e = "BT1_MainMenu";
                            g.a.isBS2 ? e = "BS2_MainMenu" : g.a.isBS3 && (e = "BS3_MainMenu"), this.myTransition.transitionToggle(!1, e)
                        } else this.passedAlongSceneData.shareType == E.a.SHARE_TYPE.RANK ? this.myTransition.transitionToggle(!1, "MyTasksScene") : this.passedAlongSceneData.shareType == E.a.SHARE_TYPE.LEVEL && (B.a._unregisterSceneButton(this.back_btn), B.a._activeScene = this.passedAlongSceneData.fromScene, this.scene.stop("MyShareScene"), this.passedAlongSceneData.onBackCallback && this.passedAlongSceneData.onBackCallback())
                    }
                }, {
                    key: "share",
                    value: function() {
                        this._createScreenshot()
                    }
                }, {
                    key: "doneSharing",
                    value: function(e) {
                        S.a.log("SHARE", "Done sharing.", e)
                    }
                }, {
                    key: "_createScreenshot",
                    value: function() {
                        S.a.log("SHARE", "Creating screenshot.");
                        var e = this.screenshotRectangle.x - k.a.cameraOffset.x + 2,
                            a = this.screenshotRectangle.y - k.a.cameraOffset.y + 2,
                            i = this.screenshotRectangle.width - 4,
                            s = this.screenshotRectangle.height - 4;
                        this.logo.visible = !0;
                        var n = this;
                        this.game.renderer.snapshotArea(e, a, i, s, (function(e) {
                            S.a.log("SHARE", "Screenshot completed", e.src), n.logo.visible = !1, n._shareFile(e.src)
                        }), t.IMAGE_TYPE, .75)
                    }
                }, {
                    key: "_shareFile",
                    value: function(e) {
                        S.a.log("SHARE", "Sharing for platform:", A.a.myTarget);
                        var a = {
                                files: [new File([t._b64toBlob(e)], t.OUTPUT_FILENAME, {
                                    type: t.IMAGE_TYPE,
                                    lastModified: (new Date).getTime()
                                })]
                            },
                            i = t._generateShareURL();
                        null != i && (a.url = i), navigator.canShare && navigator.canShare(a) ? (S.a.log("SHARING", "Via navigator.canShare()", a), navigator.share(a).then(this.doneSharing).catch(this.doneSharing)) : (S.a.log("SHARING", "Via downloadFile()", a), this._share_via_downloadFile(e))
                    }
                }, {
                    key: "_share_via_downloadFile",
                    value: function(e) {
                        var a = document.createElement("a");
                        a.download = t.OUTPUT_FILENAME, a.href = e, a.dataset.downloadurl = [t.IMAGE_TYPE, a.download, a.href].join(":"), document.body.appendChild(a), a.click(), document.body.removeChild(a), this.doneSharing()
                    }
                }], [{
                    key: "_b64toBlob",
                    value: function(e) {
                        var a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 512;
                        e = e.substring(e.indexOf(",") + 1);
                        for (var i = atob(e), s = [], n = 0; n < i.length; n += a) {
                            for (var l = i.slice(n, n + a), o = new Array(l.length), r = 0; r < l.length; r++) o[r] = l.charCodeAt(r);
                            var h = new Uint8Array(o);
                            s.push(h)
                        }
                        var p = new Blob(s, {
                            type: t.IMAGE_TYPE
                        });
                        return p
                    }
                }, {
                    key: "_generateShareURL",
                    value: function() {
                        if (A.a.isPoki) return null;
                        if (A.a.isCordova)
                            if (k.a.isIOS) {
                                if (g.a.isBT) return L.a.BTC_APPLE;
                                if (g.a.isBS2) return L.a.BS2_APPLE;
                                if (g.a.isBSS) return L.a.BS3_APPLE
                            } else if (k.a.isAndroid) {
                            if (g.a.isBT) return L.a.BTC_GOOGLE;
                            if (g.a.isBS2) return L.a.BS2_GOOGLE;
                            if (g.a.isBSS) return L.a.BS3_GOOGLE
                        }
                        return null
                    }
                }, {
                    key: "shareSceneButton",
                    value: function(e, a, i, s, n) {
                        var l = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null;
                        if (S.a.log("SHARE", "Creating shareSceneButton for: ", n), M.a.isLazyLoaded && !(n == E.a.SHARE_TYPE.ALL && u.a.gameSettings.maxLevelUnlocked[x.a.MODES.SINGLE] < t.MINIMUM_SHARE_LEVEL)) {
                            var o = {
                                    shareType: n,
                                    fromScene: e.scene.key,
                                    onBackCallback: l
                                },
                                r = n == E.a.SHARE_TYPE.LEVEL,
                                h = new m.a(e, a, i, 80 * s, 80 * s, {
                                    icon: "sharescore/share_button.png",
                                    iconSpriteKey: g.a.lazySpriteKey
                                }, null, null, null, !1, r);
                            if (n == E.a.SHARE_TYPE.ALL || n == E.a.SHARE_TYPE.RANK ? h.callbackClick = t._shareSceneButtonClick.bind(e, e, o) : n == E.a.SHARE_TYPE.LEVEL && (t._levelCallShareData = null, h.callbackClick = t._shareSceneButtonReserveShare.bind(e, e, o, h)), n == E.a.SHARE_TYPE.LEVEL && h.setDepthMyUIButton(D.a.RENDER_DEPTH.UIOVER), !u.a.gameSettings.sharedClickedFrom.includes(n)) {
                                var p = 13904693;
                                g.a.isBS3 && (p = 458987);
                                var d = 14475529,
                                    y = 4,
                                    _ = 10,
                                    c = h.backgroundNinePatch.ninePatch.displayWidth / 2 - 5,
                                    v = -h.backgroundNinePatch.ninePatch.displayHeight / 2 + 5,
                                    f = 20,
                                    T = 0,
                                    b = 1;
                                g.a.isBT && (b = 3);
                                var k = e.add.graphics();
                                k.fillStyle(p, 1), k.lineStyle(y, d, 1), k.fillRect(-_, -_, 2 * _, 2 * _), k.strokeRect(-_, -_, 2 * _, 2 * _);
                                var w = e.add.bitmapText(T, b, g.a.fontNames.MENU, "!", f);
                                w.setOrigin(.5, .5);
                                var I = e.add.container(a + c, i + v);
                                I.add([k, w]), e.add.tween({
                                    targets: I,
                                    scale: 1.21,
                                    duration: 230,
                                    loop: -1,
                                    yoyo: !0
                                }), n == E.a.SHARE_TYPE.LEVEL && D.a.mySpriteDepth(D.a.RENDER_DEPTH.UIOVER, I)
                            }
                        }
                    }
                }, {
                    key: "_shareSceneButtonClick",
                    value: function(e, t) {
                        e.scene.run("MyShareScene", t), e.scene.bringToTop("MyShareScene"), window.dispatchEvent(new Event("resize"))
                    }
                }, {
                    key: "_shareSceneButtonReserveShare",
                    value: function(e, a, i) {
                        t._levelCallShareData = {
                            scene: e,
                            sceneData: a
                        };
                        var s = i;
                        s.changeTextOrIcon({
                            icon: "sharescore/share_button.png",
                            iconSpriteKey: g.a.lazySpriteKey
                        });
                        var n = new w.a(e, s.myIcon.x, s.myIcon.y, g.a.lazySpriteKey, "sharescore/share_button_wait.png", 1.9, D.a.RENDER_DEPTH.UIOVER);
                        s.buttonIsActive = !1, s.focusedNinePatch.setVisibleNinePatch(!1), e.add.tween({
                            targets: [s.backgroundNinePatch.ninePatch],
                            alpha: 0,
                            duration: 150
                        }), e.add.tween({
                            targets: [s.myIcon, s.backgroundNinePatch.ninePatch],
                            scale: {
                                from: 1.2,
                                to: 1
                            },
                            duration: 200,
                            repeat: -1,
                            yoyo: !0
                        }), e.add.tween({
                            targets: [n],
                            angle: {
                                from: 0,
                                to: 360
                            },
                            duration: 3200,
                            repeat: -1
                        })
                    }
                }, {
                    key: "ShareSceneButtonReserveShare",
                    value: function() {
                        return null != t._levelCallShareData && (t._shareSceneButtonClick(t._levelCallShareData.scene, t._levelCallShareData.sceneData), !0)
                    }
                }]), t
            }(Phaser.Scene);
        c()(R, "MINIMUM_SHARE_LEVEL", 2), c()(R, "OUTPUT_FILENAME", "BubbleTrouble.png"), c()(R, "IMAGE_TYPE", "image/png"), c()(R, "_levelCallShareData", null), t.a = R
    },
    75: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return m
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(17),
            r = a.n(o),
            h = a(0),
            p = a(21),
            d = (a(1), a(2)),
            y = (a(8), a(29)),
            _ = a(4),
            c = a(24),
            m = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "init",
                    value: function(t) {
                        h.a.isBS2 || h.a.isBS3 || (h.a.isBT && (e.SKINS = e.SKINS_BT1, "" == _.a.gameSettings.selectedSkinID && (_.a.gameSettings.selectedSkinID = e._SKIN_ID_DEFAULT), e.unlockSkinByID(e._SKIN_ID_DEFAULT), e.unlockSkinByID(e._SKIN_ID_COMINGSOON), 0 == _.a.gameSettings.skinsNewViewed.length && _.a.gameSettings.skinsNewViewed.push(e._SKIN_ID_DEFAULT, e._SKIN_ID_COMINGSOON), 0 == _.a.gameSettings.skinsUnlockedUsed.length && _.a.gameSettings.skinsUnlockedUsed.push(e._SKIN_ID_DEFAULT, e._SKIN_ID_COMINGSOON)), t.load.multiatlas(_.a.gameSettings.selectedSkinID, e.CURRENT.spriteJSON, e.CURRENT.spriteLocation), d.a.log("SKINS", "Initializing:", h.a))
                    }
                }, {
                    key: "renderButton",
                    value: function(t, a, i, s) {
                        var n = 80 * s,
                            l = 80 * s;
                        new p.a(t, a, i, n, l, {
                            icon: "skins/select_skin_button.psd",
                            iconSpriteKey: h.a.lazySpriteKey
                        }, e.clickedOpenMySkins.bind(t, t)).myIcon.setScale(s), e.checkIfPlayerRankUnlocksSkins();
                        var o = e.countNewUnlockedSkins(),
                            r = e.countNewSkins();
                        if (o > 0) {
                            var d = 13904693;
                            h.a.isBS3 && (d = 458987);
                            var y = 14475529,
                                _ = 4,
                                c = 15,
                                m = -n / 2,
                                u = -l / 2,
                                g = 15,
                                v = -2,
                                f = 1;
                            (E = t.add.graphics()).fillStyle(d, 1), E.lineStyle(_, y, 1), E.fillCircle(0, 0, c), E.strokeCircle(0, 0, c), (x = t.add.bitmapText(v, f, h.a.lazyFontNames.RETENTION_XP, o, g)).setOrigin(.5, .5);
                            var S = t.add.container(a + m, i + u);
                            S.add([E, x]), t.add.tween({
                                targets: S,
                                scale: 1.21,
                                duration: 230,
                                loop: -1,
                                yoyo: !0
                            })
                        }
                        if (r > 0) {
                            d = 13904693;
                            h.a.isBS3 && (d = 458987);
                            var E, x;
                            y = 14475529, _ = 4, c = 15, m = n / 2, u = -l / 2, g = 15, v = 0, f = 1;
                            (E = t.add.graphics()).fillStyle(d, 1), E.lineStyle(_, y, 1), E.fillRect(-c, -c, 2 * c, 2 * c), E.strokeRect(-c, -c, 2 * c, 2 * c), (x = t.add.bitmapText(v, f, h.a.fontNames.MENU, "NEW", g)).setOrigin(.5, .5);
                            var T = t.add.container(a + m, i + u);
                            T.add([E, x]), t.add.tween({
                                targets: T,
                                scale: 1.21,
                                duration: 230,
                                loop: -1,
                                yoyo: !0
                            })
                        }
                    }
                }, {
                    key: "checkIfPlayerRankUnlocksSkins",
                    value: function() {
                        for (var t in e.SKINS) {
                            var a = e.SKINS[t];
                            null != a.unlockRank && c.a.CurrentLevel >= a.unlockRank && (_.a.gameSettings.skinsUnlocked.includes(a.skinID) || _.a.gameSettings.skinsUnlocked.push(a.skinID))
                        }
                    }
                }, {
                    key: "countNewUnlockedSkins",
                    value: function() {
                        return _.a.gameSettings.skinsUnlocked.length - _.a.gameSettings.skinsUnlockedUsed.length
                    }
                }, {
                    key: "countNewSkins",
                    value: function() {
                        return e.SKINS.length - _.a.gameSettings.skinsNewViewed.length
                    }
                }, {
                    key: "unlockSkinByID",
                    value: function(e) {
                        _.a.gameSettings.skinsUnlocked.includes(e) || _.a.gameSettings.skinsUnlocked.push(e)
                    }
                }, {
                    key: "clickedOpenMySkins",
                    value: function(e) {
                        y.a.LogClick(y.a.CLICK_TYPE.MYSKINS), e.myTransition.transitionToggle(!1, "MySkinsScene")
                    }
                }, {
                    key: "createSkinAnimations",
                    value: function(t) {
                        e._getCharAnimations().forEach((function(e) {
                            t.anims.create(e)
                        }))
                    }
                }, {
                    key: "_getCharAnimations",
                    value: function() {
                        var e = _.a.gameSettings.selectedSkinID,
                            t = {
                                walk: [{
                                    key: e,
                                    frame: "char/walk_1.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_2.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_3.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_4.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_3.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_2.png"
                                }],
                                walk_space: [{
                                    key: e,
                                    frame: "char/walk_space_1.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_space_2.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_space_3.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_space_4.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_space_3.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_space_2.png"
                                }],
                                idle: [{
                                    key: e,
                                    frame: "char/idle.png"
                                }],
                                idle_space: [{
                                    key: e,
                                    frame: "char/idle_space.png"
                                }],
                                shoot: [{
                                    key: e,
                                    frame: "char/idle.png"
                                }],
                                shoot_space: [{
                                    key: e,
                                    frame: "char/idle_space.png"
                                }],
                                walk_p2: [{
                                    key: e,
                                    frame: "char/walk_1_p2.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_2_p2.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_3_p2.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_4_p2.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_3_p2.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_2_p2.png"
                                }],
                                walk_space_p2: [{
                                    key: e,
                                    frame: "char/walk_space_1_p2.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_space_2_p2.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_space_3_p2.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_space_4_p2.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_space_3_p2.png"
                                }, {
                                    key: e,
                                    frame: "char/walk_space_2_p2.png"
                                }],
                                idle_p2: [{
                                    key: e,
                                    frame: "char/idle_p2.png"
                                }],
                                idle_space_p2: [{
                                    key: e,
                                    frame: "char/idle_space_p2.png"
                                }],
                                shoot_p2: [{
                                    key: e,
                                    frame: "char/idle_p2.png"
                                }],
                                shoot_space_p2: [{
                                    key: e,
                                    frame: "char/idle_space_p2.png"
                                }]
                            };
                        return [{
                            key: "walk",
                            frames: t.walk,
                            frameRate: 10,
                            repeat: -1
                        }, {
                            key: "idle",
                            frames: t.idle,
                            frameRate: 10,
                            repeat: -1
                        }, {
                            key: "walk_space",
                            frames: t.walk_space,
                            frameRate: 10,
                            repeat: -1
                        }, {
                            key: "idle_space",
                            frames: t.idle_space,
                            frameRate: 10,
                            repeat: -1
                        }, {
                            key: "walk_p2",
                            frames: t.walk_p2,
                            frameRate: 10,
                            repeat: -1
                        }, {
                            key: "idle_p2",
                            frames: t.idle_p2,
                            frameRate: 10,
                            repeat: -1
                        }, {
                            key: "walk_space_p2",
                            frames: t.walk_space_p2,
                            frameRate: 10,
                            repeat: -1
                        }, {
                            key: "idle_space_p2",
                            frames: t.idle_space_p2,
                            frameRate: 10,
                            repeat: -1
                        }]
                    }
                }, {
                    key: "CURRENT",
                    get: function() {
                        for (var t in e.SKINS)
                            if (e.SKINS[t].skinID == _.a.gameSettings.selectedSkinID) return e.SKINS[t]
                    }
                }]), e
            }();
        r()(m, "SKINS", []), r()(m, "_SKIN_ID_DEFAULT", "skin_default"), r()(m, "_SKIN_ID_COMINGSOON", "skin_comingsoon"), r()(m, "SKINS_BT1", [{
            skinID: m._SKIN_ID_DEFAULT,
            spriteJSON: "assets/bt1/skins/bt1_skin_default.json",
            spriteLocation: "assets/bt1/skins"
        }, {
            skinID: "fakeangel",
            spriteJSON: "assets/bt1/skins/bt1_skin_angel.json",
            spriteLocation: "assets/bt1/skins",
            unlockDescription: "Achieve " + c.a.RANK_NAMES[1] + " RANK to unlock this skin",
            unlockRank: 1
        }, {
            skinID: m._SKIN_ID_COMINGSOON
        }])
    },
    78: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(10),
            r = a.n(o),
            h = a(7),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(42),
            c = a(22),
            m = a(16),
            u = a(0),
            g = a(70),
            v = a(3),
            f = a(54),
            S = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = r()(this, p()(t).call(this, e, a)))._levelBallInfo = a, i.ballGravity = 0, i.ballSpeedX = 7, i.ballSpeedY = 4, i.ballPoints = [0, 300, 250, 200, 150, 100, 50], i.defaultJumpHeights = [0, 69, 139, 179, 219, 259, 300], i.floorYs = {}, i
                }
                return y()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        var e = this._levelBallInfo;
                        this.ballGravity = e.grav || this.ballSpeedY;
                        var t = this.defaultJumpHeights,
                            a = u.a.ballSizes;
                        for (var i in f.a.COL_NAME) {
                            var s = f.a.COL_NAME[i];
                            this._calcdMaxYSpeeds[s] = [], this._calcdBallInfo[s] = [];
                            for (var n = 1; n < t.length; n++) {
                                var l = 0;
                                l = null != e.jumpHeights && null != e.jumpHeights[s] ? e.jumpHeights[s][n] : t[n], this._calcdBallInfo[s][n] = l;
                                var o = l - a[n];
                                o < 0 && (o = 0), this._calcdMaxYSpeeds[s][n] = -Math.sqrt(2 * this.ballGravity * o, 2)
                            }
                            this.floorYs[s] = u.a.gameAreaMax.y, null != e.floorY && null != e.floorY[s] && (this.floorYs[s] = e.floorY[s])
                        }
                        return this
                    }
                }, {
                    key: "initBallSpeeds",
                    value: function(e) {
                        e._maxSpeedY = this._calcdMaxYSpeeds[e.ballColor][e.ballId], e.acc.y = this.ballGravity;
                        var t = e.gameScene.ballManager;
                        if (e._ballInfo.vy > 0) e.vel.y = 0, e._maxY = e.pos.y;
                        else {
                            var a = 1 - u.a.ballSizes[e.ballId + 1] / 180,
                                i = Math.abs(t._calcdBallInfo[e.ballColor][e.ballId] - (t.floorYs[e.ballColor] - e.pos.y) + a);
                            e.vel.y = a * -Math.sqrt(2 * t.ballGravity * i, 2)
                        }
                        e.vel.x = e._ballInfo.vx * this.ballSpeedX
                    }
                }, {
                    key: "getPopScore",
                    value: function(e) {
                        return this.ballPoints[e.ballId]
                    }
                }]), t
            }(f.a),
            E = a(2),
            x = a(1),
            T = a(8),
            b = function(e) {
                function t(e, a) {
                    var i;
                    return s()(this, t), (i = r()(this, p()(t).call(this, e, a))).PHY_VELY_ADJUST = 9, i._levelBallInfo = a, i._calcdMaxYSpeeds = {}, i._calcdBallInfo = {}, i._defaultBallInfo = {
                        normal: {
                            _default: {
                                speedx: 7,
                                grav: 41,
                                bounce: [0, 70, 115, 155, 195, 235]
                            }
                        },
                        penta: {
                            _default: {
                                speedx: 12
                            }
                        },
                        reverse: {
                            speedx: 7,
                            grav: 36,
                            bounce: [0, 375, 335, 235, 120, 30]
                        }
                    }, u.a.isBS3 && (i._defaultBallInfo = {
                        normal: {
                            _default: {
                                speedx: 7.5,
                                grav: 60,
                                bounce: [0, 70, 115, 155, 195, 235]
                            }
                        },
                        penta: {
                            _default: {
                                speedx: 14
                            }
                        },
                        reverse: {
                            speedx: 7.5,
                            grav: 36,
                            bounce: [0, 375, 335, 235, 120, 30]
                        }
                    }), Object.freeze(i._defaultBallInfo), i.pentaAngles = [0, .87, .79, .71, .61, .5], i._pentaRotationSpeed = 1.8, i.ballPoints = {
                        normal: 4,
                        penta: 5,
                        reverse: 6
                    }, i
                }
                return y()(t, e), l()(t, null, [{
                    key: "PHY_VELY_ADJUST",
                    get: function() {
                        return 9
                    }
                }]), l()(t, [{
                    key: "myInit",
                    value: function() {
                        var e = this._levelBallInfo || {};
                        for (var a in x.a.BALL_TYPE) {
                            var i = x.a.BALL_TYPE[a];
                            if (this._calcdMaxYSpeeds[i] = {}, i == x.a.BALL_TYPE.REVERSE) {
                                this._calcdBallInfo.reverse = JSON.parse(JSON.stringify(this._defaultBallInfo.reverse)), null != e.reverse && (this._calcdBallInfo.reverse = JSON.parse(JSON.stringify(e.reverse))), this._calcdBallInfo.reverse.grav /= t.PHY_VELY_ADJUST, this._calcdBallInfo.reverse.grav = -this._calcdBallInfo.reverse.grav;
                                var s = this._calcdBallInfo.reverse.grav;
                                this._calcdMaxYSpeeds.reverse = [0];
                                for (var n = 1; n <= 5; n++) this._calcdMaxYSpeeds.reverse[n] = Math.sqrt(2 * Math.abs(s) * this._calcdBallInfo.reverse.bounce[n])
                            } else if (i == x.a.BALL_TYPE.NORMAL || i == x.a.BALL_TYPE.PENTA)
                                for (var l in f.a.COL_NAME) {
                                    var o = f.a.COL_NAME[l];
                                    if (null == this._calcdBallInfo[i] && (this._calcdBallInfo[i] = {}), this._calcdBallInfo[i][o] = JSON.parse(JSON.stringify(this._defaultBallInfo[i]._default)), null != e[i] && (null != e[i]._default && (this._calcdBallInfo[i][o] = JSON.parse(JSON.stringify(e[i]._default))), null != e[i][o] && (this._calcdBallInfo[i][o] = JSON.parse(JSON.stringify(e[i][o])))), i == x.a.BALL_TYPE.NORMAL && (this._calcdBallInfo.normal[o].grav /= t.PHY_VELY_ADJUST), null == this._calcdMaxYSpeeds[i] && (this._calcdMaxYSpeeds[i] = {}), this._calcdMaxYSpeeds[i][o] = [0], i == x.a.BALL_TYPE.NORMAL)
                                        for (s = this._calcdBallInfo.normal[o].grav, n = 1; n <= 5; n++) this._calcdMaxYSpeeds.normal[o][n] = -Math.sqrt(2 * Math.abs(s) * this._calcdBallInfo.normal[o].bounce[n]);
                                    else if (i == x.a.BALL_TYPE.PENTA) {
                                        var r = this._calcdBallInfo.penta[o].speedx;
                                        for (n = 1; n <= 5; n++) this._calcdMaxYSpeeds.penta[o][n] = r * this.pentaAngles[n]
                                    }
                                }
                        }
                        return this
                    }
                }, {
                    key: "initBallSpeeds",
                    value: function(e) {
                        e._ballType == x.a.BALL_TYPE.NORMAL ? (e._maxSpeedY = this._calcdMaxYSpeeds.normal[e.ballColor][e.ballId], e._bounceHeight = this._calcdBallInfo.normal[e.ballColor].bounce[e.ballId], e.acc.y = this._calcdBallInfo.normal[e.ballColor].grav, e.vel.x = e._ballInfo.vx * this._calcdBallInfo.normal[e.ballColor].speedx, null == e._ballInfo.spawnSpeedY ? e._ballInfo.vy > 0 ? (e.vel.y = 0, e._maxY = e.pos.y) : (e.vel.y = e._maxSpeedY, e._maxY = e.pos.y - e._bounceHeight) : (e.vel.y = -200 - 7 * (5 - e.ballId), e.vel.y /= t.PHY_VELY_ADJUST, e._maxY = e.pos.y)) : e._ballType == x.a.BALL_TYPE.REVERSE ? (e._maxSpeedY = this._calcdMaxYSpeeds.reverse[e.ballId], e._bounceHeight = this._calcdBallInfo.reverse.bounce[e.ballId], e.acc.y = this._calcdBallInfo.reverse.grav, e.vel.x = e._ballInfo.vx * this._calcdBallInfo.reverse.speedx, null == e._ballInfo.spawnSpeedY ? e._ballInfo.vy < 0 || T.a.isYouksPack() && e._ballInfo.vy > 0 ? (e.vel.y = 0, e._maxY = e.pos.y) : (e.vel.y = e._maxSpeedY, e._maxY = e.pos.y + e._bounceHeight) : (e.vel.y = e._ballInfo.spawnSpeedY, e._maxY = e.pos.y)) : e._ballType == x.a.BALL_TYPE.PENTA && (null != e._ballInfo.spawnSpeedY && (e._ballInfo.vy = -Math.abs(e._ballInfo.vy)), e._pentaDir = new m.a(e._ballInfo.vx, e._ballInfo.vy), e.vel.x = this._calcdMaxYSpeeds.penta[e.ballColor][Math.abs(e._ballInfo.vx)], e._ballInfo.vx < 0 && (e.vel.x = -e.vel.x), e.vel.y = this._calcdMaxYSpeeds.penta[e.ballColor][Math.abs(e._ballInfo.vy)], e._ballInfo.vy < 0 && (e.vel.y = -e.vel.y), e._pentaTween = this.gameScene.add.tween({
                            targets: e._ballContainer,
                            angle: 360 * e._ballInfo.rot,
                            repeat: -1,
                            paused: this.gameScene._isPaused,
                            duration: 1e3 * this._pentaRotationSpeed
                        }))
                    }
                }, {
                    key: "getPopScore",
                    value: function(e) {
                        return this.ballPoints[e._ballType] * (6 - e.ballId)
                    }
                }]), t
            }(f.a),
            k = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "spawnBallManager",
                    value: function(e, t) {
                        return u.a.isBT ? new S(e, t) : u.a.isBS2 || u.a.isBS3 ? new b(e, t) : void 0
                    }
                }]), e
            }(),
            w = a(15),
            I = a(32),
            P = a(38),
            A = a(9),
            L = a(20),
            M = a(74),
            O = a(14),
            D = function(e) {
                function t(e) {
                    var a;
                    return s()(this, t), (a = r()(this, p()(t).call(this, e))).timeInitial = 0, a.timeLeft = 0, a._upgradeItemTime = 0, a._timebarTimeScale = 1, a.graphicsFront = e.add.graphics(), a._offsetBar = 2, a.rounded_corner = 4, a.timebarStopped = !1, a._turningTimeToPoints = !1, a._turningTimeToPoints_break = 0, a.turningTimeToPointsAccumulated = 0, a.timeToPointsBonus = null, a.timeBonusSound = null, a.greatJobLvlMsg = null, a._allowPlaying10SecMark = !0, a._blinkClock_BS3_tween = null, a
                }
                return y()(t, e), l()(t, [{
                    key: "myInit",
                    value: function(e) {
                        var t = e.time1;
                        return u.a.isBT && T.a.currentMode == T.a.MODES.TWOP && (t = e.time2), this.timeInitial = t, this.timeLeft = t, this._drawTimebar(), this
                    }
                }, {
                    key: "applyUpgradeTime",
                    value: function(e) {
                        this._upgradeItemTime = e
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, t) {
                        if (this._turningTimeToPoints && (u.a.isBT ? this._turnTimeToPointsBT1(t) : (u.a.isBS2 || u.a.isBS3) && this._turnTimeToPointsBS2(t)), !this.gameScene.isGamePaused && !this.timebarStopped && this.timeLeft > 0) {
                            if (this.timeLeft -= t * this._timebarTimeScale / 1e3, this.timeLeft < 0 && (this.timeLeft = 0), this._redrawTimebar(), this.timeLeft <= this._upgradeItemTime && null != this.gameScene.upgradeItem && (this.gameScene.itemManager.addMod(this.gameScene.upgradeItem.modType), this.gameScene.upgradeItem = null), u.a.isBS3 && this.timeLeft <= 10 && this._allowPlaying10SecMark && (w.a.playSound(this.gameScene, w.a.SND.UI_10SEC_LEFT, {
                                    volume: .5
                                }), this._allowPlaying10SecMark = !1, this._blinkClock_BS3_tween = this.gameScene.tweens.add({
                                    targets: this.gameScene.myGUI.timerClock,
                                    alpha: {
                                        from: .2,
                                        to: .8
                                    },
                                    ease: "Linear",
                                    duration: 200,
                                    repeat: -1,
                                    yoyo: !0
                                }), L.a.isLazyLoaded)) {
                                var a = new A.a(this.gameScene, 377, 458, u.a.lazySpriteKey, "ui/low_time.png", 1, v.a.RENDER_DEPTH.UIOVER);
                                this.gameScene.time.addEvent({
                                    delay: 2e3,
                                    callback: function() {
                                        a.destroy()
                                    }
                                })
                            }
                            0 == this.timeLeft && (this.gameScene.myEventManager.dispatchEvent(I.a.EVENT_TYPE.TIME_END), this.outOfTime())
                        }
                    }
                }, {
                    key: "outOfTime",
                    value: function() {
                        w.a.playSound(this.gameScene, w.a.SND.OUT_OF_TIME), this.gameScene.playerDied(null, _.a.DEATH_REASON.TIMEBAR)
                    }
                }, {
                    key: "addTime",
                    value: function(e) {
                        u.a.isBS3 && this.timeLeft < 10 && this.timeLeft + e > 10 && (this._allowPlaying10SecMark = !0, this._blinkClock_BS3_tween.stop(0), this.gameScene.myGUI.timerClock.alpha = 1), this.timeLeft += e, this.timeLeft > this.timeInitial && (this.timeLeft = this.timeInitial)
                    }
                }, {
                    key: "turnTimeToPoints",
                    value: function() {
                        if (this._showShareButton(), u.a.isBT) E.a.log("TIMEBAR", "TUrning time to points now"), this._turningTimeToPoints = !0;
                        else if (u.a.isBS2 || u.a.isBS3) {
                            var e = this;
                            this.greatJobLvlMsg = new P.a(this.gameScene, P.a.MESSAGES.LEVEL_COMPLETED, 99, (function() {})).myInit(), this.greatJobLvlMsg.background.displayWidth = 400, this.greatJobLvlMsg.background.displayHeight = 120, this.gameScene.time.addEvent({
                                delay: 800,
                                callback: function() {
                                    e._turningTimeToPoints = !0;
                                    var t = e.gameScene.add.bitmapText(u.a.gameWidth / 2 - 90, .57 * u.a.gameHeight, u.a.fontNames.MENU, "TIME BONUS:", 26, Phaser.GameObjects.BitmapText.ALIGN_CENTER);
                                    if (t.setOrigin(.5, .5), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UI, t), e.timeToPointsBonus = e.gameScene.add.bitmapText(u.a.gameWidth / 2 + 90, t.y, u.a.fontNames.MENU, "0", 26, Phaser.GameObjects.BitmapText.ALIGN_CENTER), e.timeToPointsBonus.setOrigin(.5, .5), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UI, e.timeToPointsBonus), e.timeBonusSound = w.a.playSound(e.gameScene, w.a.SND.TIME_BONUS), null != e.timeBonusSound) {
                                        var a = e.timeBonusSound.totalDuration - .129;
                                        a < 0 && (a = 0), null == e.timeBonusSound.markers.bonus && e.timeBonusSound.addMarker({
                                            name: "bonus",
                                            start: a
                                        })
                                    }
                                    e.greatJobLvlMsg.background.setOrigin(.5, 0), e.greatJobLvlMsg.background.y -= e.greatJobLvlMsg.background.displayHeight / 2, e.gameScene.add.tween({
                                        targets: e.greatJobLvlMsg.background,
                                        displayHeight: 150,
                                        duration: 150
                                    })
                                },
                                callbackScope: this
                            })
                        }
                    }
                }, {
                    key: "_turnTimeToPointsBT1",
                    value: function(e) {
                        var t = this.timeInitial * e / 3e3;
                        this.timeLeft >= 0 && (this.timeLeft - t > 0 ? this.timeLeft -= t : (E.a.log("TIMEBAR", "BT1, Done turning time to points"), t = this.timeLeft, this.timeLeft = 0, this._turningTimeToPoints = !1, this.gameScene._levelCompleteTimebarAdded(1e3)), this.gameScene.myGUI.addScore(Math.ceil(30 * t))), this._redrawTimebar()
                    }
                }, {
                    key: "_turnTimeToPointsBS2",
                    value: function(e) {
                        var t = e / 1e3 * 25;
                        this.timeLeft >= 0 && (this.timeLeft - t > 0 ? this.timeLeft -= t : (E.a.log("TIMEBAR", "BS2, Done turning time to points"), t = this.timeLeft, this.timeLeft = 0, this._turningTimeToPoints = !1, this.gameScene.time.addEvent({
                            delay: 300,
                            callback: this._showAccuracyBonusBS2,
                            callbackScope: this
                        })), this.turningTimeToPointsAccumulated += t, this.timeToPointsBonus.text = Math.ceil(this.turningTimeToPointsAccumulated) + " X 10 = " + 10 * Math.ceil(this.turningTimeToPointsAccumulated), null == this.timeBonusSound || this.timeBonusSound.isPlaying || this.timeBonusSound.play("bonus")), this._redrawTimebar()
                    }
                }, {
                    key: "_showAccuracyBonusBS2",
                    value: function() {
                        var e = !0;
                        null != this.gameScene.players[1] && (e = e && this.gameScene.players[1].shotManager.accuracyBonus), null != this.gameScene.players[2] && (e = e && this.gameScene.players[2].shotManager.accuracyBonus);
                        var t = 700,
                            a = 10 * Math.ceil(this.turningTimeToPointsAccumulated);
                        if (e) {
                            a += 2e3, t = 1300, this.gameScene.add.tween({
                                targets: this.greatJobLvlMsg.background,
                                displayHeight: 190,
                                duration: 150
                            });
                            var i = this.gameScene.add.bitmapText(u.a.gameWidth / 2 + 10, this.timeToPointsBonus.y + 40, u.a.fontNames.MENU, "ACCURATE SHOOTING:       2000", 26, Phaser.GameObjects.BitmapText.ALIGN_CENTER);
                            i.setOrigin(.5, .5), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UI, i)
                        }
                        this.gameScene.myGUI.addScore(a), this.gameScene._levelCompleteTimebarAdded(t)
                    }
                }, {
                    key: "_showShareButton",
                    value: function() {
                        if (!this.gameScene.CrntLvl.isEditorLevel && null == T.a.customPack && T.a.currentMode == T.a.MODES.SINGLE)
                            if (u.a.isBT) {
                                var e = u.a.gameWidth - 60,
                                    t = 320;
                                M.a.shareSceneButton(this.gameScene, e, t, .8, x.a.SHARE_TYPE.LEVEL, this.gameScene._startNextLevel.bind(this.gameScene))
                            } else {
                                e = u.a.gameWidth - 60, t = 365;
                                M.a.shareSceneButton(this.gameScene, e, t, .8, x.a.SHARE_TYPE.LEVEL, this.gameScene._startNextLevel.bind(this.gameScene))
                            }
                    }
                }, {
                    key: "_drawTimebar",
                    value: function() {
                        if (!u.a.isBS3) {
                            var e = this.gameScene.add.graphics();
                            u.a.isBT ? (e.lineStyle(1.5, u.a.timebarColorBackStroke, 1), e.strokeRect(u.a.timebarP1.x, u.a.timebarP1.y, u.a.timebarP2.x - u.a.timebarP1.x, u.a.timebarP2.y - u.a.timebarP1.y), e.fillStyle(u.a.timebarColorBack), e.fillRect(u.a.timebarP1.x, u.a.timebarP1.y, u.a.timebarP2.x - u.a.timebarP1.x, u.a.timebarP2.y - u.a.timebarP1.y), this.graphicsFront.fillStyle(u.a.timebarColorFront), this.graphicsFront.defaultFillColor = u.a.timebarColorFront) : u.a.isBS2 && (this._offsetBar = 0, e.lineStyle(1.5, u.a.timebarColorBackStroke, 1), e.strokeRoundedRect(u.a.timebarP1.x, u.a.timebarP1.y, u.a.timebarP2.x - u.a.timebarP1.x, u.a.timebarP2.y - u.a.timebarP1.y, this.rounded_corner), e.fillStyle(u.a.timebarColorBack), e.fillRoundedRect(u.a.timebarP1.x, u.a.timebarP1.y, u.a.timebarP2.x - u.a.timebarP1.x, u.a.timebarP2.y - u.a.timebarP1.y, this.rounded_corner), this.graphicsFront.fillStyle(u.a.timebarColorFront), this.graphicsFront.defaultFillColor = u.a.timebarColorFront), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UI, e), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UI, this.graphicsFront), this._redrawTimebar()
                        }
                    }
                }, {
                    key: "_redrawTimebar",
                    value: function() {
                        var e = this.timeLeft / this.timeInitial;
                        if (this.graphicsFront.clear(), !(e <= .007))
                            if (u.a.isBT) this.graphicsFront.fillRect(u.a.timebarP1.x + this._offsetBar, u.a.timebarP1.y + this._offsetBar, (u.a.timebarP2.x - u.a.timebarP1.x - 2 * this._offsetBar) * e, u.a.timebarP2.y - u.a.timebarP1.y - 2 * this._offsetBar);
                            else if (u.a.isBS2) {
                            var t = u.a.timebarP2.x - u.a.timebarP1.x - 2 * this._offsetBar,
                                a = t * (1 - e);
                            this.graphicsFront.fillRoundedRect(u.a.timebarP1.x + this._offsetBar + a, u.a.timebarP1.y + this._offsetBar, t * e, u.a.timebarP2.y - u.a.timebarP1.y - 2 * this._offsetBar, this.rounded_corner)
                        } else u.a.isBS3 && (this.gameScene.myGUI.timerTxt.text = ("000" + Math.floor(this.timeLeft)).slice(-3))
                    }
                }]), t
            }(v.a),
            B = a(248),
            R = a(53),
            W = a(23),
            N = a(72),
            C = a(12),
            U = function() {
                function e(t) {
                    s()(this, e), this.gameScene = t, this.score1Txt = null, this.score2Txt = null, this.activeWeapon = [], this.activeWeaponSwitch = []
                }
                return l()(e, [{
                    key: "myInit",
                    value: function() {
                        return u.a.isBT ? this._drawBT1() : u.a.isBS2 ? this._drawBS2() : u.a.isBS3 && this._drawBS3(), this
                    }
                }, {
                    key: "_drawBT1",
                    value: function() {
                        var e = v.a.RENDER_DEPTH.UI;
                        new A.a(this.gameScene, 71, 434, u.a.spriteKey, "ui/name_box.png", 1, e), new A.a(this.gameScene, 630, 434, u.a.spriteKey, "ui/name_box.png", 1, e), new A.a(this.gameScene, 71, 434, u.a.spriteKey, "ui/name_pl1.png", 1, e), new A.a(this.gameScene, 630, 434, u.a.spriteKey, "ui/name_pl2.png", 1, e), new A.a(this.gameScene, 188, 434, u.a.spriteKey, "ui/points_box.png", 1, e), new A.a(this.gameScene, 510, 434, u.a.spriteKey, "ui/points_box.png", 1, e);
                        this.score1Txt = this.gameScene.add.bitmapText(221, 434, u.a.fontNames.SCORE, T.a.scores[1] || 0), this.score2Txt = this.gameScene.add.bitmapText(544, 434, u.a.fontNames.SCORE, T.a.scores[2] || 0), this.score1Txt.setOrigin(1, .5), this.score2Txt.setOrigin(1, .5), v.a.mySpriteDepth(e, this.score1Txt), v.a.mySpriteDepth(e, this.score2Txt);
                        new A.a(this.gameScene, 350, 421, u.a.spriteKey, "ui/level_box.png", 1, e);
                        var t = this.gameScene.add.bitmapText(350, 432, u.a.fontNames.LVL_NUM, T.a.currentLevel.toString());
                        t.setOrigin(.5, .5), v.a.mySpriteDepth(e, t);
                        new A.a(this.gameScene, 291, 422, u.a.spriteKey, "ui/ui_torch.png", 1, e);
                        var a = new A.a(this.gameScene, 411, 422, u.a.spriteKey, "ui/ui_torch.png", 1, e);
                        a.scaleX = -a.scaleX
                    }
                }, {
                    key: "_drawBS2",
                    value: function() {
                        var e = v.a.RENDER_DEPTH.UI,
                            t = {
                                top: 10,
                                bottom: 10,
                                left: 10,
                                right: 10
                            },
                            a = 98,
                            i = 241,
                            s = 333,
                            n = 423,
                            l = 552;
                        T.a.currentMode == T.a.MODES.TWOP && (a = 98, i = 231, s = 313, n = 383, l = 552);
                        var o = new W.a(this.gameScene, a, 456, 146, 33, "ui/ingame/interface_box.png", t);
                        o.setDepthNinePatch(v.a.RENDER_DEPTH.UIBACK), new W.a(this.gameScene, i, 456, 94, 33, "ui/ingame/interface_box.png", t).setDepthNinePatch(v.a.RENDER_DEPTH.UIBACK);
                        var r = this.gameScene.add.bitmapText(i, 456, u.a.fontNames.SCORE, "COMBO", 22);
                        r.setOrigin(.5, .5), v.a.mySpriteDepth(e, r), r.alpha = .35;
                        var h = new A.a(this.gameScene, i, 456, "interface_combo_meter", null, 1, e);
                        this.comboMask = this.gameScene.add.graphics(), this.comboMask.fillRect(h.x - h.displayWidth / 2, h.y - h.displayHeight / 2, h.displayWidth, h.displayHeight);
                        var p = this.comboMask.createGeometryMask();
                        h.setMask(p), this._comboMaskMax = this.comboMask.x, this._comboMaskMin = this.comboMask.x - h.displayWidth, this.comboMask.x = this._comboMaskMin, this._drawCombo();
                        var d = "ui/ingame/interface_box.png";
                        T.a.currentMode == T.a.MODES.TWOP && (d = "ui/ingame/interface_box_p1.png");
                        var y = new W.a(this.gameScene, s, 456, 41, 43, d, t);
                        if (y.setDepthNinePatch(v.a.RENDER_DEPTH.UIBACK), this.activeWeapon[1] = new A.a(this.gameScene, y.ninePatch.x, y.ninePatch.y, u.a.spriteKey, "ui/ingame/interface_single.png", 1, e), this.activeWeaponSwitch[1] = new A.a(this.gameScene, y.ninePatch.x, y.ninePatch.y, u.a.spriteKey, "ui/white.png", 1, e), this.activeWeaponSwitch[1].setDisplaySize(this.activeWeapon[1].displayWidth, this.activeWeapon[1].displayHeight), this.activeWeaponSwitch[1].alpha = 0, T.a.currentMode == T.a.MODES.TWOP) {
                            var _ = new W.a(this.gameScene, 453, 456, 41, 43, "ui/ingame/interface_box_p2.png", t);
                            _.setDepthNinePatch(v.a.RENDER_DEPTH.UIBACK), this.activeWeapon[2] = new A.a(this.gameScene, _.ninePatch.x, _.ninePatch.y, u.a.spriteKey, "ui/ingame/interface_single.png", 1, e), this.activeWeaponSwitch[2] = new A.a(this.gameScene, _.ninePatch.x, _.ninePatch.y, u.a.spriteKey, "ui/white.png", 1, e), this.activeWeaponSwitch[2].setDisplaySize(this.activeWeapon[1].displayWidth, this.activeWeapon[1].displayHeight), this.activeWeaponSwitch[2].alpha = 0
                        }
                        var c = new W.a(this.gameScene, n, 456, 71, 43, "ui/ingame/interface_box.png", t);
                        c.setDepthNinePatch(v.a.RENDER_DEPTH.UIBACK);
                        var m = this.gameScene.add.bitmapText(n, 447, u.a.fontNames.LVL_NUM, "LEVEL", 14),
                            g = this.gameScene.add.bitmapText(n, 461, u.a.fontNames.LVL_NUM, T.a.currentLevel.toString(), 26);
                        m.setOrigin(.5, .5), g.setOrigin(.5, .5), v.a.mySpriteDepth(e, m), v.a.mySpriteDepth(e, g), m.alpha = .75;
                        var f = new W.a(this.gameScene, l, 456, 120, 33, "ui/ingame/interface_box.png", t);
                        if (f.setDepthNinePatch(v.a.RENDER_DEPTH.UIBACK), this.score1Txt = this.gameScene.add.bitmapText(l + 50, 456, u.a.fontNames.SCORE, T.a.scores[1] || 0, 22), this.score1Txt.setOrigin(1, .5), v.a.mySpriteDepth(e, this.score1Txt), this.gameScene.CrntLvl.isEditorLevel) {
                            c.setVisibleNinePatch(!1), g.visible = !1, m.visible = !1, o.setVisibleNinePatch(!1), f.ninePatch.x -= 95, this.score1Txt.x -= 95, this.buttonStop = this.gameScene.add.sprite(u.a.gameWidth, u.a.gameHeight, u.a.editorSpriteKey, "buttons/button_stop.png"), this.buttonStop.x -= this.buttonStop.displayWidth / 2 + 5, this.buttonStop.y -= this.buttonStop.displayHeight / 2 + 5, v.a.mySpriteDepth(v.a.RENDER_DEPTH.UIOVER, this.buttonStop), this.buttonStop.setInteractive({
                                useHandCursor: !0
                            });
                            var S = this;
                            this.buttonStop.on("pointerup", (function() {
                                return S.gameScene._backToEditor()
                            })), T.a.currentMode == T.a.MODES.TWOP && (_.ninePatch.x -= 90, this.activeWeapon[2].x -= 90, this.activeWeaponSwitch[2].x -= 90)
                        }
                    }
                }, {
                    key: "_drawBS3",
                    value: function() {
                        var e = v.a.RENDER_DEPTH.UI;
                        new A.a(this.gameScene, 220, 456, u.a.spriteKey, "ui/ingame/combo_fill.png", 1, e).setOrigin(.5, .5), this.comboMeter = this.gameScene.add.tileSprite(220, 456, 84, 28, "interface_combo_meter"), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UIOVER, this.comboMeter), this.comboMeter.tileScaleX = 84 / 79;
                        var t = this.gameScene.add.graphics();
                        t.fillRoundedRect(this.comboMeter.x - this.comboMeter.displayWidth / 2, this.comboMeter.y - this.comboMeter.displayHeight / 2, this.comboMeter.displayWidth, this.comboMeter.displayHeight, 10);
                        var a = t.createGeometryMask();
                        this.comboMeter.setMask(a), this._drawCombo();
                        var i = this.gameScene.add.graphics();
                        i.lineStyle(2, 6776679, .8), i.strokeRoundedRect(this.comboMeter.x - this.comboMeter.displayWidth / 2, this.comboMeter.y - this.comboMeter.displayHeight / 2, this.comboMeter.displayWidth, this.comboMeter.displayHeight, 10), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UIOVER, i);
                        var s = "ui/ingame/interface_box.png";
                        T.a.currentMode == T.a.MODES.TWOP && (s = "ui/ingame/interface_box_p1.png");
                        var n = new A.a(this.gameScene, 300, 456, u.a.spriteKey, s, 1, v.a.RENDER_DEPTH.UIBACK);
                        if (this.activeWeapon[1] = new A.a(this.gameScene, n.x, n.y, u.a.spriteKey, "ui/ingame/interface_single.png", 1, e), this.activeWeaponSwitch[1] = new A.a(this.gameScene, n.x, n.y, u.a.spriteKey, "ui/ingame/interface_box.png", 1, e), this.activeWeaponSwitch[1].setDisplaySize(this.activeWeapon[1].displayWidth, this.activeWeapon[1].displayHeight), this.activeWeaponSwitch[1].alpha = 0, T.a.currentMode == T.a.MODES.TWOP) {
                            var l = new A.a(this.gameScene, 453, 456, u.a.spriteKey, "ui/ingame/interface_box_p2.png", 1, v.a.RENDER_DEPTH.UIBACK);
                            this.activeWeapon[2] = new A.a(this.gameScene, l.x, l.y, u.a.spriteKey, "ui/ingame/interface_single.png", 1, e), this.activeWeaponSwitch[2] = new A.a(this.gameScene, l.x, l.y, u.a.spriteKey, "ui/ingame/interface_box.png", 1, e), this.activeWeaponSwitch[2].setDisplaySize(this.activeWeapon[1].displayWidth, this.activeWeapon[1].displayHeight), this.activeWeaponSwitch[2].alpha = 0
                        }
                        var o = this.gameScene.add.bitmapText(375, 444, u.a.fontNames.TIME_PTS, "LEVEL " + T.a.currentLevel, 18);
                        o.setOrigin(.5, .5), v.a.mySpriteDepth(e, o), this.timerClock = new A.a(this.gameScene, 357, 466, u.a.spriteKey, "ui/interface_satic.png", 1, e), this.timerClock.setOrigin(.5, .5);
                        var r = ("000" + this.gameScene.timebar.timeInitial).slice(-3);
                        this.timerTxt = this.gameScene.add.bitmapText(387, 464, u.a.fontNames.TIME_PTS, r, 24), this.timerTxt.setOrigin(.5, .5), v.a.mySpriteDepth(e, this.timerTxt), this.score1Txt = this.gameScene.add.bitmapText(552, 456, u.a.fontNames.TIME_PTS, T.a.scores[1] || 0, 22), this.score1Txt.setOrigin(1, .5), v.a.mySpriteDepth(e, this.score1Txt);
                        var h = this.gameScene.add.bitmapText(562, 456, u.a.fontNames.TIME_PTS, "PTS", 22);
                        h.setOrigin(0, .5), v.a.mySpriteDepth(e, h)
                    }
                }, {
                    key: "addScore",
                    value: function(e, t) {
                        u.a.isBT ? this._addScoreBT1(e, t) : (u.a.isBS2 || u.a.isBS3) && this._addScoreBS2_BS3(e, t), C.a.TaskIncrement(this.gameScene, C.a.TASK_TYPE.LEVEL_POINTS, e, T.a.currentLevel), C.a.TaskUpdate(this.gameScene, C.a.TASK_TYPE.GAME_POINTS, T.a.scores[1])
                    }
                }, {
                    key: "_addScoreBT1",
                    value: function(e, t) {
                        null != t ? T.a.scores[t.playerId] += e : (R.a.crntLives[1] > 0 && (T.a.scores[1] += e), R.a.crntLives[2] > 0 && (T.a.scores[2] += e)), this.score1Txt.text = T.a.scores[1], this.score2Txt.text = T.a.scores[2]
                    }
                }, {
                    key: "_addScoreBS2_BS3",
                    value: function(e, t) {
                        null != t ? T.a.scores[t.playerId] += e : (R.a.crntLives[1] > 0 && (T.a.scores[1] += e), R.a.crntLives[2] > 0 && (T.a.scores[2] += e)), null != this.score1Txt && (this.score1Txt.text = T.a.scores[1]), null != this.score2Txt && (this.score2Txt.text = T.a.scores[2])
                    }
                }, {
                    key: "addCombo",
                    value: function(e, t) {
                        if (!u.a.isBT) {
                            T.a.comboPoints += e, E.a.log("addCombo:" + e + ", total:" + T.a.comboPoints, this);
                            var a = t.pos.x,
                                i = t.pos.y,
                                s = u.a.fontNames.COMBOX,
                                n = "COMBO x" + e + "!",
                                l = 14 + 2.5 * e;
                            if (T.a.comboPoints >= 100)
                                for (var o in T.a.comboPoints = 0, n = "COMBO BONUS!", l = 30, s = u.a.fontNames.LVL_MSG, u.a.isBS3 && (s = u.a.fontNames.COMBOBONUS), T.a.resetComboMeter(), this.gameScene.lives.addLife(1), this.gameScene.players) {
                                    var r = this.gameScene.players[o];
                                    r.playerShield.addShield(N.a.SHIELD_TYPES.PLAIN), r.speedUpPlayer()
                                } else E.a.log("COMBO increase by", e, " to:", T.a.comboPoints);
                            var h = this.gameScene.add.bitmapText(a, i, s, n, l);
                            (h = v.a.mySpriteDepth(v.a.RENDER_DEPTH.GAME, h)).setOrigin(.5, .5), h.y -= 2 * u.a.ballSizes[t.ballId], h.y < u.a.gameAreaMin.y + h.height / 2 && (h.y = u.a.gameAreaMin.y + h.height / 2), h.y > u.a.gameAreaMax.y - h.height / 2 && (h.y = u.a.gameAreaMax.y - h.height / 2), h.x < u.a.gameAreaMin.x + h.width / 2 && (h.x = u.a.gameAreaMin.y + h.width / 2), h.x > u.a.gameAreaMax.x - h.width / 2 && (h.x = u.a.gameAreaMax.x - h.width / 2), this.gameScene.time.addEvent({
                                delay: 1500,
                                callback: function() {
                                    h.destroy()
                                }
                            }), this._drawCombo()
                        }
                    }
                }, {
                    key: "_drawCombo",
                    value: function() {
                        u.a.isBS2 ? this.comboMask.x = this._comboMaskMin + Math.abs(this._comboMaskMax - this._comboMaskMin) * T.a.comboPoints / 100 : u.a.isBS3 && this.comboMeter.setCrop(0, 0, this.comboMeter.width * T.a.comboPoints / 100, 200)
                    }
                }]), e
            }(),
            Y = a(134),
            K = function() {
                function e(t, a, i, n, l, o, r) {
                    var h = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : m.a.ZERO;
                    s()(this, e), this.myScene = t, this.image_back = new A.a(t, a, i, u.a.spriteKey, n, 1, o), this.image_front = new A.a(t, a, i, u.a.spriteKey, l, 1, o), this.callback = r, this.buttonIsEnabled = !0;
                    var p = this.image_back.displayWidth / 2 * h.x,
                        d = this.image_back.displayHeight / 2 * h.y;
                    this.image_back.x += p, this.image_back.y += d, this.image_front.x += p, this.image_front.y += d, this.buttonTween = null, this.myInit()
                }
                return l()(e, [{
                    key: "myInit",
                    value: function() {
                        var e = this;
                        this.image_back.scale = 1, this.image_front.scale = 1, this.image_back.setInteractive({
                            useHandCursor: !0
                        }).on("pointerover", (function() {
                            return e.enterButtonHoverState()
                        })).on("pointerout", (function() {
                            return e.enterButtonRestState()
                        })).on("pointerdown", (function() {
                            return e.enterButtonActiveState()
                        })).on("pointerup", (function() {
                            e.enterButtonHoverState(), e.callback()
                        }))
                    }
                }, {
                    key: "enableButton",
                    value: function() {
                        this.buttonIsEnabled = !0, this.refreshButton()
                    }
                }, {
                    key: "disableButton",
                    value: function() {
                        this.buttonIsEnabled = !1, this.refreshButton()
                    }
                }, {
                    key: "refreshButton",
                    value: function() {
                        null != this.buttonTween && this.buttonTween.stop(), this.buttonIsEnabled ? this.buttonTween = this.myScene.tweens.add({
                            targets: [this.image_back, this.image_front],
                            alpha: .25,
                            duration: 350,
                            delay: 750
                        }) : this.buttonTween = this.myScene.tweens.add({
                            targets: [this.image_back, this.image_front],
                            alpha: 1,
                            duration: 500
                        })
                    }
                }, {
                    key: "enterButtonRestState",
                    value: function() {
                        this.buttonIsEnabled && (this.image_back.scale = 1, this.image_front.scale = 1)
                    }
                }, {
                    key: "enterButtonHoverState",
                    value: function() {
                        this.buttonIsEnabled && (this.image_back.scale = 1.1, this.image_front.scale = 1.1)
                    }
                }, {
                    key: "enterButtonActiveState",
                    value: function() {
                        this.buttonIsEnabled && (this.image_back.scale = 1.1, this.image_front.scale = 1.1)
                    }
                }]), e
            }(),
            G = K,
            H = function() {
                function e(t) {
                    s()(this, e), this.gameScene = t, this.myButton = new G(t, u.a.gameWidth, 0, "ui/button_back_circle.png", "ui/btn/pause.png", v.a.RENDER_DEPTH.UIOVER, this.btn_callPauseGame.bind(this), new m.a(-1.3, 1.3)), this.myButton.x -= this.myButton.image_back.displayWidth, this.myButton.y -= this.myButton.image_back.displayHeight, this.myButton.disableButton(), this.binded_keyboard_pauseGame = this.keyboard_pauseGame.bind(this), this.gameScene.input.keyboard.on("keydown", this.binded_keyboard_pauseGame)
                }
                return l()(e, [{
                    key: "btn_callPauseGame",
                    value: function() {
                        this.gameScene.myPauseGame(!0, !0, ue.PAUSE_REASONS.BUTTON)
                    }
                }, {
                    key: "keyboard_pauseGame",
                    value: function(e) {
                        if (this.gameScene._canPlayerPause && (e.keyCode === Phaser.Input.Keyboard.KeyCodes.P || e.keyCode === Phaser.Input.Keyboard.KeyCodes.ESC)) {
                            if (E.a.getMobileScreenshots) return this.gameScene.myPauseGame(!this.gameScene.isGamePaused, !1, ue.PAUSE_REASONS.FOR_SCREENSHOT);
                            this.gameScene.isGamePaused ? this.gameScene.pauseMenu.btn_unpauseGame() : this.gameScene.myPauseGame(!0, !0, ue.PAUSE_REASONS.KEYBOARD)
                        }
                    }
                }, {
                    key: "myDestroy",
                    value: function() {
                        this.gameScene.input.keyboard.off("keydown", this.binded_keyboard_pauseGame), this.myButton.image_back.visible = !1, this.myButton.image_front.visible = !1
                    }
                }]), e
            }(),
            z = a(28),
            V = a(21),
            F = a(175),
            X = a(37),
            j = a(58),
            q = a(36),
            J = function() {
                function e(t) {
                    s()(this, e), this.gameScene = t, this.background = new A.a(t, -u.a.gameWidth, -u.a.gameHeight, u.a.spriteKey, "ui/black.png", 1, v.a.RENDER_DEPTH.PAUSE_MENU), this.background.alpha = .7, this.background.setDisplaySize(3 * u.a.gameWidth, 3 * u.a.gameHeight), this.background.setDisplayOrigin(.5), this.background.setInteractive();
                    var a = u.a.gameWidth / 2,
                        i = 100,
                        n = 0;
                    u.a.isBT && (n = 6, this.main_menu_back = new W.a(t, a, 250, 246, 150, "ui/main_menu_back.png", {
                        top: 50,
                        bottom: 50,
                        left: 50,
                        right: 50
                    }));
                    var l = 0;
                    this.backtogame = new V.a(t, a, 224.5 + i * l / 2, 196, 47, {
                        text: z.a.BT1.PAUSE_BACK,
                        size: 32,
                        fixY: n
                    }, this.btn_unpauseGame.bind(this), null, null, !1, !0, null, !1), l = 1, this.quitgame = new V.a(t, a, 224.5 + i * l / 2, 196, 47, {
                        text: z.a.BT1.PAUSE_QUIT,
                        size: 32,
                        fixY: n
                    }, this.btn_quitGame.bind(this), null, null, !0, !1, null, !1), this.main_menu_back && this.main_menu_back.setDepthNinePatch(v.a.RENDER_DEPTH.PAUSE_MENU), this.backtogame.setDepthMyUIButton(v.a.RENDER_DEPTH.PAUSE_MENU), this.quitgame.setDepthMyUIButton(v.a.RENDER_DEPTH.PAUSE_MENU);
                    var o = 70,
                        r = 70;
                    u.a.isBT || (o = 50, r = 40), this.soundButton = new F.a(t, o, r), this.soundButton.changeDepth(v.a.RENDER_DEPTH.PAUSE_MENU);
                    new j.a(t, 350, 35);
                    if (null != j.a._activeButton && (j.a._activeButton.btn_background && j.a._activeButton.btn_background.setDepthNinePatch(v.a.RENDER_DEPTH.PAUSE_MENU), j.a._activeButton.btn.setDepthMyUIButton(v.a.RENDER_DEPTH.PAUSE_MENU)), this.showPauseMenu(!1), t.CrntLvl.isEditorLevel) {
                        this.quitgame.myText.text = "OPEN EDITOR";
                        var h = this;
                        this.quitgame.callbackClick = function() {
                            h.gameScene._backToEditor()
                        }
                    }
                }
                return l()(e, [{
                    key: "showPauseMenu",
                    value: function(e) {
                        this.background.visible = e, this.main_menu_back && this.main_menu_back.setVisibleNinePatch(e), this.backtogame.setVisibleMyUIButton(e), this.quitgame.setVisibleMyUIButton(e), this.soundButton.setVisibleMySndBtn(e), null != j.a._activeButton && (j.a._activeButton.btn_background && j.a._activeButton.btn_background.setVisibleNinePatch(e), j.a._activeButton.btn.setVisibleMyUIButton(e)), e && (q.a.changeActiveScene(this.gameScene), q.a.selectButton(this.backtogame))
                    }
                }, {
                    key: "btn_unpauseGame",
                    value: function() {
                        X.a.showAd(this.gameScene, X.a.PLACEMENTS.INTERSTITIAL, this._delayedUnpauseGame.bind(this))
                    }
                }, {
                    key: "_delayedUnpauseGame",
                    value: function() {
                        var e = this;
                        setTimeout((function() {
                            e.gameScene.myPauseGame(!1, !0, ue.PAUSE_REASONS.BUTTON)
                        }), 200)
                    }
                }, {
                    key: "btn_quitGame",
                    value: function() {
                        u.a.isBT ? this.gameScene.myTransition.transitionToggle(!1, "BT1_MainMenu") : u.a.isBS2 ? null == T.a.customPack ? this.gameScene.myTransition.transitionToggle(!1, "BS2_MainMenu") : this.gameScene.myTransition.transitionToggle(!1, "BS2_MoreLevels") : u.a.isBS3 && this.gameScene.myTransition.transitionToggle(!1, "BS3_MainMenu")
                    }
                }]), e
            }(),
            Z = a(25),
            Q = function(e) {
                function t(e) {
                    var a;
                    return s()(this, t), (a = r()(this, p()(t).call(this, e)))._lifetime = 1.6, a._timeElapsed = a._lifetime, a.myTween = null, a.myInit(), a
                }
                return y()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        this.mySprite = new A.a(this.gameScene, 0, 0, u.a.spriteKey, "bubbles/combo.png", 1, v.a.RENDER_DEPTH.OVER_GAME), this.mySprite.setDisplayOrigin(.5), this.mySprite.visible = !1
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, t) {
                        this._timeElapsed < this._lifetime && (this._timeElapsed += t / 1e3, this._timeElapsed >= this._lifetime && (this.mySprite.visible = !1))
                    }
                }, {
                    key: "showWallSpikeCombo",
                    value: function(e, t) {
                        this.mySprite.x = e, this.mySprite.y = t, this.mySprite.visible = !0, this.mySprite.scale = 1, this.mySprite.angle = Z.b(30) - 15, this._timeElapsed = 0, null != this.myTween && this.myTween.stop(), this.myTween = this.gameScene.tweens.add({
                            targets: this.mySprite,
                            scale: 1.2,
                            ease: "Bounce",
                            duration: 450
                        })
                    }
                }]), t
            }(v.a),
            $ = a(110),
            ee = a(19),
            te = a.n(ee),
            ae = function(e) {
                function t(e) {
                    var a;
                    return s()(this, t), a = r()(this, p()(t).call(this, e)), E.a.log("Confetti!!!"), a.gameScene = e, a.confetti = [], a.confettiNum = 32, a.confettiVariations = 5, a.fire_blasts = 15, a.myInit(), a
                }
                return y()(t, e), l()(t, [{
                    key: "myInit",
                    value: function() {
                        if (u.a.isBS2)
                            for (var e = 0; e < this.confettiNum; e++) {
                                var t = O.a.cameraOffset.x - 100;
                                e % 2 == 0 && (t = u.a.gameWidth - O.a.cameraOffset.x + 100);
                                var a = Z.a(100, 200),
                                    i = "ui/confetti/confetti_" + (Z.b(this.confettiVariations) + 1) + ".png",
                                    s = this.gameScene.add.sprite(t, a, u.a.spriteKey, i);
                                s.angle = Z.a(0, 359), s.scale = Z.a(.55, 1), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UIOVER, s), this.confetti.push(s), this.applyForce(s, e)
                            } else if (u.a.isBS3 && L.a.isLazyLoaded)
                                for (var n = 0; n < this.fire_blasts; n++) this.spawnStar(n % 2 == 1), n < this.fire_blasts / 2 && this.spawnGarmen(n)
                    }
                }, {
                    key: "spawnStar",
                    value: function(e) {
                        var t = Z.a(0, 640),
                            a = Z.a(t + 5, t + 115),
                            i = Z.a(t - 50, t + 15),
                            s = Z.a(260, 420),
                            n = Z.a(55, 275);
                        e && (t = u.a.gameWidth - t, a = u.a.gameWidth - a, i = u.a.gameWidth - i);
                        var l = new Phaser.Curves.Path(t, 600).splineTo([a, s, i, n]),
                            o = this.gameScene.add.follower(l, 0, 0, u.a.lazySpriteKey, "ui/confetti/trail.png"),
                            r = this.gameScene.add.follower(l, 0, 0, u.a.lazySpriteKey, "ui/confetti/star.png");
                        v.a.mySpriteDepth(v.a.RENDER_DEPTH.UIOVER, o), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UIOVER, r);
                        var h = Z.a(0, 2e3),
                            p = this,
                            d = !1;
                        o.myid = Math.random(), o.startFollow({
                            positionOnPath: !0,
                            duration: 450,
                            repeat: 0,
                            rotateToPath: !0,
                            rotationOffset: 48,
                            onUpdate: function(e, t) {
                                e.elapsed > h + 310 && !d && (d = !0, w.a.playRandom(p.gameScene, [w.a.SND.FIREWORK_1, w.a.SND.FIREWORK_2, w.a.SND.FIREWORK_3]), o.destroy())
                            },
                            delay: h
                        }), r.startFollow({
                            positionOnPath: !0,
                            duration: 450,
                            repeat: 0,
                            rotateToPath: !0,
                            rotationOffset: 48,
                            onStart: function() {
                                w.a.playSound(p.gameScene, w.a.SND.FIREWORK_ROCKET)
                            },
                            onComplete: function() {
                                var t = p.gameScene.add.sprite(r.x, r.y, u.a.lazySpriteKey, "ui/confetti/blast_1.png");
                                t.angle = Z.a(-30, 30), e && (t.flipX = !0), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UIOVER, t), t.anims.play("firework_blast"), t.once("animationcomplete", (function() {
                                    t.destroy()
                                })), r.destroy()
                            },
                            delay: h
                        })
                    }
                }, {
                    key: "spawnGarmen",
                    value: function(e) {
                        var t = this;
                        this.gameScene.time.addEvent({
                            delay: Z.a(100, 2e3),
                            callback: function() {
                                var a = 1;
                                e % 2 == 0 ? a = 2 : e % 3 == 0 && (a = 3);
                                var i = Z.a(0, .3 * u.a.gameWidth),
                                    s = Z.a(-25, 70);
                                2 == a ? i = Z.a(.3 * u.a.gameWidth, .65 * u.a.gameWidth) : 3 == a && (i = Z.a(.65 * u.a.gameWidth, u.a.gameWidth));
                                var n = t.gameScene.add.sprite(i, s, u.a.lazySpriteKey, "ui/confetti/garmen_1.png");
                                n.scale = Z.a(.7, 1), n.angle = Z.a(48, 56), 2 == a ? n.angle = Z.a(22, 30) : 3 == a && (n.angle = Z.a(4, 12)), n.anims.play("garmen"), n.once("animationcomplete", (function() {
                                    n.destroy()
                                })), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UIOVER, n)
                            }
                        })
                    }
                }, {
                    key: "applyForce",
                    value: function(e, t) {
                        var a = Z.a(-50, .55 * u.a.gameWidth),
                            i = Z.a(0, a / 2);
                        t % 2 == 0 && (a = Z.a(.45 * u.a.gameWidth, u.a.gameWidth + 50), i = Z.a(0, (u.a.gameWidth - a) / 2));
                        var s = Z.a(200, 440),
                            n = Z.a(150, 400);
                        this.gameScene.tweens.add({
                            targets: e,
                            x: a,
                            y: e.y - i,
                            angle: e.angle + 180,
                            duration: s,
                            delay: n,
                            ease: "Cubic.easeOut",
                            callbackScope: this,
                            onComplete: this.beginFalling.bind(this, e)
                        })
                    }
                }, {
                    key: "beginFalling",
                    value: function(e) {
                        this.applyGravityAndRotation(e);
                        var t = Z.a(2e3, 4e3);
                        this.gameScene.tweens.add({
                            targets: e,
                            y: u.a.gameHeight + 50,
                            duration: t
                        })
                    }
                }, {
                    key: "applyGravityAndRotation",
                    value: function(e) {
                        e.y, Z.a(77, 111);
                        var t = Math.random() < .5 ? -1 : 1,
                            a = e.x + Z.a(20, 50) * t,
                            i = e.angle + Z.a(-100, 100),
                            s = Z.a(200, 500);
                        this.gameScene.tweens.add({
                            targets: e,
                            x: a,
                            angle: i,
                            duration: s,
                            ease: "Quad.easeInOut",
                            callbackScope: this,
                            onComplete: this.applyGravityAndRotation.bind(this, e)
                        })
                    }
                }, {
                    key: "myUpdate",
                    value: function(e, t) {
                        this.timer -= t / 1e3, this.timer <= 0 && (null != this.callbackMethod && this.callbackMethod(), this.myOnDestroy())
                    }
                }, {
                    key: "myOnDestroy",
                    value: function() {
                        te()(p()(t.prototype), "myOnDestroy", this).call(this);
                        for (var e = 0; e < this.confetti.length; e++) this.confetti[e].destroy()
                    }
                }]), t
            }(v.a),
            ie = a(48),
            se = a(4),
            ne = a(67),
            le = a(103),
            oe = a(18),
            re = function e(t) {
                if (s()(this, e), this.initialized = !1, E.a.log("ShowControls", T.a.currentMode, se.a.gameSettings.maxLevelUnlocked[T.a.currentMode]), (!(se.a.gameSettings.maxLevelUnlocked[T.a.currentMode] > 0) || E.a.alwaysShowControls) && !t.CrntLvl.isEditorLevel && null == T.a.customPack) {
                    t.startLevelMessage.myOnDestroy(), t.startGame();
                    var a = new Phaser.Geom.Rectangle(u.a.gameAreaMin.x, u.a.gameAreaMin.y, u.a.gameAreaSize.x, u.a.gameAreaSize.y / 2),
                        i = t.add.graphics();
                    i.fillStyle(0, .5), i.fillRectShape(a), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UI, i);
                    var n = t.add.bitmapText(u.a.gameWidth / 2, .1 * u.a.gameHeight, u.a.fontNames.MENU, "AVOID AND POP!", 36, 1);
                    v.a.mySpriteDepth(v.a.RENDER_DEPTH.UI, n), n.originX = 0, n.x = u.a.gameWidth / 2 - n.width / 2;
                    var l = .5 * u.a.gameWidth,
                        o = .3 * u.a.gameHeight;
                    O.a.isMobile ? (n.y = .2 * u.a.gameHeight, T.a.currentMode == T.a.MODES.SINGLE && (u.a.isBT ? (t.players[1].myInput.spriteLeft.alpha = 1, t.players[1].myInput.spriteRight.alpha = 1, t.players[1].myInput.spriteShoot.alpha = 1) : (u.a.isBS2 || u.a.isBS3) && (t.players[1].myInput.shoot_joy.alpha = .75, t.players[1].myInput.move_area.alpha = .25, t.players[1].myInput.move_joy.alpha = 1))) : T.a.currentMode == T.a.MODES.SINGLE ? new A.a(t, l, o, u.a.spriteKey, "tut/tutorial_controls_p1.png", 1, v.a.RENDER_DEPTH.UI) : T.a.currentMode == T.a.MODES.TWOP && (new A.a(t, l - 155, o, u.a.spriteKey, "tut/tutorial_controls_p1.png", 1, v.a.RENDER_DEPTH.UI), new A.a(t, l + 150, o, u.a.spriteKey, "tut/tutorial_controls_p2.png", 1, v.a.RENDER_DEPTH.UI)), this.initialized = !0
                }
            },
            he = a(122),
            pe = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "SaveScreenshot",
                    value: function(e, t) {
                        var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                            i = u.a.gameAreaMin.x - O.a.cameraOffset.x,
                            s = u.a.gameAreaMin.y - O.a.cameraOffset.y,
                            n = u.a.gameAreaMax.x - u.a.gameAreaMin.x,
                            l = u.a.gameAreaMax.y - u.a.gameAreaMin.y,
                            o = "image/jpeg",
                            r = e;
                        e.game.renderer.snapshotArea(i, s, n, l, (function(e) {
                            var i = "screenshot_" + se.a.gameSettings.levelEditor.lastLevelEdited;
                            r.textures.exists(i) && r.textures.remove(i);
                            for (var s = se.a.gameSettings.levelEditor.lastLevelEdited, n = 0; n < se.a.gameSettings.levelEditor.allLevels.length; n++)
                                if (se.a.gameSettings.levelEditor.allLevels[n].uniqueId == s && (null == se.a.gameSettings.levelEditor.allLevels[n].screenshot && !t || t)) {
                                    se.a.gameSettings.levelEditor.allLevels[n].screenshot = e.src, se.a.saveUserSettings(), E.a.log("Saved the screenshot");
                                    break
                                } a && a()
                        }), o, .1)
                    }
                }]), e
            }(),
            de = a(26),
            ye = a(96),
            _e = function() {
                function e(t, a) {
                    s()(this, e), this.gameScene = t, this._callback = a
                }
                return l()(e, [{
                    key: "showMenu",
                    value: function() {
                        0 != de.a.isUpgradeOK() ? (this.startReviveTimer = this.gameScene.time.now, this.gameScene.setCanPlayerPause(!1), this.background = new A.a(this.gameScene, -u.a.gameWidth, -u.a.gameHeight, u.a.spriteKey, "ui/black.png", 1, v.a.RENDER_DEPTH.CONTINUE_MENU), this.background.alpha = .35, this.background.setDisplaySize(3 * u.a.gameWidth, 3 * u.a.gameHeight), this.background.setDisplayOrigin(.5), this.background.setInteractive(), this.upgradeBtns = [], this._showAvailableUpgrades()) : this._callback()
                    }
                }, {
                    key: "_showAvailableUpgrades",
                    value: function() {
                        for (var e = .5 * u.a.gameWidth, t = .25 * u.a.gameHeight, a = 0, i = 0; i < de.a.ITEMS.length; i++) - 1 != de.a.getMaxLevelForItem(de.a.ITEMS[i]) && a++;
                        var s = 115 * (a - 1),
                            n = 0;
                        for (i = 0; i < de.a.ITEMS.length; i++)
                            if (-1 != de.a.getMaxLevelForItem(de.a.ITEMS[i]) && !de.a.ITEMS[i].passive) {
                                var l = e - s / 2 + 115 * n,
                                    o = t,
                                    r = new V.a(this.gameScene, l, o, 90, 90, {
                                        icon: de.a.ITEMS[i].icon,
                                        iconSpriteKey: u.a.lazySpriteKey
                                    }, this._selectUpgrade.bind(this, de.a.ITEMS[i], l, o, 2), null, null, !0, 0 == n, "upgrade");
                                r.myIcon.scale = 2, r.setDepthMyUIButton(v.a.RENDER_DEPTH.CONTINUE_MENU);
                                var h = new V.a(this.gameScene, l, o + 65, 90, 23, {
                                    text: "PICK ALWAYS",
                                    size: 14,
                                    fixY: 2
                                }, this.selectAlwaysPick.bind(this, i, de.a.ITEMS[i], l, o, 2), null, null, !0, !1, "upgrade");
                                h.setDepthMyUIButton(v.a.RENDER_DEPTH.CONTINUE_MENU), this.upgradeBtns.push(r, h), n++
                            } 0 == n ? (this._clearMenuItems(), this.callbackAfterUpgrade()) : 1 == n ? this.upgradeBtns[0].callbackClick() : (this.myText = this.gameScene.add.bitmapText(.5 * u.a.gameWidth, .1 * u.a.gameHeight, u.a.fontNames.MENU, "PICK UPGRADE:", 30), this.myText.setOrigin(.5, .5), v.a.mySpriteDepth(v.a.RENDER_DEPTH.CONTINUE_MENU, this.myText))
                    }
                }, {
                    key: "selectAlwaysPick",
                    value: function(e, t, a, i, s) {
                        for (var n = 0; n < se.a.gameSettings.levelPointsDistributed.length; n++)
                            if (n != e)
                                for (var l = 0; l < se.a.gameSettings.levelPointsDistributed[n].length; l++) se.a.gameSettings.levelPointsDistributed[n][l] = 0;
                        this._selectUpgrade(t, a, i, s)
                    }
                }, {
                    key: "_selectUpgrade",
                    value: function(e, t, a, i) {
                        E.a.log("MyUpgradeSelect", e);
                        for (var s = 0; s < this.upgradeBtns.length; s++) this.upgradeBtns[s].buttonIsActive = !1, this.upgradeBtns[s].setVisibleMyUIButton(!1);
                        this.gameScene.upgradeItem = e;
                        var n = de.a.parseActivationTime(e, this.gameScene);
                        this.gameScene.timebar.applyUpgradeTime(n), this.gameScene.upgradeItemSprite = this.gameScene.add.sprite(t, a, u.a.lazySpriteKey, e.icon);
                        var l = 0,
                            o = u.a.timebarP1.y + (u.a.timebarP2.y - u.a.timebarP1.y) / 2,
                            r = n / this.gameScene.timebar.timeInitial;
                        if (u.a.isBT ? l = u.a.timebarP1.x + (u.a.timebarP2.x - u.a.timebarP1.x) * r - this.gameScene.upgradeItemSprite.displayWidth / 2 : u.a.isBS2 ? l = u.a.timebarP1.x + (u.a.timebarP2.x - u.a.timebarP1.x) * (1 - r) + this.gameScene.upgradeItemSprite.displayWidth / 2 : u.a.isBS3 && (l = 423, o = 464), this.gameScene.upgradeItemSprite.scale = i, v.a.mySpriteDepth(v.a.RENDER_DEPTH.CONTINUE_MENU, this.gameScene.upgradeItemSprite), 2 == this.upgradeBtns.length) this.gameScene.upgradeItemSprite.scale = 1, this.gameScene.upgradeItemSprite.x = l, this.gameScene.upgradeItemSprite.y = o, v.a.mySpriteDepth(v.a.RENDER_DEPTH.UI, this.gameScene.upgradeItemSprite), this._clearMenuItems(), this.callbackAfterUpgrade();
                        else {
                            var h = this;
                            this.gameScene.tweens.add({
                                targets: this.gameScene.upgradeItemSprite,
                                x: l,
                                y: o,
                                scale: 1,
                                duration: 250,
                                onComplete: function(e) {
                                    v.a.mySpriteDepth(v.a.RENDER_DEPTH.UI, h.gameScene.upgradeItemSprite), h._clearMenuItems(), h.callbackAfterUpgrade()
                                }
                            })
                        }
                    }
                }, {
                    key: "_clearMenuItems",
                    value: function() {
                        this.background.destroy();
                        for (var e = 0; e < this.upgradeBtns.length; e++) this.upgradeBtns[e].destroyMyUIButton();
                        this.myText && this.myText.destroy(), this.adblockerInfo && (this.adblockerInfo.destroy(), this.black2.destroy())
                    }
                }, {
                    key: "callbackAfterUpgrade",
                    value: function() {
                        if (null != this.gameScene.upgradeItem && 0 == this.gameScene.upgradeItem.passive) {
                            var e = JSON.parse(JSON.stringify(ye.a.MSGS.UPGRADE_TIMEBAR_SHOW_FIRST));
                            e.uid = "upgrd__" + this.gameScene.upgradeItem.modType, e.message = this.gameScene.upgradeItem.title + "\n" + this.gameScene.upgradeItem.activationDescr, e.icon = this.gameScene.upgradeItem.icon, e.highlightRect = new Phaser.Geom.Rectangle(this.gameScene.upgradeItemSprite.x - 13, this.gameScene.upgradeItemSprite.y - 13, 26, 26), new ye.a(this.gameScene, e, this._callback.bind(this))
                        } else this._callback()
                    }
                }]), e
            }(),
            ce = a(29),
            me = function(e) {
                function t() {
                    return s()(this, t), r()(this, p()(t).call(this, {
                        key: "GameScene"
                    }))
                }
                return y()(t, e), l()(t, [{
                    key: "create",
                    value: function() {
                        if (v.a.myInitialize(), this.CrntLvl = null, u.a.isBS2 && null != se.a.gameSettings.levelEditor.lastLevelEdited) {
                            for (var e = 0; e < se.a.gameSettings.levelEditor.allLevels.length; e++) se.a.gameSettings.levelEditor.allLevels[e].uniqueId == se.a.gameSettings.levelEditor.lastLevelEdited && (this.CrntLvl = se.a.gameSettings.levelEditor.allLevels[e].levelObj);
                            E.a.log("LOADED LVL", JSON.stringify(this.CrntLvl));
                            var t = T.a.MODES.SINGLE;
                            this.CrntLvl.players.length > 1 && (t = T.a.MODES.TWOP), T.a.newGame(t, this.CrntLvl.backImageNum)
                        } else this.CrntLvl = Object($.a)(T.a.currentMode, T.a.currentLevel);
                        this.ballManager = k.spawnBallManager(this, this.CrntLvl.ballInfo).myInit(), this.itemManager = new B.a(this, this.CrntLvl), this.myEventManager = new I.a(this), this.phyEngine = new c.a(this).myInit(E.a.debugPhy), this.players = [], this.timebar = {}, this.myGUI = {}, this.lives = new R.a(this), this.gameTime = 0, this._isPaused = !0, this._canPlayerPause = !1, this.backBrickSprite = null, this.gameAreaStroke = null, this.backImage = null, this.myCombo = null, this.gamePauseButton = null, this.pauseMenu = null, this.myTransition = null, this.startLevelSound = null, this.startLevelMessage = null, this.showControlsOnStart = null, this.timeInLevel = 0, this.upgradeItem = null, this.upgradeItemSprite = null, this.levelReceivedRevive = !1, this.sys.events.once("shutdown", le.a.save), this.myGameSceneInit()
                    }
                }, {
                    key: "init",
                    value: function(e) {
                        this.passedAlongSceneData = e, this.scene.settings.data = null
                    }
                }, {
                    key: "myGameSceneInit",
                    value: function() {
                        var e = this;
                        if (Y.a.spawnBounds(this), this._drawStageBackground(), this._drawBackgroundImage(), this.myCombo = new Q(this), this.CrntLvl.players.forEach((function(t) {
                                if (u.a.isBT) R.a.crntLives[t.id] > 0 && (e.players[t.id] = new _.a(e, t.id, new m.a(t.x, t.y)).myInit());
                                else {
                                    var a = t.x,
                                        i = t.y;
                                    u.a.isBS3 && (i -= 1.5), e.players[t.id] = new _.a(e, t.id, new m.a(a, i)).myInit()
                                }
                            })), this.CrntLvl.balls.forEach((function(t) {
                                new g.a(e, t).myInit()
                            })), this.CrntLvl.walls.forEach((function(t) {
                                Y.a.spawnWall(e, t)
                            })), (u.a.isBS2 || u.a.isBS3) && this.itemManager._prepareDropBS2(this.CrntLvl), this.gamePauseButton = new H(this), this.pauseMenu = new J(this), g.a.CreateTestBodies(this), E.a.addMoreInfo) {
                            null != this.players[1] && (this.players[1].playerShield.ignoreBall = function() {
                                return !0
                            }), null != this.players[2] && (this.players[2].playerShield.ignoreBall = function() {
                                return !0
                            });
                            var t = this;
                            this.input.keyboard.on("keydown", (function(e) {
                                if (e.keyCode === Phaser.Input.Keyboard.KeyCodes.T && (console.error("issued an all pop event"), t.itemManager.addMod(x.a.ITEM_MANAGER.MOD_TYPE.MEDAL)), e.keyCode === Phaser.Input.Keyboard.KeyCodes.I)
                                    for (var a in console.error("issued an all list event"), t.ballManager.activeBalls)
                                        for (var i in t.ballManager.activeBalls[a]) console.log("Left ball", t.ballManager.activeBalls[a][i].ballColor, t.ballManager.activeBalls[a][i])
                            }))
                        }
                        this.timebar = new D(this).myInit(this.CrntLvl), this.myGUI = new U(this).myInit(), null != T.a.customPack && T.a.customPack.levels.length == T.a.currentLevel && (E.a.log("Final level for custom pack."), this.CrntLvl.extra = he.a), null != this.CrntLvl.extra && this.CrntLvl.extra(this), this.myTransition = new ie.a(this);
                        var a = !0;
                        if (null != this.passedAlongSceneData && null != this.passedAlongSceneData.hideTransition && (a = !1), a ? this.myTransition.transitionOpen() : this.myTransition.clearSlides(), se.a.gameSettings.lastLevelPlayed[T.a.currentMode] = T.a.currentLevel, se.a.saveUserSettings(), X.a.showAd(this, X.a.PLACEMENTS.INTERSTITIAL, this._startTheLevel.bind(this)), null != T.a.customPack) {
                            if ("Master Quest" == T.a.customPack.packName) {
                                for (var i = 51; i <= 105; i++) this.load.image("back_lvl_" + i, "assets/bs2/packs/back_masterquest/back_" + i + ".jpg");
                                this.load.start()
                            } else if ("BS1 in BS2" == T.a.customPack.packName) {
                                for (i = 1; i <= 22; i++) this.load.image("back_lvl_bs1inbs2_" + i, "assets/bs2/packs/back_bs1_in_bs2/back_" + i + ".jpg");
                                this.load.start()
                            } else if ("Impossible Quest" == T.a.customPack.packName)
                                for (i = 1; i <= 54; i++) this.load.image("back_lvl_impossible_" + i, "assets/bs2/packs/back_impossiblequest/back_" + i + ".jpg");
                            this.load.start()
                        }
                    }
                }, {
                    key: "myPauseGame",
                    value: function(e, t, a) {
                        E.a.warn("Pause." + e + ", already paused: " + this._isPaused + ", playerInitiated:" + t + ", reason:" + a), e != this._isPaused && (t && !this._canPlayerPause || (this._isPaused = e, v.a.doOnPause(this._isPaused), t && !e ? (this.gamePauseButton.myButton.enableButton(), this.pauseMenu.showPauseMenu(!1)) : t && e && (this.gamePauseButton.myButton.disableButton(), this.pauseMenu.showPauseMenu(!0)), t && se.a.saveUserSettings(), oe.a.isPoki && (e ? PokiSDK.gameplayStop() : PokiSDK.gameplayStart())))
                    }
                }, {
                    key: "setCanPlayerPause",
                    value: function(e) {
                        this._canPlayerPause = e, e && this.gamePauseButton.myButton && this.gamePauseButton.myButton.enableButton()
                    }
                }, {
                    key: "startGame",
                    value: function() {
                        E.a.log("STARTING GAME!"), this.myPauseGame(!1, !1, t.PAUSE_REASONS.LEVEL_START), this.setCanPlayerPause(!0), this.myEventManager.dispatchEvent(I.a.EVENT_TYPE.GAME_START), C.a.TaskReset(this, C.a.TASK_TYPE.BALL_WALL_EDGE, T.a.currentLevel, "left"), C.a.TaskReset(this, C.a.TASK_TYPE.BALL_WALL_EDGE, T.a.currentLevel, "right"), C.a.TaskReset(this, C.a.TASK_TYPE.COLLECT_ITEM_LVL, T.a.currentLevel), C.a.TaskReset(this, C.a.TASK_TYPE.SHOT_ANY_WEAPON_ON_LVL, T.a.currentLevel), C.a.TaskReset(this, C.a.TASK_TYPE.LEVEL_COMBOS, T.a.currentLevel), ce.a.LogProgression(ce.a.EVENT.PROGRESSION.START, this.CrntLvl.isEditorLevel)
                    }
                }, {
                    key: "playerDied",
                    value: function(e, a) {
                        this.myPauseGame(!0, !1, t.PAUSE_REASONS.DEATH), this.myEventManager.dispatchEvent(I.a.EVENT_TYPE.PLAYER_DIED), this.levelReceivedRevive || (ce.a.LogProgression(ce.a.EVENT.PROGRESSION.FAIL, this.CrntLvl.isEditorLevel), ce.a.LogDeath(this.CrntLvl.isEditorLevel, a)), C.a.TaskIncrement(this, C.a.TASK_TYPE.TOTAL_DEATHS, 1), this.CrntLvl.isEditorLevel ? this._backToEditor() : 1 != this.lives.isGameOver(e, a) && this.playerDiedAnimation(e, a)
                    }
                }, {
                    key: "playerDiedAnimation",
                    value: function(e, t) {
                        E.a.log("playerDiedAnimation", e, t), X.a.adServer.preloadAds(), !u.a.isBS2 && !u.a.isBS3 || t != _.a.DEATH_REASON.BALL ? this.restartStageAfterDying(t) : this.time.addEvent({
                            delay: 350,
                            callback: e.animatePlayerDeathBounce,
                            args: [null, null],
                            callbackScope: e
                        })
                    }
                }, {
                    key: "restartStageAfterDying",
                    value: function(e) {
                        if (E.a.log("restartStageAfterDying", e), !u.a.isBS2 && !u.a.isBS3 || (T.a.resetComboMeter(), e == _.a.DEATH_REASON.TIMEBAR)) {
                            var t = P.a.MESSAGES.OUCH;
                            e == _.a.DEATH_REASON.TIMEBAR && (t = P.a.MESSAGES.OUT_OF_TIME), new P.a(this, t, 1.8, this.scene.restart.bind(this.scene, {
                                hideTransition: !0
                            })).myInit()
                        } else this.scene.restart({
                            hideTransition: !0
                        })
                    }
                }, {
                    key: "levelComplete",
                    value: function() {
                        if (this.myPauseGame(!0, !1, t.PAUSE_REASONS.LEVEL_COMPLETE), w.a.playSound(this, w.a.SND.LEVEL_FINISHED_SUCCESS), this.time.delayedCall(100, this.timebar.turnTimeToPoints, [], this.timebar), this._tasksOnLevelCompleted(), u.a.isBT) new P.a(this, P.a.MESSAGES.LEVEL_COMPLETED, 99).myInit();
                        else if (u.a.isBS2 || u.a.isBS3) {
                            for (var e in this.players) this.players[e].playCharAnim(_.a.ANIMS.WIN), this.players[e].playerShield && this.players[e].playerShield.shieldSprite && this.add.tween({
                                targets: this.players[e].playerShield.shieldSprite,
                                alpha: 0,
                                duration: 250
                            });
                            new ae(this), this.CrntLvl.isEditorLevel && this._succesfullyFinishedEditorLevel()
                        }
                        X.a.adServer.preloadAds()
                    }
                }, {
                    key: "_tasksOnLevelCompleted",
                    value: function() {
                        C.a.TaskUpdate(this, C.a.TASK_TYPE.LEVEL_COMPLETED, !0, T.a.currentLevel), C.a.TaskUpdate(this, C.a.TASK_TYPE.TIME_LEFT, this.timebar.timeLeft, T.a.currentLevel), this.players[1] && C.a.TaskUpdate(this, C.a.TASK_TYPE.DONT_MISS, this.players[1].shotManager.accuracyBonus, T.a.currentLevel), C.a.TaskCheckAndNotify(this, C.a.TASK_TYPE.BALL_WALL_EDGE, T.a.currentLevel, "left"), C.a.TaskCheckAndNotify(this, C.a.TASK_TYPE.BALL_WALL_EDGE, T.a.currentLevel, "right"), C.a.TaskIncrement(this, C.a.TASK_TYPE.CONSECUTIVE_LEVELS, 1), C.a.TaskCheckAndNotify(this, C.a.TASK_TYPE.SHOT_ANY_WEAPON_ON_LVL, T.a.currentLevel), C.a.TaskCheckAndNotify(this, C.a.TASK_TYPE.LEVEL_COMBOS, T.a.currentLevel), null != T.a.customPack && C.a.TaskUpdateIfCondition(this, C.a.TASK_TYPE.COMPLETE_PACK_LVLS, T.a.currentLevel, ">", T.a.customPack.packName), this.CrntLvl.isEditorLevel && C.a.TaskUpdate(this, C.a.TASK_TYPE.CMPLT_EDITOR_LVL, !0), ce.a.LogProgression(ce.a.EVENT.PROGRESSION.COMPLETE, this.CrntLvl.isEditorLevel)
                    }
                }, {
                    key: "_levelCompleteTimebarAdded",
                    value: function(e) {
                        this.saveLeveUnlocklProgress(), this.saveBestLevelScore(), this.time.addEvent({
                            delay: e,
                            callback: this._shareOrStartNextLevel,
                            callbackScope: this
                        })
                    }
                }, {
                    key: "_shareOrStartNextLevel",
                    value: function() {
                        0 == M.a.ShareSceneButtonReserveShare() && this._startNextLevel()
                    }
                }, {
                    key: "_startNextLevel",
                    value: function() {
                        E.a.warn("_startNextLevel", "Increment level & load game scene. cnrtLvl:", T.a.currentLevel), this.CrntLvl.isEditorLevel ? this._backToEditor() : (T.a.currentLevel++, null != Object($.a)(T.a.currentMode, T.a.currentLevel) ? this.scene.restart({
                            hideTransition: !0
                        }) : E.a.log("NO MORE LEVELS. GAME END."))
                    }
                }, {
                    key: "preUpdate",
                    value: function(e, t) {
                        v.a.doPreUpdate(e, t)
                    }
                }, {
                    key: "update",
                    value: function(e, t) {
                        this.gameTime = e, this.phyEngine.engineLoop(e), v.a.doUpdate(e, t), this._isPaused || (this.timeInLevel += t)
                    }
                }, {
                    key: "_drawStageBackground",
                    value: function() {
                        this.backBrickSprite = new ne.a(this), this.backBrickSprite.setTileScale(u.a.spriteScale), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UIBACK, this.backBrickSprite), u.a.isBS3 && (this.backBrickSprite.backEdgeLeft && (v.a.mySpriteDepth(v.a.RENDER_DEPTH.UIBACK, this.backBrickSprite.backEdgeLeft), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UIBACK, this.backBrickSprite.backEdgeRight)), this.backBrickSprite2 = new A.a(this, u.a.gameWidth / 2, u.a.gameHeight / 2, "game_interface", null, 1, v.a.RENDER_DEPTH.UI)), this._backBrickMask = this.add.graphics(), this._backBrickMask.fillRect(-u.a.gameWidth, -u.a.gameHeight, 3 * u.a.gameWidth, u.a.gameHeight + u.a.gameAreaMin.y), this._backBrickMask.fillRect(-u.a.gameWidth, u.a.gameAreaMax.y, 3 * u.a.gameWidth, u.a.gameHeight), this._backBrickMask.fillRect(-u.a.gameWidth, -u.a.gameHeight, u.a.gameWidth + u.a.gameAreaMin.x, 3 * u.a.gameHeight), this._backBrickMask.fillRect(u.a.gameAreaMax.x, -u.a.gameHeight, u.a.gameWidth, 3 * u.a.gameHeight);
                        var e = this._backBrickMask.createGeometryMask();
                        this.backBrickSprite.setMask(e), this.backBrickSprite2 && this.backBrickSprite2.setMask(e);
                        var t = 1;
                        u.a.isBS3 && (t = 0), this.gameAreaStroke = this.add.graphics(), this.gameAreaStroke.clear(), this.gameAreaStroke.lineStyle(1, u.a.gameUIAreaStroke, 1), this.gameAreaStroke.strokeRect(u.a.gameAreaMin.x - t, u.a.gameAreaMin.y - t, u.a.gameAreaMax.x - u.a.gameAreaMin.x + 2 * t, u.a.gameAreaMax.y - u.a.gameAreaMin.y + 2 * t), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UIBACK, this.gameAreaStroke)
                    }
                }, {
                    key: "_drawBackgroundImage",
                    value: function() {
                        var e = u.a.gameAreaMin.x + (u.a.gameAreaMax.x - u.a.gameAreaMin.x) / 2,
                            t = u.a.gameAreaMin.y + (u.a.gameAreaMax.y - u.a.gameAreaMin.y) / 2;
                        null != this.CrntLvl.offsetBackground && (e += this.CrntLvl.offsetBackground.x, t += this.CrntLvl.offsetBackground.y);
                        var a = "back_lvl_" + T.a.currentLevel;
                        if (T.a.currentLevel > 50 && (a = "back_lvl_" + (T.a.currentLevel - 35)), T.a.currentLevel > 85 && (a = "back_lvl_" + (T.a.currentLevel - 35) % 50 + 1), null != T.a.customPack && ("Master Quest" == T.a.customPack.packName ? a = "back_lvl_" + T.a.currentLevel : "BS1 in BS2" == T.a.customPack.packName ? a = "back_lvl_bs1inbs2_" + T.a.currentLevel : "Impossible Quest" == T.a.customPack.packName && (a = "back_lvl_impossible_" + T.a.currentLevel)), this.textures.exists(a) || (a = "back_lvl_1"), this.backImage = this.add.image(e, t, a), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UNDER_GAME, this.backImage), u.a.isBS3) {
                            var i = this.add.graphics();
                            i.fillStyle(0, .5), i.fillRect(-1e4, -1e4, 3e4, 3e4), v.a.mySpriteDepth(v.a.RENDER_DEPTH.UNDER_GAME, i)
                        }
                    }
                }, {
                    key: "_startTheLevel",
                    value: function() {
                        this.gamePauseButton.myButton.image_back.visible = !1, this.gamePauseButton.myButton.image_front.visible = !1, se.a.gameSettings.levelEditor && null != se.a.gameSettings.levelEditor.lastLevelEdited ? pe.SaveScreenshot(this, !0, this._checkUpgrade.bind(this)) : this._checkUpgrade()
                    }
                }, {
                    key: "_checkUpgrade",
                    value: function() {
                        L.a.isLazyLoaded ? new _e(this, this._startTheLevel2.bind(this)).showMenu() : this._startTheLevel2()
                    }
                }, {
                    key: "_startTheLevel2",
                    value: function() {
                        this.gamePauseButton.myButton.image_back.visible = !0, this.gamePauseButton.myButton.image_front.visible = !0, this.startLevelSound = w.a.playSound(this, w.a.SND.LEVEL_START);
                        var e = "LEVEL " + T.a.currentLevel;
                        this.CrntLvl.isEditorLevel && (e = P.a.MESSAGES.GET_READY), this.startLevelMessage = new P.a(this, e, 1.2, this.startGame.bind(this)).myInit(), this.myEventManager.dispatchEvent(I.a.EVENT_TYPE.GAME_LOADED), this.showControlsOnStart = new re(this)
                    }
                }, {
                    key: "_backToEditor",
                    value: function() {
                        oe.a.isPoki && PokiSDK.gameplayStop(), this.scene.start("LevelEditorScene")
                    }
                }, {
                    key: "_succesfullyFinishedEditorLevel",
                    value: function() {
                        for (var e = se.a.gameSettings.levelEditor.lastLevelEdited, t = 0; t < se.a.gameSettings.levelEditor.allLevels.length; t++)
                            if (se.a.gameSettings.levelEditor.allLevels[t].uniqueId == e) {
                                se.a.gameSettings.levelEditor.allLevels[t].levelObj.finishedSuccesfully = !0, se.a.saveUserSettings();
                                break
                            }
                    }
                }, {
                    key: "saveLeveUnlocklProgress",
                    value: function() {
                        var e = T.a.currentLevel + 1;
                        null != T.a.customPack ? se.a.gameSettings.playedPackInfo[T.a.customPackKey] < e && (se.a.gameSettings.playedPackInfo[T.a.customPackKey] = e, se.a.saveUserSettings()) : se.a.gameSettings.maxLevelUnlocked[T.a.currentMode] < e && (se.a.gameSettings.maxLevelUnlocked[T.a.currentMode] = e, se.a.saveUserSettings())
                    }
                }, {
                    key: "saveBestLevelScore",
                    value: function(e) {
                        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                        if (E.a.log("Attempting saveBestLevelScore with waitTime ", t), T.a.currentMode == T.a.MODES.SINGLE && null == T.a.customPack && !this.CrntLvl.isEditorLevel) {
                            var a = se.a.gameSettings.bestScorePerLevel[T.a.currentLevel] || 0;
                            if (T.a.scores[1] > a && (E.a.log("New best score of ", T.a.scores[1], " for level ", T.a.currentLevel), se.a.gameSettings.bestScorePerLevel[T.a.currentLevel] = T.a.scores[1], L.a.isLazyLoaded && null == T.a.customPack)) {
                                var i = "sharescore/bubble_highscore_L.psd";
                                this.players[1].pos.x > u.a.gameWidth / 2 && (i = "sharescore/bubble_highscore_R.psd");
                                var s = new A.a(this, this.players[1].pos.x, this.players[1].pos.y, u.a.lazySpriteKey, i, 1, v.a.RENDER_DEPTH.UIOVER);
                                this.tweens.add({
                                    targets: s,
                                    angle: {
                                        from: -1,
                                        to: 1
                                    },
                                    duration: 350,
                                    yoyo: !0,
                                    repeat: -1,
                                    ease: "Sine.easeInOut"
                                })
                            }
                        }
                    }
                }, {
                    key: "isGamePaused",
                    get: function() {
                        return this._isPaused
                    }
                }]), t
            }(Phaser.Scene);
        me.PAUSE_REASONS = {
            DEATH: "death",
            BUTTON: "button",
            KEYBOARD: "keyboard",
            FOR_SCREENSHOT: "screenshot",
            LEVEL_MESSAGE: "lvl_message",
            LEVEL_START: "lvl_start",
            LEVEL_COMPLETE: "lvl_complete",
            REVIVED: "revived"
        };
        var ue = t.a = me
    },
    8: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return y
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(17),
            r = a.n(o),
            h = a(53),
            p = (a(0), a(2)),
            d = a(12),
            y = (a(20), function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "newGame",
                    value: function(t) {
                        var a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1,
                            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                        null != i && (i = JSON.parse(JSON.stringify(i))), e.currentMode = t, e.currentLevel = a, e.resetScores(), e.resetComboMeter(), h.a.resetLives(t), e._customPackKey = "", null != i ? (e.customPack = i, e.currentMode = e.MODES.SINGLE, i.is2P && (e.currentMode = e.MODES.TWOP)) : (e.customPack = null, e._customPackKey = ""), d.a.TaskReset(null, d.a.TASK_TYPE.CONSECUTIVE_LEVELS)
                    }
                }, {
                    key: "resetScores",
                    value: function() {
                        e.scores[1] = 0, e.scores[2] = 0
                    }
                }, {
                    key: "isYouksPack",
                    value: function() {
                        return null != e.customPack && ("Master Quest" == e.customPack.packName || "45 Expansion" == e.customPack.packName)
                    }
                }, {
                    key: "customPackKey",
                    get: function() {
                        return null == e.customPack ? (p.a.error("customPackKey, Unknown pack"), null) : ("" != e._customPackKey || (e._customPackKey = e.customPack.packName + e.customPack.levels.length, p.a.log("Set new custom packKey:", e._customPackKey)), e._customPackKey)
                    }
                }]), e
            }());
        r()(y, "MODES", {
            SINGLE: "single",
            TWOP: "twop",
            PACK: "pack"
        }), r()(y, "currentLevel", 0), r()(y, "currentMode", y.MODES.SINGLE), r()(y, "scores", []), r()(y, "comboPoints", 0), r()(y, "resetComboMeter", (function() {
            y.comboPoints = 0
        })), r()(y, "customPack", null), r()(y, "_customPackKey", "")
    },
    80: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(17),
            r = a.n(o),
            h = (a(73), a(0)),
            p = a(22),
            d = a(1),
            y = a(12),
            _ = a(8),
            c = function() {
                function e() {
                    s()(this, e)
                }
                return l()(e, null, [{
                    key: "CollisionVsAABB",
                    value: function(t, a, i, s) {
                        var n = t.pos.x - a.pos.x,
                            l = t.radius + a.sizeHalf.x - Math.abs(n);
                        if (l > 0) {
                            var o = t.pos.y - a.pos.y,
                                r = t.radius + a.sizeHalf.y - Math.abs(o);
                            if (r > 0) {
                                var h, p, d = 0,
                                    y = 0;
                                if (n < -a.sizeHalf.x ? (h = a._p1.x, d = -1) : n > a.sizeHalf.x && (h = a._p2.x, d = 1), o < -a.sizeHalf.y ? (p = a._p1.y, y = -1) : o > a.sizeHalf.y && (p = a._p2.y, y = 1), 0 === d || 0 == t.vel.x) e._solveCollision(t, a, 0, r * y, 0, y, i, s);
                                else if (0 === y) e._solveCollision(t, a, l * d, 0, d, 0, i, s);
                                else {
                                    var _ = t.pos.x - h,
                                        c = t.pos.y - p,
                                        m = _ * _ + c * c;
                                    if (t.radius * t.radius > m) {
                                        var u, g, v = t.pos.x - t.tickInfo.vx,
                                            f = t.pos.y - t.tickInfo.vy,
                                            S = t.tickInfo.vy / t.tickInfo.vx,
                                            E = S * S,
                                            x = (h + S * p + E * v - S * f) / (E + 1),
                                            T = (f + S * h + E * p - S * v) / (E + 1),
                                            b = h - x,
                                            k = p - T,
                                            w = Math.sqrt(b * b + k * k),
                                            I = Math.sqrt(t.radius * t.radius - w * w),
                                            P = Math.atan(t.tickInfo.vx / t.tickInfo.vy);
                                        t.tickInfo.vy > 0 ? (u = x - I * Math.sin(P), g = T - I * Math.cos(P)) : (u = x + I * Math.sin(P), g = T + I * Math.cos(P)), u < a._p1.x ? d = -1 : u > a._p2.x && (d = 1), g < a._p1.y ? y = -1 : g > a._p2.y && (y = 1), 0 == d ? (r = 1 == y ? a._p2.y - t.pos.y : t.pos.y - a._p1.y, e._solveCollision(t, a, 0, r, 0, y, i, s)) : 0 == y ? (l = 1 == d ? a._p2.x - t.pos.x : t.pos.x - a._p1.x, e._solveCollision(t, a, l, 0, d, 0, i, s)) : (l = -(t.pos.x - u), r = -(t.pos.y - g), e._solveCollision(t, a, l, r, d, y, i, s, h, p))
                                    }
                                }
                                return !0
                            }
                        }
                        return !1
                    }
                }, {
                    key: "_solveCollision",
                    value: function(t, a, i, s, n, l, o, r, y, _) {
                        if (!t.gameScene.isGamePaused) {
                            var c = a;
                            if (c == r && (c = t), 0 === s) n < 0 ? e.EdgeAABBLeft(t, a, i, s, o, r, c) : e.EdgeAABBRight(t, a, i, s, o, r, c);
                            else if (0 === i) l < 0 ? e.EdgeAABBTop(t, a, i, s, o, r, c) : e.EdgeAABBBottom(t, a, i, s, o, r, c);
                            else {
                                var m = Math.abs(t.pos.x - y),
                                    u = Math.abs(t.pos.y - _);
                                if (e.pBodySim.radius = h.a.ballSizes[t.ballId], e.pBodySim.vel.x = t.vel.x, e.pBodySim.vel.y = t.vel.y, a.goType != d.a.GO_TYPE.SHOT && a.goType != d.a.GO_TYPE.PLAYER)
                                    if (m > u) {
                                        if (m > h.a.ballBounceDiff[t.ballId])
                                            if (n > 0) {
                                                if (t.tickInfo.vx < 0) {
                                                    var g = t.pos.x - t.tickInfo.vx;
                                                    if (0 == t.gameScene.phyEngine.simulateCollisions(e.pBodySim, g, t.pos.y + s, [p.a.LAYER.WALL]).collisions.length) return t.pos.x = g, e.EdgeAABBRight(t, a, i, s, o, r, c), !0
                                                }
                                            } else if (t.tickInfo.vx > 0) {
                                            g = t.pos.x - t.tickInfo.vx;
                                            if (0 == t.gameScene.phyEngine.simulateCollisions(e.pBodySim, g, t.pos.y + s, [p.a.LAYER.WALL]).collisions.length) return t.pos.x = g, void e.EdgeAABBLeft(t, a, i, s, o, r, c)
                                        }
                                    } else if (u > h.a.ballBounceDiff[t.ballId])
                                    if (l > 0) {
                                        if (t.tickInfo.vy < 0) {
                                            var v = t.pos.y - t.tickInfo.vy;
                                            if (0 == t.gameScene.phyEngine.simulateCollisions(e.pBodySim, t.pos.x + i, v, [p.a.LAYER.WALL]).collisions.length) return t.pos.y = v, void e.EdgeAABBBottom(t, a, i, s, o, r, c)
                                        }
                                    } else if (t.tickInfo.vy > 0) {
                                    v = t.pos.y - t.tickInfo.vy;
                                    if (0 == t.gameScene.phyEngine.simulateCollisions(e.pBodySim, t.pos.x + i, v, [p.a.LAYER.WALL]).collisions.length) return t.pos.y = v, void e.EdgeAABBTop(t, a, i, s, o, r, c)
                                }
                                if (n < 0 ? t.tickInfo.vx > 0 && e.EdgeAABBLeft(t, a, i, s, o, r, c) : t.tickInfo.vx < 0 && e.EdgeAABBRight(t, a, i, s, o, r, c), !t.pbActive || !a.pbActive) return;
                                l < 0 ? t.tickInfo.vy > 0 && e.EdgeAABBTop(t, a, i, s, o, r, c) : t.tickInfo.vy < 0 && e.EdgeAABBBottom(t, a, i, s, o, r, c)
                            }
                        }
                    }
                }, {
                    key: "Debug",
                    value: function(e, t, a, i, s, n, l, o) {
                        t.myLayer != p.a.LAYER.SIMULATION ? console.warn("[" + t.pEngine._tickNumber + "]", e, a.uid, t.tickInfo, i, s, t.pos) : console.log("SIM CHECK.")
                    }
                }, {
                    key: "EdgeAABBLeft",
                    value: function(e, t, a, i, s, n, l) {
                        t.goType == d.a.GO_TYPE.WALL && y.a.TaskUpdateDontNotify(e.gameScene, y.a.TASK_TYPE.BALL_WALL_EDGE, !0, _.a.currentLevel, d.a.PHY.COL_EDGE.LEFT), !0 !== n.collideEdge(d.a.PHY.COL_EDGE.LEFT, e, t, a, i, s, n, l) && (e.pos.x += a, e.vel.x = -Math.abs(e.vel.x))
                    }
                }, {
                    key: "EdgeAABBRight",
                    value: function(e, t, a, i, s, n, l) {
                        t.goType == d.a.GO_TYPE.WALL && y.a.TaskUpdateDontNotify(e.gameScene, y.a.TASK_TYPE.BALL_WALL_EDGE, !0, _.a.currentLevel, d.a.PHY.COL_EDGE.RIGHT), !0 !== n.collideEdge(d.a.PHY.COL_EDGE.RIGHT, e, t, a, i, s, n, l) && (e.pos.x += a, e.vel.x = Math.abs(e.vel.x))
                    }
                }, {
                    key: "EdgeAABBTop",
                    value: function(e, t, a, i, s, n, l) {
                        !0 !== n.collideEdge(d.a.PHY.COL_EDGE.TOP, e, t, a, i, s, n, l) && (e.pos.y += i, e.vel.y = -Math.abs(e.vel.y))
                    }
                }, {
                    key: "EdgeAABBBottom",
                    value: function(e, t, a, i, s, n, l) {
                        !0 !== n.collideEdge(d.a.PHY.COL_EDGE.BOTTOM, e, t, a, i, s, n, l) && (e.pos.y += i, e.vel.y = Math.abs(e.vel.y))
                    }
                }]), e
            }();
        r()(c, "pBodySim", void 0), r()(c, "pBodySimCavein", void 0), t.a = c
    },
    82: function(e, t, a) {
        "use strict";
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(21),
            r = a(0),
            h = a(23),
            p = (a(37), a(18)),
            d = a(2),
            y = a(14),
            _ = function() {
                function e(t) {
                    var a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                    s()(this, e), e.scenePlugin.launch("FillerAdScene"), e.adScene.scene.bringToTop("FillerAdScene"), this.callbackOnCompleted = t, this.myScene = e.adScene, this.img_background = this.myScene.add.tileSprite(3 * -r.a.gameWidth, 3 * -r.a.gameHeight, 7 * r.a.gameWidth, 7 * r.a.gameHeight, r.a.spriteKey, "ui/black.png"), this.img_background.setDisplayOrigin(.5, .5), this.img_background.setInteractive(), this.img_game = null;
                    var i = 6;
                    (r.a.isBS2 || r.a.isBS3) && (i = 0), r.a.isBT && (this.open_background = new h.a(this.myScene, r.a.gameWidth / 2, .89 * r.a.gameHeight, 230, 80, "ui/main_menu_back.png", {
                        top: 30,
                        bottom: 30,
                        left: 30,
                        right: 30
                    })), this.open_button = new o.a(this.myScene, r.a.gameWidth / 2, .89 * r.a.gameHeight, 200, 50, {
                        text: "OPEN",
                        size: 42,
                        fixY: i
                    }, this.openAd.bind(this));
                    var n = r.a.gameWidth - y.a.notchOffset - 50;
                    r.a.isBT && (this.close_background = new h.a(this.myScene, n, 40, 100, 60, "ui/main_menu_back.png", {
                        top: 30,
                        bottom: 30,
                        left: 30,
                        right: 30
                    }), this.close_background.ninePatch.alpha = .7);
                    var l = 30;
                    r.a.isBS3 && (l = 50), this.close_button = new o.a(this.myScene, n, 40, 70, l, {
                        text: "X",
                        size: 32,
                        fixY: i
                    }, this._closeAd.bind(this)), this.txt_timer = this.myScene.add.text(n, 40, "15"), this.txt_timer.visible = !1, this.myTimer = null, this.timerRepeatCount = 0, p.a.isFacebook && this._showOpenButton(!1), this.drawAd(a)
                }
                return l()(e, [{
                    key: "drawAd",
                    value: function() {}
                }, {
                    key: "openAd",
                    value: function() {}
                }, {
                    key: "_closeAd",
                    value: function() {
                        d.a.log("Closed rewarded ad."), e.scenePlugin.stop("FillerAdScene"), this.close_button.destroyMyUIButton(), this.open_button.destroyMyUIButton(), d.a.log("closing ad.", this, this.callbackOnCompleted), null != this.callbackOnCompleted && this.callbackOnCompleted(!0)
                    }
                }, {
                    key: "setRewarded",
                    value: function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 15;
                        this._showCloseButton(!1), this.timerRepeatCount = e, this.txt_timer.text = this.timerRepeatCount.toString(), this.txt_timer.visible = !0, this.myTimer = this.myScene.time.addEvent({
                            delay: 1e3,
                            callback: this._updateRewardedTimer.bind(this),
                            callbackScope: this,
                            repeat: e - 1
                        })
                    }
                }, {
                    key: "_updateRewardedTimer",
                    value: function() {
                        this.timerRepeatCount--, this.txt_timer.text = this.timerRepeatCount.toString(), 0 == this.timerRepeatCount && (this.txt_timer.visible = !1, this._showCloseButton(!0))
                    }
                }, {
                    key: "_showCloseButton",
                    value: function(e) {
                        this.close_background && this.close_background.setVisibleNinePatch(e), this.close_button && this.close_button.setVisibleMyUIButton(e)
                    }
                }, {
                    key: "_showOpenButton",
                    value: function(e) {
                        this.open_background && this.open_background.setVisibleNinePatch(e), this.open_button && this.open_button.setVisibleMyUIButton(e)
                    }
                }]), e
            }();
        _.adScene = null, _.scenePlugin = null, t.a = _
    },
    9: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return m
        }));
        var i = a(5),
            s = a.n(i),
            n = a(10),
            l = a.n(n),
            o = a(7),
            r = a.n(o),
            h = a(40),
            p = a.n(h),
            d = a(11),
            y = a.n(d),
            _ = a(3),
            c = a(2),
            m = function(e) {
                function t(e, a, i, n, o) {
                    var h, d = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 1,
                        y = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null;
                    return s()(this, t), h = l()(this, r()(t).call(this, e, a, i, n, o)), e.textures.exists(n) ? (e.add.existing(p()(h)), _.a.mySpriteScale(p()(h), d), null != y && _.a.mySpriteDepth(y, p()(h)), l()(h, p()(h))) : (c.a.error("MySprite", "No texture present.", n, o), l()(h, null))
                }
                return y()(t, e), t
            }(Phaser.GameObjects.Sprite)
    },
    96: function(e, t, a) {
        "use strict";
        a.d(t, "a", (function() {
            return m
        }));
        var i = a(5),
            s = a.n(i),
            n = a(6),
            l = a.n(n),
            o = a(17),
            r = a.n(o),
            h = a(3),
            p = a(21),
            d = a(4),
            y = a(36),
            _ = a(0),
            c = a(20),
            m = function() {
                function e(t, a, i) {
                    if (s()(this, e), null != a.uid) {
                        if (d.a.gameSettings.shownGamePopups.includes(a.uid)) return void(i && i());
                        d.a.gameSettings.shownGamePopups.push(a.uid)
                    }
                    this.scene = t, this.gamePopupMsg = a, this.callback = i, this.popupContainer = null, this._oldButtonGroup = y.a._activeScene, this._x = a.x || _.a.gameWidth / 2, this._y = a.y || _.a.gameHeight / 2, this._w = a.w || _.a.gameWidth - 100, this._h = a.h || _.a.gameHeight - 200, this.FRAME_RECT = new Phaser.Geom.Rectangle(this._x - this._w / 2, this._y - this._h / 2, this._w, this._h), this._init()
                }
                return l()(e, [{
                    key: "_init",
                    value: function() {
                        if (this.popupContainer = this.scene.add.container(), h.a.mySpriteDepth(h.a.RENDER_DEPTH.GAME_POPUP, this.popupContainer), null != this.gamePopupMsg.highlightRect) {
                            this._disableWholeBackground(!1);
                            var e = this.scene.add.graphics({
                                    x: this.gamePopupMsg.highlightRect.x + this.gamePopupMsg.highlightRect.width / 2,
                                    y: this.gamePopupMsg.highlightRect.y + this.gamePopupMsg.highlightRect.height / 2
                                }),
                                t = new Phaser.Geom.Rectangle(-this.gamePopupMsg.highlightRect.width / 2, -this.gamePopupMsg.highlightRect.height / 2, this.gamePopupMsg.highlightRect.width, this.gamePopupMsg.highlightRect.height);
                            e.lineStyle(6, 16777215, 1), e.strokeRectShape(t), h.a.mySpriteDepth(h.a.RENDER_DEPTH.GAME_POPUP, e), this.scene.add.tween({
                                targets: e,
                                scale: {
                                    from: 1,
                                    to: 1.2
                                },
                                alpha: {
                                    from: .6,
                                    to: 1
                                },
                                duration: 110,
                                loop: -1,
                                yoyo: !0
                            }), this.popupContainer.add(e)
                        } else this._disableWholeBackground(!0);
                        this._backgroundWindowColor();
                        var a = this.scene.add.bitmapText(this._x, this._y, _.a.fontNames.MENU, this.gamePopupMsg.message, 25, 1);
                        a.x -= a.width / 2, a.y -= a.height / 2, this.popupContainer.add(a);
                        var i = 6;
                        (_.a.isBS2 || _.a.isBS3) && (i = 0), this.closeBtn = new p.a(this.scene, this._x, this._y + 48 + 20, 100, 48, {
                            text: this.gamePopupMsg.buttonTxt,
                            size: 36,
                            fixY: i
                        }, this._closeButton.bind(this), null, null, null, !0, "gamePopup"), this.closeBtn.addToContainer(this.popupContainer), null != this.gamePopupMsg.icon && c.a.isLazyLoaded && (this.icon = this.scene.add.sprite(this._x, this._y, _.a.lazySpriteKey, this.gamePopupMsg.icon), this.popupContainer.add(this.icon), this.icon.y -= 55)
                    }
                }, {
                    key: "_disableWholeBackground",
                    value: function(e) {
                        var t = new Phaser.Geom.Rectangle(-1e3, -1e3, 3e3, 3e3),
                            a = this.scene.add.graphics(),
                            i = .9;
                        e || (i = .01), a.fillStyle(0, i), a.fillRectShape(t), a.setInteractive({
                            hitArea: t,
                            hitAreaCallback: Phaser.Geom.Rectangle.Contains
                        }), this.popupContainer.add(a)
                    }
                }, {
                    key: "_backgroundWindowColor",
                    value: function() {
                        var e = this.scene.add.graphics(),
                            t = 6513507,
                            a = 1,
                            i = 0;
                        _.a.isBS3 && (t = 2633, a = .85, i = 14998025), e.fillStyle(t, a), e.lineStyle(2, i, 1), e.fillRectShape(this.FRAME_RECT), e.strokeRectShape(this.FRAME_RECT), this.popupContainer.add(e)
                    }
                }, {
                    key: "_closeButton",
                    value: function() {
                        this.closeBtn.destroyMyUIButton(), y.a._activeScene = this._oldButtonGroup, this.popupContainer.removeAll(!0), this.callback && this.callback()
                    }
                }]), e
            }();
        r()(m, "COL_WHITE", 16777215), r()(m, "COL_YELLOW", 14867459), r()(m, "COL_GREY", 9474192), r()(m, "COL_BLACK", 0), r()(m, "COL_RED", 16711680), r()(m, "COL_DARKEN", .4), m.MSGS = {
            EDITOR_ONLY_WEB: {
                message: "Level editor can be used on your computer.",
                buttonTxt: "CLOSE"
            },
            UPGRADE_LOW_RANK: {
                uid: "reach_bronze_to_upgrade",
                message: "Reach -BRONZE RANK- to unlock upgrades.",
                buttonTxt: "OK"
            },
            FINISH_LEVELS_FOR_UPGRADE_PTS: {
                uid: "fnsh_lvls_pt",
                message: "Get an UPGRADE POINT for each completed level.",
                buttonTxt: "OK",
                icon: "retention/upgrade_btn.png"
            },
            UPGRADE_TIMEBAR_SHOW_FIRST: {
                uid: "entered dynamically in MyUpgradeSelect.js",
                message: "Upgrade will auto-activate when the TIMER reaches it.",
                buttonTxt: "OK",
                h: 200
            }
        }
    }
});